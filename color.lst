Microsoft (R) Macro Assembler Version 6.15.8803		    03/11/22 14:24:57
color.asm						     Page 1 - 1


				; Charles H. Moore : invertor of colorForth, in masm, 2001 Jul 22, Public Domain
				; Greg Bailey : President at GreenArrays, Inc - https://www.youtube.com/user/GreenArraysInc/videos
					;; Old Release 02b colorForth based arrayForth software  as of 10/30/2013, at                
					;; http://www.greenarraychips.com/home/support/index.html#software
					;; http://www.greenarraychips.com/home/documents/downindex.html
				; colorForth for Windows By Roman Pavlyuk, 2003 plus other tools
					;;http://web.archive.org/web/20040725124909/http://www.geocities.com/eleks_76/
				; Howerd Oakford : www.inventio.co.uk colorForth for 80x86 PC in NASM

				; In memorials to Jeff Fox , Alumni of GreenArrays 
				  

				;; this is colorForth 22 for win32, in masm ml 6.1.5, ver.02/22/22   
						 
					; Data are addressed as 32-bit words, not bytes. 
					; But esp and esi hold byte addresses, for optimization. 
					; Instructions are optimized if agruments are literals. 
					; Registers are assigned:
					; 0 eax: stack (1st number on Data stack) TOS_the top stack item ( eax --> ebx )
					; 1 ecx: counter, string counter, scratch register
					; 2 edx: address register A, I/O port, run-time pointer (?), "a register" used by  a! 
				             ;; , otherwise scratch register 
					; 3 ebx: scratch register
					; 4 esp: the call ... ret, byte pointer to top of Return stack 
					; 5 ebp: variable pointer register 
					; 6 esi: byte pointer to 2nd number on Data stack,is the stack pointer, also needed by lods and movs
					; 7 edi: dword pointer to next word to be interpreted, dictionary pointer 
				             ;; ( H --> : HERE ( -- a )   H @ ; )
					; ds, es, cs - segment selector
					; blocks.bin originally at offset 4800h (1200h * 4)
					; icons.bin  originally at offset 3000h


				.486p
				.MODEL flat, stdcall

 00000000			_STACK     segment para 'STACK'

 = 00000BB8			Godd_size  equ 750*4
 = 00001770			mains_size equ 1500*4
 = 00000BB8			maind_size equ 750*4
 = 00000BB8			gap_size   equ 750*4
 = 00004650			area_size  equ Godd_size+mains_size+maind_size+maind_size+gap_size

 00000000  00001194 [		           dd  area_size/4 dup (offset dummy)
	    00004690 R
	   ]

 00004650 = 00004650		Gods       equ $

 00004650  00000040 [		trash_adr  db  64 dup ('T')
	    54
	   ]
 00004690 00000000		dummy      dd  0

 = 00003A98			Godd       equ Gods-Godd_size
 = 00002328			mains      equ Godd-mains_size
 = 00001770			maind      equ mains-maind_size
 00004694			_STACK     ends

 00000000			.code

 00000000			code_begin:

				includelib kernel32.lib
				includelib gdi32.lib
				includelib user32.lib

				; imports from kernel32.dll
				    ExitProcess        PROTO :DWORD
				    GetLastError       PROTO
				    GetModuleHandleA   PROTO :DWORD

				    CloseHandle        PROTO :DWORD
				    CreateFileA        PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    CreateFileMappingA PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    MapViewOfFile      PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    UnmapViewOfFile    PROTO :DWORD
				    VirtualAlloc       PROTO :DWORD, :DWORD, :DWORD, :DWORD
				    
				    LoadLibraryA       PROTO :DWORD
				    GetProcAddress     PROTO :DWORD, :DWORD
					OutputDebugStringA PROTO :DWORD
				 
				; imports from user32.dll
				    GetAsyncKeyState   PROTO :DWORD
				    GetKeyState        PROTO :DWORD
				    MapVirtualKeyA     PROTO :DWORD, :DWORD
				    RegisterClassExA   PROTO :DWORD
				    CreateWindowExA    PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    ShowWindow         PROTO :DWORD, :DWORD
				    UpdateWindow       PROTO :DWORD
				    DefWindowProcA     PROTO :DWORD, :DWORD, :DWORD,:DWORD
				    GetDC              PROTO :DWORD
				    LoadIconA          PROTO :DWORD, :DWORD
				    LoadCursorA        PROTO :DWORD, :DWORD
				    BeginPaint         PROTO :DWORD, :DWORD
				    EndPaint           PROTO :DWORD, :DWORD
				    InvalidateRect     PROTO :DWORD, :DWORD, :DWORD
				      
				    PeekMessageA       PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    GetMessageA        PROTO :DWORD, :DWORD, :DWORD, :DWORD
				    TranslateMessage   PROTO :DWORD
				    DispatchMessageA   PROTO :DWORD
				    
				       
				; imports from gdi32.dll
				    CreateCompatibleDC PROTO :DWORD
				    CreateDIBSection   PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    StretchDIBits      PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				          

 00000000			fail_process:
 00000000  6A 01		    push   1      
 00000002  E8 00000000 E	    call   ExitProcess
				    
 00000007			bye:    
 00000007			exit_process:
 00000007  6A 00		    push   0      
 00000009  E8 00000000 E	    call   ExitProcess

				    
 0000000E			last_error:
 0000000E  E8 00000000 E	    call   GetLastError
 00000013  C3			    ret        

				next   MACRO adr
				    dec    ecx
				    jnz    adr
				ENDM

				DUP_   MACRO
				    lea    esi, [esi-4]
				    mov    [esi], eax
				ENDM

				; lodsd  loads a 32 bit dword from [ds:esi] into _TOS_, increments  esi  by 4
				DROP   MACRO
				    lodsd 
				ENDM

 = 00000400			hp     equ 1024    ; horizontal size
 = 00000300			vp     equ 768     ; vertical size
 = 00000002			bpc    equ 2       ; bytes per color (16 bit)

				;   100000 dictionary
				;    a0000 top of return stack
				;    9f800 top of data stack
				;    9d800 free
				;    97000 floppy buffer
				;     4800 source
				;icons  equ 12*256*4 ; 3000
				;     7c00 BIOS boot sector
				;        0 Forth

 00000014 69 63 6F 6E 73	icons_file     db  'icons.bin', 0
	   2E 62 69 6E 00
 0000001E 62 6C 6F 63 6B	blocks_file    db  'blocks.bin', 0
	   73 2E 62 69 6E
	   00

 00000029 00000000		icons_adr      dd  0
 0000002D 00000000		blocks_adr     dd  0

 00000031			icon0: 
				    DUP_
 00000031  8D 76 FC	     1	    lea    esi, [esi-4]
 00000034  89 06	     1	    mov    [esi], eax
 00000036  A1 00000029 R	    mov    eax, [icons_adr]
 0000003B  C1 E8 02		    shr    eax, 2
 0000003E  C3			    ret
				    
 0000003F			blk0:
				    DUP_
 0000003F  8D 76 FC	     1	    lea    esi, [esi-4]
 00000042  89 06	     1	    mov    [esi], eax
 00000044  A1 0000002D R	    mov    eax, [blocks_adr]
 00000049  C1 E8 02		    shr    eax, 2
 0000004C  2D 00004800		    sub    eax, 18 shl 10
 00000051  C3			    ret

				; in:  edx - file name
				; out: eax - memory address
 00000052			map_file:
 00000052  6A 00		    push   0               ; template file
 00000054  68 00000080		    push   00000080h       ; attributes
 00000059  6A 03		    push   00000003h       ; OPEN_EXISTING
 0000005B  6A 00		    push   0               ; security attributes
 0000005D  6A 03		    push   00000003h       ; FILE_SHARE_READ or FILE_SHARE_WRITE
 0000005F  68 C0000000		    push   0c0000000h      ; GENERIC_READ or GENERIC_WRITE
 00000064  52			    push   edx             ; file name
 00000065  E8 00000000 E	    call   CreateFileA     ; -1 indicates error
 0000006A  40			    inc    eax             ; add 1
 0000006B  74 2C		    jz     map_file_ex     ; jmp if eax == 0 (error == -1)

 0000006D  48			    dec    eax
 0000006E  33 DB		    xor    ebx, ebx
 00000070  53			    push   ebx             ; 0 return address
 00000071  50			    push   eax             ; save file handle
				    
 00000072  53			    push   ebx             ; object name
 00000073  53			    push   ebx             ; size
 00000074  53			    push   ebx
 00000075  6A 04		    push   00000004h       ; PAGE_READWRITE
 00000077  53			    push   ebx             ; security attributes
 00000078  50			    push   eax             ; file handle
 00000079  E8 00000000 E	    call   CreateFileMappingA
 0000007E  0B C0		    or     eax, eax
 00000080  74 11		    jz     map_file_ex1
				    
 00000082  33 DB		    xor    ebx, ebx
 00000084  53			    push   ebx             ; whole file
 00000085  53			    push   ebx             ; position
 00000086  53			    push   ebx             
 00000087  6A 02		    push   00000002h       ; SECTION_MAP_WRITE
 00000089  50			    push   eax
 0000008A  E8 00000000 E	    call   MapViewOfFile

 0000008F  5B			    pop    ebx             ; file handle
 00000090  5A			    pop    edx             ; drop 0 return address
 00000091  50			    push   eax             ; save address
 00000092  53			    push   ebx
 00000093			map_file_ex1:
 00000093  E8 00000000 E	    call   CloseHandle  

 00000098  58			    pop    eax   
 00000099			map_file_ex:    
 00000099  C3			    ret

				; in:  eax - memory address
 0000009A			unmap_file:
 0000009A  50			    push   eax
 0000009B  E8 00000000 E	    call   UnmapViewOfFile
 000000A0  C3			    ret       

 000000A1			map_work_files:
 000000A1  BA 00000014 R	    mov    edx, offset icons_file
 000000A6  E8 FFFFFFA7		    call   map_file
 000000AB  0B C0		    or     eax, eax
 000000AD  0F 84 FFFFFF4D	    jz     fail_process
 000000B3  A3 00000029 R	    mov    [icons_adr], eax
				     
 000000B8  BA 0000001E R	    mov    edx, offset blocks_file
 000000BD  E8 FFFFFF90		    call   map_file
 000000C2  0B C0		    or     eax, eax
 000000C4  0F 84 FFFFFF36	    jz     fail_process
 000000CA  A3 0000002D R	    mov    [blocks_adr], eax
 000000CF  C1 E8 02		    shr    eax, 2
 000000D2  C1 E8 08		    shr    eax, 8
 000000D5  83 E8 12		    sub    eax, 12h
 000000D8  A3 0000509C R	    mov    offvadr,eax
 000000DD  C3			    ret 

				; in:  ecx - size
				; out: eax - address
 000000DE			alloc_mem:
 000000DE  6A 40		    push   40h                   ; PAGE_EXECUTE_READWRITE
 000000E0  68 00001000		    push   1000h                 ; MEM_COMMIT
 000000E5  51			    push   ecx                   ; size 1 MB
 000000E6  6A 00		    push   00000000h             ; dictionary starting address
 000000E8  E8 00000000 E	    call   VirtualAlloc
 000000ED  0B C0		    or     eax, eax
 000000EF  0F 84 FFFFFF0B	    jz     fail_process
 000000F5  C3			    ret
				    
 000000F6			alloc_buffers:
				; dictionary
 000000F6  B9 00100000		    mov    ecx, 1024*1024*1        ; dictionary size 1 MB
 000000FB  E8 FFFFFFDE		    call   alloc_mem      
 00000100  A3 00000AC8 R	    mov    [H], eax

 00000105  C3			    ret    

 00000030			WNDCLASSEX struc
 00000000  00000000		  cbSize            DWORD      ?
 00000004  00000000		  style             DWORD      ?
 00000008  00000000		  lpfnWndProc       DWORD      ?
 0000000C  00000000		  cbClsExtra        DWORD      ?
 00000010  00000000		  cbWndExtra        DWORD      ?
 00000014  00000000		  hInstance         DWORD      ?
 00000018  00000000		  hIcon             DWORD      ?
 0000001C  00000000		  hCursor           DWORD      ?
 00000020  00000000		  hbrBackground     DWORD      ?
 00000024  00000000		  lpszMenuName      DWORD      ?
 00000028  00000000		  lpszClassName     DWORD      ?
 0000002C  00000000		  hIconSm           DWORD      ?
				WNDCLASSEX ends

 00000106 00000000		wcmain     WNDCLASSEX          <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000136 00000000		hmodule    dd  0
 0000013A 00000000		hiconmain  dd  0
 0000013E 00000000		hcurmain   dd  0
 00000142 00000000		hwndmain   dd  0                
 00000146 000002AA		wndwidth   dd  hp*2/3
 0000014A 00000200		wndheight  dd  vp*2/3
 0000014E 43 6F 6C 6F 72	szwndclass db  "ColorForth" , 0
	   46 6F 72 74 68
	   00
 00000159 43 6F 6C 6F 72	szwndname  db  "ColorForth 22 for Win32", 0
	   46 6F 72 74 68
	   20 32 32 20 66
	   6F 72 20 57 69
	   6E 33 32 00
 00000171  00000040 [		_IObuff    db  64 dup ('I')
	    49
	   ]
 000001B1 00			dummyio    db  0

 000001B2 000001B2		wnd_proc   proc hWnd :DWORD, uMsg   :DWORD, wParam :DWORD, lParam :DWORD
 000001B5  8B 55 0C		    mov    edx, [uMsg]
				    
 000001B8  83 FA 02		@@: cmp    edx,  2h  ; WM_DESTROY
 000001BB  75 05		    jne    @f
 000001BD  E9 FFFFFE45		    jmp    exit_process

 000001C2  83 FA 0F		@@: cmp    edx, 0fh  ; WM_PAINT    
 000001C5  75 09		    jne    @f
 000001C7  E8 0000027F		    call   draw_display
 000001CC  33 C0		    xor    eax, eax
 000001CE  EB 46		    jmp    wnd_proc_exx

 000001D0  83 FA 05		@@: cmp    edx, 5h   ; WM_SIZE
 000001D3  75 27		    jne    @f
 000001D5  8B 5D 14		    mov    ebx, [lParam]
 000001D8  8B C3		    mov    eax, ebx
 000001DA  25 0000FFFF		    and    eax, 0000ffffh
 000001DF  A3 00000146 R	    mov    [wndwidth], eax
 000001E4  C1 EB 10		    shr    ebx, 16                                                                    
 000001E7  89 1D 0000014A R	    mov    [wndheight], ebx
 000001ED  FF 35 00000142 R	    push   [hwndmain]
 000001F3  E8 00000000 E	    call   UpdateWindow
 000001F8  33 C0		    xor    eax, eax
 000001FA  EB 15		    jmp    wnd_proc_ex
				    
 000001FC			@@:    
 000001FC  FF 75 14		    push   [lParam]
 000001FF  FF 75 10		    push   [wParam]
 00000202  FF 75 0C		    push   [uMsg]
 00000205  FF 75 08		    push   [hWnd]
 00000208  E8 00000000 E	    call   DefWindowProcA
				    ret

 00000211			wnd_proc_ex:
 00000211  B8 00000001		    mov    eax, 1
 00000216			wnd_proc_exx:    
				    ret 
 0000021A			wnd_proc   endp

 0000021A			alloc_window:
 0000021A  6A 00		    push   0
 0000021C  E8 00000000 E	    call   GetModuleHandleA
 00000221  A3 00000136 R	    mov    [hmodule], eax
				    
 00000226  6A 01		    push   1
 00000228  50			    push   eax
 00000229  E8 00000000 E	    call   LoadIconA
 0000022E  A3 0000013A R	    mov    [hiconmain], eax
				    
 00000233  68 00007F00		    push   32512 ; IDC_ARROW
 00000238  6A 00		    push   0
 0000023A  E8 00000000 E	    call   LoadCursorA
 0000023F  A3 0000013E R	    mov    [hcurmain], eax

 00000244  BB 00000106 R	    mov    ebx, offset wcmain
 00000249  C7 03 00000030	    mov    [ebx].WNDCLASSEX.cbSize, sizeof WNDCLASSEX
 0000024F  C7 43 04		    mov    [ebx].WNDCLASSEX.style, 0001h or 0002h or 2000h ; or 80000000h
	   00002003
 00000256  C7 43 08		    mov    [ebx].WNDCLASSEX.lpfnWndProc, wnd_proc
	   000001B2 R
 0000025D  C7 43 0C		    mov    [ebx].WNDCLASSEX.cbClsExtra, 0
	   00000000
 00000264  C7 43 10		    mov    [ebx].WNDCLASSEX.cbWndExtra, 0
	   00000000
 0000026B  A1 00000136 R	    mov    eax, [hmodule]
 00000270  89 43 14		    mov    [ebx].WNDCLASSEX.hInstance, eax
 00000273  C7 43 20		    mov    [ebx].WNDCLASSEX.hbrBackground, 000000h
	   00000000
 0000027A  C7 43 24		    mov    [ebx].WNDCLASSEX.lpszMenuName, 0
	   00000000
 00000281  C7 43 28		    mov    [ebx].WNDCLASSEX.lpszClassName, offset szwndclass 
	   0000014E R
 00000288  A1 0000013A R	    mov    eax, [hiconmain]
 0000028D  89 43 18		    mov    [ebx].WNDCLASSEX.hIcon, eax
 00000290  89 43 2C		    mov    [ebx].WNDCLASSEX.hIconSm, eax
 00000293  A1 0000013E R	    mov    eax, [hcurmain]
 00000298  89 43 1C		    mov    [ebx].WNDCLASSEX.hCursor, eax
 0000029B  53			    push   ebx
 0000029C  E8 00000000 E	    call   RegisterClassExA
 000002A1  0B C0		    or     eax, eax
 000002A3  0F 84 FFFFFD57	    jz     fail_process
				    
 000002A9  33 DB		    xor    ebx, ebx
 000002AB  53			    push   ebx
 000002AC  FF 35 00000136 R	    push   [hmodule]
 000002B2  53			    push   ebx
 000002B3  53			    push   ebx
 000002B4  FF 35 0000014A R	    push   [wndheight]
 000002BA  FF 35 00000146 R	    push   [wndwidth]
 000002C0  6A 00		    push   0
 000002C2  6A 00		    push   0
 000002C4  68 00CF0000		    push   0CF0000h ; WS_SIZEBOX or WM_MINIMIZEBOX or WM_MAXIMIZEBOX
 000002C9  68 00000159 R	    push   offset szwndname
 000002CE  68 0000014E R	    push   offset szwndclass
 000002D3  68 00000300		    push   300h ; WS_EX_OVERLAPPEDWINDOW
 000002D8  E8 00000000 E	    call   CreateWindowExA
 000002DD  0B C0		    or     eax, eax
 000002DF  0F 84 FFFFFD1B	    jz     fail_process
 000002E5  A3 00000142 R	    mov    [hwndmain], eax
				    
 000002EA  6A 03		    push   3
 000002EC  50			    push   eax
 000002ED  E8 00000000 E	    call   ShowWindow
				    
 000002F2  6A 00		    push   0
 000002F4  6A 00		    push   0
 000002F6  FF 35 00000142 R	    push   [hwndmain]
 000002FC  E8 00000000 E	    call   InvalidateRect
				    
				;    push   [hwndmain]
				;    call   UpdateWindow
				               
 00000301  C3			    ret         
				    
 00000008			POINT struc
 00000000  00000000		  x  DWORD ?
 00000004  00000000		  y  DWORD ?
				POINT ends

 00000010			RECT struc 
 00000000  00000000		  left    dd      ?
 00000004  00000000		  top     dd      ?
 00000008  00000000		  right   dd      ?
 0000000C  00000000		  bottom  dd      ?
				RECT ends

 0000001C			MSG struc
 00000000  00000000		  hwnd      DWORD      ?
 00000004  00000000		  message   DWORD      ?
 00000008  00000000		  wParam    DWORD      ?
 0000000C  00000000		  lParam    DWORD      ?
 00000010  00000000		  time      DWORD      ?
 00000014  00000000		  pt        POINT      <>
	   00000000
				MSG ends
				    
 00000302 00000000		wm  MSG    <>         
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 0000031E			process_messages:
				;    push   1      ; PM_REMOVE
 0000031E  6A 00		    push   0h     ; WM_KEYLAST
 00000320  6A 00		    push   0h     ; WM_KEYFIRST
 00000322  6A 00		    push   0 ; [hwndmain]      
 00000324  68 00000302 R	    push   offset wm
 00000329  E8 00000000 E	    call   GetMessageA
 0000032E  0B C0		    or     eax, eax
 00000330  75 05		    jnz    process_messages_disp
 00000332  E9 FFFFFCD0		    jmp    exit_process
				    
 00000337			process_messages_disp:    
 00000337  68 00000302 R	@@: push   offset wm
 0000033C  E8 00000000 E	    call   TranslateMessage
 00000341  68 00000302 R	    push   offset wm
 00000346  E8 00000000 E	    call   DispatchMessageA
				    
 0000034B			process_messages_ex:
 0000034B  C3			    ret
				    
				    
 00000028			BITMAPINFOHEADER struc
 00000000  00000000		  biSize            DWORD      ?
 00000004  00000000		  biWidth           DWORD      ?
 00000008  00000000		  biHeight          DWORD      ?
 0000000C  0000			  biPlanes          WORD       ?
 0000000E  0000			  biBitCount        WORD       ?
 00000010  00000000		  biCompression     DWORD      ?
 00000014  00000000		  biSizeImage       DWORD      ?
 00000018  00000000		  biXPelsPerMeter   DWORD      ?
 0000001C  00000000		  biYPelsPerMeter   DWORD      ?
 00000020  00000000		  biClrUsed         DWORD      ?
 00000024  00000000		  biClrImportant    DWORD      ?
				BITMAPINFOHEADER ends
				    
 0000034C 00000000		bmih       BITMAPINFOHEADER    <>
	   00000000
	   00000000 0000
	   0000 00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000374 00000000		hdcdesktop dd 0
 00000378 00000000		hbmpframe  dd 0
 0000037C 00000000		hdcframe   dd 0

				    
 00000380			alloc_display:
				; get DC
 00000380  FF 35 00000142 R	    push   [hwndmain]
 00000386  E8 00000000 E	    call   GetDC
 0000038B  0B C0		    or     eax, eax
 0000038D  0F 84 FFFFFC6D	    jz     fail_process
 00000393  A3 00000374 R	    mov    [hdcdesktop], eax
				    
				; create bitmap DC
 00000398  6A 00		    push   0
 0000039A  E8 00000000 E	    call   CreateCompatibleDC                                                                                    
 0000039F  0B C0		    or     eax, eax
 000003A1  0F 84 FFFFFC59	    jz     fail_process
 000003A7  A3 0000037C R	    mov    [hdcframe], eax

				; create bitmap for frame data
 000003AC  33 C0		    xor    eax, eax
 000003AE  BB 0000034C R	    mov    ebx, offset bmih
 000003B3  C7 03 00000028	    mov    [ebx].BITMAPINFOHEADER.biSize, sizeof BITMAPINFOHEADER
 000003B9  C7 43 04		    mov    [ebx].BITMAPINFOHEADER.biWidth, hp
	   00000400
 000003C0  C7 43 08		    mov    [ebx].BITMAPINFOHEADER.biHeight, -vp
	   FFFFFD00
 000003C7  66| C7 43 0C		    mov    [ebx].BITMAPINFOHEADER.biPlanes, 1
	   0001
 000003CD  66| C7 43 0E		    mov    [ebx].BITMAPINFOHEADER.biBitCount, 16
	   0010
 000003D3  89 43 10		    mov    [ebx].BITMAPINFOHEADER.biCompression, eax               ; BI_RGB = 0
 000003D6  89 43 14		    mov    [ebx].BITMAPINFOHEADER.biSizeImage, eax
 000003D9  89 43 18		    mov    [ebx].BITMAPINFOHEADER.biXPelsPerMeter, eax
 000003DC  89 43 1C		    mov    [ebx].BITMAPINFOHEADER.biYPelsPerMeter, eax
 000003DF  89 43 20		    mov    [ebx].BITMAPINFOHEADER.biClrUsed, eax
 000003E2  89 43 24		    mov    [ebx].BITMAPINFOHEADER.biClrImportant, eax
 000003E5  50			    push   eax
 000003E6  50			    push   eax
 000003E7  68 00004340 R	    push   offset frame
 000003EC  50			    push   eax
 000003ED  53			    push   ebx
 000003EE  FF 35 0000037C R	    push   [hdcframe]
 000003F4  E8 00000000 E	    call   CreateDIBSection
 000003F9  0B C0		    or     eax, eax
 000003FB  0F 84 FFFFFBFF	    jz     fail_process
 00000401  A3 00000378 R	    mov    [hbmpframe], eax

 00000406  C3			    ret

 00000040			PAINTSTRUCT struc
 00000000  00000000		  hdc           DWORD      ?
 00000004  00000000		  fErase        DWORD      ?
 00000008  00000000		  rcPaint       RECT       <>
	   00000000
	   00000000
	   00000000
 00000018  00000000		  fRestore      DWORD      ?
 0000001C  00000000		  fIncUpdate    DWORD      ?
 00000020  00000020 [		  rgbReserved   BYTE 32 dup(?)
	    00
	   ]
				PAINTSTRUCT ends

 00000407 00000000		paintstruc PAINTSTRUCT  <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000020 [
	    00
	   ]
 00000447 00000000		hdcpaint   dd  0

 0000044B			draw_display:
 0000044B  68 00000407 R	    push   offset paintstruc
 00000450  FF 35 00000142 R	    push   [hwndmain]
 00000456  E8 00000000 E	    call   BeginPaint
 0000045B  0B C0		    or     eax, eax
 0000045D  0F 84 FFFFFB9D	    jz     fail_process
 00000463  A3 00000447 R	    mov    [hdcpaint], eax

 00000468  33 DB		    xor    ebx, ebx
 0000046A  68 00CC0020		    push   0CC0020h        ; SRCCOPY
 0000046F  53			    push   ebx
 00000470  68 0000034C R	    push   offset bmih 
 00000475  FF 35 00004340 R	    push   [frame]   
 0000047B  68 00000300		    push   vp
 00000480  68 00000400		    push   hp              
 00000485  53			    push   ebx
 00000486  53			    push   ebx
 00000487  FF 35 0000014A R	    push   [wndheight]
 0000048D  FF 35 00000146 R	    push   [wndwidth]
 00000493  53			    push   ebx
 00000494  53			    push   ebx
 00000495  FF 35 00000447 R	    push   [hdcpaint]    
 0000049B  E8 00000000 E	    call   StretchDIBits
				    
 000004A0  68 00000407 R	    push   offset paintstruc
 000004A5  FF 35 00000142 R	    push   [hwndmain]
 000004AB  E8 00000000 E	    call   EndPaint
				    
 000004B0  C3			    ret

 000004B1			notimpl:
 000004B1  E9 FFFFFB4A		    jmp    fail_process
				    
				    
 000004B6 00000000		fname  dd  0
 000004BA  00			       db  0    

				; ( $fn -- a )
 000004BB			fmap:
 000004BB  A3 000004B6 R	    mov    [fname], eax
 000004C0  56			    push   esi
 000004C1  BA 000004B6 R	    mov    edx, offset fname
 000004C6  E8 FFFFFB87		    call   map_file
 000004CB  5E			    pop    esi
 000004CC  C1 E8 02		    shr    eax, 2
 000004CF  C3			    ret
				    
				; ( a -- )
 000004D0			funmap:
 000004D0  56			    push   esi
 000004D1  C1 E0 02		    shl    eax, 2
 000004D4  E8 FFFFFBC1		    call   unmap_file
 000004D9  5E			    pop    esi
				    DROP
 000004DA  AD		     1	    lodsd 
 000004DB  C3			    ret

				; ( block count $fn -- )
 000004DC			bload:
 000004DC  E8 FFFFFFDA		    call   fmap
 000004E1  8B D8		    mov    ebx, eax
				    DROP   
 000004E3  AD		     1	    lodsd 
 000004E4  8B C8		    mov    ecx, eax
				    DROP
 000004E6  AD		     1	    lodsd 
 000004E7  56			    push   esi
 000004E8  57			    push   edi 
 000004E9  8B F8		    mov    edi, eax
 000004EB  0B DB		    or     ebx, ebx
 000004ED  74 1D		    jz     bload_ex
 000004EF  8B F3		    mov    esi, ebx
 000004F1  56			    push   esi
 000004F2  C1 E1 08		    shl    ecx, 8  ; * 256
 000004F5  83 EF 12		    sub    edi, 18
 000004F8  C1 E7 0A		    shl    edi, 10
 000004FB  03 3D 0000002D R	    add    edi, [blocks_adr]
 00000501  C1 E6 02		    shl    esi, 2
 00000504  F3/ A5		    rep    movsd
 00000506  5E			    pop    esi
 00000507  E8 FFFFFB8E		    call   unmap_file
				    
 0000050C			bload_ex:    
 0000050C  5F			    pop    edi
 0000050D  5E			    pop    esi
				    DROP
 0000050E  AD		     1	    lodsd 
 0000050F  C3			    ret
				    
 00000510			dlopen:    ; ( DLLName -- hDLL )
 00000510  50			    push   eax
 00000511  E8 00000000 E	    call   LoadLibraryA
 00000516  C3			    ret
				    
 00000517			dlimp:     ; ( hDLL ProcName -- a )
 00000517  50			    push   eax
				    DROP
 00000518  AD		     1	    lodsd 
 00000519  50			    push   eax
 0000051A  E8 00000000 E	    call   GetProcAddress
 0000051F  C3			    ret

 00000520			outputdebug:
 00000520  50			    push eax
 00000521  A1 00000171 R		mov	 eax, DWORD PTR _IObuff
 00000526  50			  	push	 eax
 00000527  FF 15 00000000 E	  	call	 DWORD PTR OutputDebugStringA
 0000052D  58				pop eax
 0000052E  C3			    ret

 0000052F 00000000		stack0     dd  0
 00000533 00000000		stack1     dd  0
 00000537 00000000		stack2     dd  0

 0000053B			warm: 
				    DUP_
 0000053B  8D 76 FC	     1	    lea    esi, [esi-4]
 0000053E  89 06	     1	    mov    [esi], eax
 00000540			_start:
 00000540			start: 
				; initialize stacks
 00000540  8B C4		    mov    eax, esp
 00000542  A3 0000052F R	    mov    [stack0], eax
 00000547  B9 00004000		    mov    ecx, 64*1024/4 ;4000h
 0000054C  51			@@: push   ecx
 0000054D  49			    dec    ecx
 0000054E  75 FC		    jnz    @b
 00000550  8B E0		    mov    esp, eax
 00000552  2D 00006000		    sub    eax, 24*1024 ;6000h
 00000557  A3 00000533 R	    mov    [stack1], eax
 0000055C  2D 00006000		    sub    eax, 24*1024 ;6000h
 00000561  A3 00000537 R	    mov    [stack2], eax

				;       mov    [me], esp
				;    mov    esp, Gods
 00000566  BE 00003A98 R	    mov    esi, Godd
				    
 0000056B  E8 FFFFFB31		    call   map_work_files
 00000570  E8 FFFFFB81		    call   alloc_buffers
				;    call   alloc_signal_char
 00000575  E8 FFFFFCA0		    call   alloc_window
 0000057A  E8 FFFFFE01		    call   alloc_display
				    
 0000057F  E8 00000082		    call   show0
				    
 00000584  C7 05 00000AE0 R	    mov    forths, (forth1-forth0)/4
	   0000004F
 0000058E  C7 05 00000ADC R	    mov    macros, (macro1-macro0)/4
	   00000006
				    
				; load block 0
 00000598  B8 00000012		    mov    eax, 18
 0000059D  E8 000004AA		    call   LOAD
				    
 000005A2  E9 0000449C		    jmp    ACCEPT

				ALIGN 4
 000005A8 00000009		nc         dd  9 ; Forth+Icons+blocks 24-161
 000005AC 000005B9 R		me         dd  offset God
 000005B0 00000000		screen     dd  0 ; the saving dword address of screen display variable (show screen proc)

 000005B4			ROUND: 
 000005B4  E8 00000021		    call   unPAAUSE_
 000005B9 00000000		God        dd  0 ; Gods-2*4
 000005BD  E8 00000018		    call   unPAAUSE_
 000005C2 00000000		main       dd  0 ; mains-2*4
 000005C6  EB EC		    jmp    ROUND

 000005C8			PAAUSE_: 
				    DUP_
 000005C8  8D 76 FC	     1	    lea    esi, [esi-4]
 000005CB  89 06	     1	    mov    [esi], eax
 000005CD  56			    push   esi         
 000005CE  A1 000005AC R	    mov    eax, me     
 000005D3  89 20		    mov    [eax], esp  
 000005D5  83 C0 04		    add    eax, 4      
 000005D8  FF E0		    jmp    eax         

 000005DA			unPAAUSE_: 
 000005DA  58			    pop    eax        
 000005DB  8B 20		    mov    esp, [eax] 
 000005DD  A3 000005AC R	    mov    me, eax    
 000005E2  5E			    pop    esi        
				    DROP
 000005E3  AD		     1	    lodsd 
 000005E4  C3			    ret

 000005E5			ACT: 
 000005E5  8B 15 00000537 R	    mov    edx, [stack2] ; maind-4 
 000005EB  83 EA 04		    sub    edx, 4
 000005EE  89 02		    mov    [edx], eax   
 000005F0  A1 00000533 R	    mov    eax, [stack1] ; mains-4 
 000005F5  83 E8 04		    sub    eax, 4       
 000005F8  8F 00		    pop    [eax]        
 000005FA  83 E8 04		    sub    eax, 4       
 000005FD  89 10		    mov    [eax], edx   
 000005FF  A3 000005C2 R	    mov    main, eax    
				    DROP
 00000604  AD		     1	    lodsd 
 00000605  C3			    ret

				COMMENT #
				ACT: 
				    mov    edx, maind-4 
				    mov    [edx], eax   
				    mov    eax, mains-4 
				    pop    [eax]        
				    sub    eax, 4       
				    mov    [eax], edx   
				    mov    main, eax    
				    DROP
				    ret
				#


 00000606			show0: 
 00000606  E8 00000001		    call   show
 0000060B  C3			    ret
				    
 0000060C			show: 
 0000060C  8F 05 000005B0 R	    pop    screen
				    DUP_
 00000612  8D 76 FC	     1	    lea    esi, [esi-4]
 00000615  89 06	     1	    mov    [esi], eax
 00000617  33 C0		    xor    eax, eax
 00000619  E8 FFFFFFC7		    call   ACT
 0000061E			@@:     
 0000061E  E8 00003D5A		    call   graphic
 00000623  FF 15 000005B0 R	    call   [screen]
 00000629  E8 00003D50		    call   SWITCH
 0000062E  40			    inc    eax
 0000062F  EB ED		    jmp    @b

 00000631			c_:  
 00000631  BE 00003A9C R	    mov    esi, Godd+4
 00000636  C3			    ret

 00000637			mark: 
 00000637  8B 0D 00000ADC R	    mov    ecx, macros
 0000063D  89 0D 00000ABC R	    mov    mk, ecx
 00000643  8B 0D 00000AE0 R	    mov    ecx, forths
 00000649  89 0D 00000AC0 R	    mov    mk+4, ecx
 0000064F  8B 0D 00000AC8 R	    mov    ecx, H
 00000655  89 0D 00000AC4 R	    mov    mk+2*4, ecx
 0000065B  C3			    ret

 0000065C			empty: 
 0000065C  8B 0D 00000AC4 R	    mov    ecx, mk+2*4
 00000662  89 0D 00000AC8 R	    mov    H, ecx
 00000668  8B 0D 00000AC0 R	    mov    ecx, mk+4
 0000066E  89 0D 00000AE0 R	    mov    forths, ecx
 00000674  8B 0D 00000ABC R	    mov    ecx, mk
 0000067A  89 0D 00000ADC R	    mov    macros, ecx
 00000680  C7 05 00000AD0 R	    mov    class, 0
	   00000000
 0000068A  C3			    ret

 0000068B			mFIND: 
 0000068B  8B 0D 00000ADC R	    mov    ecx, macros
 00000691  57			    push   edi
 00000692  8D 3C 8D		    lea    edi, [macro0-4+ecx*4]
	   00000AE0 R
 00000699  EB 0E		    jmp    @f

 0000069B			FIND: 
 0000069B  8B 0D 00000AE0 R	    mov    ecx, forths
 000006A1  57			    push   edi
 000006A2  8D 3C 8D		    lea    edi, [forth0-4+ecx*4]
	   00000CF8 R
 000006A9  FD			@@: std
 000006AA  F2/ AF		    repne  scasd
 000006AC  FC			    cld
 000006AD  5F			    pop    edi
 000006AE  C3			    ret

 000006AF			EX1: 
				    ;xor edi,edi
 000006AF  FF 0D 00004A3C R	    dec    words ; from keyboard
 000006B5  74 03		    jz     @f
				    DROP
 000006B7  AD		     1	    lodsd 
 000006B8  EB F5		    jmp    EX1

 000006BA  E8 FFFFFFDC		@@: call   FIND
 000006BF  75 4B		    jnz    ABORT1
				    DROP
 000006C1  AD		     1	    lodsd 
 000006C2  FF 24 8D		    jmp    [forth2+ecx*4]
	   00003850 R

 000006C9			execute: 
 000006C9  C7 05 00000AB8 R	    mov    lit, offset alit
	   00000893 R
				    DUP_
 000006D3  8D 76 FC	     1	    lea    esi, [esi-4]
 000006D6  89 06	     1	    mov    [esi], eax
 000006D8  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 000006DF			ex2: 
 000006DF  83 E0 F0		    and    eax, -20o
 000006E2  E8 FFFFFFB4		    call   FIND
 000006E7  75 08		    jnz    ABORT
				    DROP
 000006E9  AD		     1	    lodsd 
 000006EA  FF 24 8D		    jmp    [forth2+ecx*4]
	   00003850 R

 000006F1			ABORT: 
 000006F1  89 3D 000050A0 R	    mov    curs, edi
 000006F7  C1 E7 02		        shl    edi, 2
 000006FA  2B 3D 0000002D R	        sub    edi, [blocks_adr] 
 00000700  C1 EF 0A		    shr    edi, 10
 00000703  83 C7 12		        add    edi, 18
 00000706  89 3D 00005094 R	    mov    blk, edi
 0000070C			ABORT1: 
 0000070C  8B 25 0000052F R	    mov    esp, [stack0] ; Gods
 00000712  C7 05 00000A84 R	    mov    spaces+3*4, offset forthd
	   00000770 R
 0000071C  C7 05 00000A88 R	    mov    spaces+4*4, offset qcompile
	   000008C8 R
 00000726  C7 05 00000A8C R	    mov    spaces+5*4, offset cnum
	   0000086C R
 00000730  C7 05 00000A90 R	    mov    spaces+6*4, offset cshort
	   0000087C R
 0000073A  B8 0000002F		    mov    eax, 57o ; ?
 0000073F  E8 00003E2C		    call   ECHO_
 00000744  E9 000042FA		    jmp    ACCEPT

 00000749			sDEFINE: 
 00000749  8F 05 00000A84 R	    pop    aDEFINE
 0000074F  C3			    ret
				    
 00000750			MACRO_: 
 00000750  E8 FFFFFFF4		    call   sDEFINE
 00000755			macrod: 
 00000755  50			    push   eax   
 00000756  8B 0D 00000ADC R	    mov    ecx, macros
 0000075C  FF 05 00000ADC R	    inc    macros
 00000762  8D 0C 8D		    lea    ecx, [macro0+ecx*4]
	   00000AE4 R
 00000769  EB 19		    jmp    @f

 0000076B			FORTH: 
 0000076B  E8 FFFFFFD9		    call   sDEFINE
 00000770			forthd: 
 00000770  50			    push   eax
 00000771  8B 0D 00000AE0 R	    mov    ecx, [forths]
 00000777  FF 05 00000AE0 R	    inc    [forths]
 0000077D  8D 0C 8D		    lea    ecx, [forth0+ecx*4]
	   00000CFC R
 00000784  8B 14 BD		@@: mov    edx, [-4+edi*4]
	   FFFFFFFC
 0000078B  83 E2 F0		    and    edx, -20o
 0000078E  89 11		    mov    [ecx], edx
 00000790  8B 15 00000AC8 R	    mov    edx, h
 00000796  89 91 00002B54	    mov    [forth2-forth0+ecx], edx
 0000079C  8D 91 00002B54	    lea    edx, [forth2-forth0+ecx]
 000007A2  C1 EA 02		    shr    edx, 2
 000007A5  89 15 00000ACC R	    mov    [last], edx
 000007AB  58				pop    eax
 000007AC  89 25 00000AD4 R	    mov    [list], esp
 000007B2  C7 05 00000AB8 R	    mov    [lit], offset adup
	   00000818 R
 000007BC  F7 05 00000AD0 R	    test   class, -1
	   FFFFFFFF
 000007C6  74 06		    jz     @f
 000007C8  FF 25 00000AD0 R	    jmp    [class]
 000007CE  C3			@@: ret

 000007CF			cdrop: 
 000007CF  8B 15 00000AC8 R	    mov    edx, [h]
 000007D5  89 15 00000AD4 R	    mov    [list], edx
 000007DB  C6 02 AD		    mov    byte ptr [edx], 0adh ; lodsd
 000007DE  FF 05 00000AC8 R	    inc    [h]
 000007E4  C3			    ret

 000007E5			qdup: 
 000007E5  8B 15 00000AC8 R	    mov    edx, [H]
 000007EB  4A			    dec    edx
 000007EC  39 15 00000AD4 R	    cmp    [list], edx
 000007F2  75 0C		    jnz    cdup
 000007F4  80 3A AD		    cmp    byte ptr [edx], 0adh
 000007F7  75 07		    jnz    cdup
 000007F9  89 15 00000AC8 R	    mov    [H], edx
 000007FF  C3			    ret
				    
 00000800			cdup: 
 00000800  8B 15 00000AC8 R	    mov    edx, [H]
 00000806  C7 02 89FC768D	    mov    dword ptr [edx], 89fc768dh
 0000080C  C6 42 04 06		    mov    byte ptr [4+edx], 06
 00000810  83 05 00000AC8 R	    add    [H], 5
	   05
 00000817  C3			    ret

 00000818			adup: 
				    DUP_
 00000818  8D 76 FC	     1	    lea    esi, [esi-4]
 0000081B  89 06	     1	    mov    [esi], eax
 0000081D  C3			    ret

 0000081E			var1: 
				    DUP_
 0000081E  8D 76 FC	     1	    lea    esi, [esi-4]
 00000821  89 06	     1	    mov    [esi], eax
 00000823  8B 04 8D		    mov    eax, [4+forth0+ecx*4]
	   00000D00 R
 0000082A  C3			    ret
				    
 0000082B			variable: 
 0000082B  E8 FFFFFF40		    call   forthd
 00000830  C7 81 00002B54	    mov    [forth2-forth0+ecx], offset var1
	   0000081E R
 0000083A  FF 05 00000AE0 R	    inc    forths ; dummy entry for source address
 00000840  89 79 04		    mov    [4+ecx], edi
 00000843  E8 FFFFFF0D		    call   macrod
 00000848  C7 81 00002B54	    mov    [forth2-forth0+ecx], offset @f
	   0000085D R
 00000852  FF 05 00000ADC R	    inc    macros
 00000858  89 79 04		    mov    [4+ecx], edi
 0000085B  47			    inc    edi
 0000085C  C3			    ret
 0000085D  FF 15 00000AB8 R	@@: call   [lit]
 00000863  8B 04 8D		    mov    eax, [4+macro0+ecx*4]
	   00000AE8 R
 0000086A  EB 20		    jmp    @f

 0000086C			cNUM: 
 0000086C  FF 15 00000AB8 R	    call   [lit]
 00000872  8B 04 BD		    mov    eax, [edi*4]
	   00000000
 00000879  47			    inc    edi
 0000087A  EB 10		    jmp    @f

 0000087C			cSHORT:    
 0000087C  FF 15 00000AB8 R	    call   [lit]
 00000882  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00000889  C1 F8 05		    sar    eax, 5
 0000088C  E8 0000000C		@@: call   literal
				    DROP
 00000891  AD		     1	    lodsd 
 00000892  C3			    ret

 00000893			alit: 
 00000893  C7 05 00000AB8 R	    mov    [lit], offset adup
	   00000818 R
 0000089D			literal: 
 0000089D  E8 FFFFFF43		    call   qDUP
 000008A2  8B 15 00000AD4 R	    mov    edx, [list]
 000008A8  89 15 00000AD8 R	    mov    [list+4], edx
 000008AE  8B 15 00000AC8 R	    mov    edx, [h]
 000008B4  89 15 00000AD4 R	    mov    [list], edx
 000008BA  C6 02 B8		    mov    byte ptr [edx], 0b8h
 000008BD  89 42 01		    mov    [1+edx], eax
 000008C0  83 05 00000AC8 R	    add    [h], 5
	   05
 000008C7  C3			    ret

 000008C8			qCOMPILE: 
 000008C8  FF 15 00000AB8 R	    call   [lit]
 000008CE  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 000008D5  83 E0 F0		    and    eax, -20o
 000008D8  E8 FFFFFDAE		    call   mFIND
 000008DD  75 08		    jnz    @f
				    DROP
 000008DF  AD		     1	    lodsd 
 000008E0  FF 24 8D		    jmp    [macro2+ecx*4]
	   00003638 R
 000008E7  E8 FFFFFDAF		@@: call   FIND
 000008EC  8B 04 8D		    mov    eax, [forth2+ecx*4]
	   00003850 R
 000008F3  0F 85 FFFFFDF8	@@: jnz    ABORT
 000008F9			call_: 
 000008F9  8B 15 00000AC8 R	    mov    edx, [h]
 000008FF  89 15 00000AD4 R	    mov    [list], edx
 00000905  C6 02 E8		    mov    byte ptr [edx], 0e8h
 00000908  83 C2 05		    add    edx, 5
 0000090B  2B C2		    sub    eax, edx
 0000090D  89 42 FC		    mov    [-4+edx], eax
 00000910  89 15 00000AC8 R	    mov    [h], edx
				    DROP
 00000916  AD		     1	    lodsd 
 00000917  C3			    ret

 00000918			COMPILE: 
 00000918  FF 15 00000AB8 R	    call   [lit]
 0000091E  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00000925  83 E0 F0		    and    eax, -20o
 00000928  E8 FFFFFD5E		    call   mFIND
 0000092D  8B 04 8D		    mov    eax, [macro2+ecx*4]
	   00003638 R
 00000934  EB BD		    jmp    @b

 00000936			SHORT_: 
 00000936  C7 05 00000AB8 R	    mov    lit, offset alit
	   00000893 R
				    DUP_
 00000940  8D 76 FC	     1	    lea    esi, [esi-4]
 00000943  89 06	     1	    mov    [esi], eax
 00000945  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 0000094C  C1 F8 05		    sar    eax, 5
 0000094F  C3			    ret

 00000950			NUM: 
 00000950  C7 05 00000AB8 R	    mov    [lit], offset alit
	   00000893 R
				    DUP_
 0000095A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000095D  89 06	     1	    mov    [esi], eax
 0000095F  8B 04 BD		    mov    eax, [edi*4]
	   00000000
 00000966  47			    inc    edi
 00000967  C3			    ret

 00000968			comma: 
 00000968  B9 00000004		    mov    ecx, 4
 0000096D  8B 15 00000AC8 R	@@: mov    edx, [h]
 00000973  89 02		    mov    [edx], eax
 00000975  8B 06		    mov    eax, [esi] ; drop
 00000977  8D 14 11		    lea    edx, [edx+ecx]
 0000097A  8D 76 04		    lea    esi, [esi+4]
 0000097D  89 15 00000AC8 R	    mov    [h], edx
 00000983  C3			    ret

 00000984			comma1: 
 00000984  B9 00000001		    mov    ecx, 1
 00000989  EB E2		    jmp    @b

 0000098B			comma2: 
 0000098B  B9 00000002		    mov    ecx, 2
 00000990  EB DB		    jmp    @b

 00000992			comma3: 
 00000992  B9 00000003		    mov    ecx, 3
 00000997  EB D4		    jmp    @b

 00000999			semi: 
 00000999  8B 15 00000AC8 R	    mov    edx, [H]
 0000099F  83 EA 05		    sub    edx, 5
 000009A2  39 15 00000AD4 R	    cmp    [list], edx
 000009A8  75 08		    jnz    @f
 000009AA  80 3A E8		    cmp    byte ptr [edx], 0e8h
 000009AD  75 03		    jnz    @f
 000009AF  FE 02		    inc    byte ptr [edx] ; jmp
 000009B1  C3			    ret
 000009B2  C6 42 05 C3		@@: mov    byte ptr [5+edx], 0c3h ; ret
 000009B6  FF 05 00000AC8 R	    inc    [H]
 000009BC  C3			    ret

 000009BD			then: 
 000009BD  89 25 00000AD4 R	    mov    [list], esp
 000009C3  8B 15 00000AC8 R	    mov    edx, [h]
 000009C9  2B D0		    sub    edx, eax
 000009CB  88 50 FF		    mov    [-1+eax], DL
				    DROP
 000009CE  AD		     1	    lodsd 
 000009CF  C3			    ret

 000009D0			begin: 
 000009D0  89 25 00000AD4 R	    mov    [list], esp
 000009D6			here: 
				    DUP_
 000009D6  8D 76 FC	     1	    lea    esi, [esi-4]
 000009D9  89 06	     1	    mov    [esi], eax
 000009DB  A1 00000AC8 R	    mov    eax, [h]
 000009E0  C3			    ret

 000009E1			qlit: 
 000009E1  8B 15 00000AC8 R	    mov    edx, [h]
 000009E7  8D 52 FB		    lea    edx, [edx-5]
 000009EA  39 15 00000AD4 R	    cmp    [list], edx
 000009F0  75 33		    jnz    @f
 000009F2  80 3A B8		    cmp    byte ptr [edx], 0b8h
 000009F5  75 2E		    jnz    @f
				    DUP_
 000009F7  8D 76 FC	     1	    lea    esi, [esi-4]
 000009FA  89 06	     1	    mov    [esi], eax
 000009FC  A1 00000AD8 R	    mov    eax, [list+4]
 00000A01  A3 00000AD4 R	    mov    [list], eax
 00000A06  8B 42 01		    mov    eax, [1+edx]
 00000A09  81 7A FB		    cmp    dword ptr [edx-5], 89fc768dh ; dup
	   89FC768D
 00000A10  74 0B		    jz     q1
 00000A12  89 15 00000AC8 R	    mov    [h], edx
 00000A18  E9 FFFFFDB2		    jmp    cdrop            
 00000A1D			q1: 
 00000A1D  83 05 00000AC8 R	    add    [h], -10 ; flag nz
	   F6
 00000A24  C3			    ret
 00000A25  33 D2		@@: xor    edx, edx ; flag z
 00000A27  C3			    ret

 00000A28			less: 
 00000A28  39 06		    cmp    [esi], eax
 00000A2A  78 02		    js     @f ; flag nz
 00000A2C  33 C9		    xor    ecx, ecx ; flag z
 00000A2E  C3			@@: ret

 00000A2F			qIGNORE: 
 00000A2F  F7 04 BD		    test   dword ptr [-4+edi*4], -20o
	   FFFFFFFC
	   FFFFFFF0
 00000A3A  75 02		    jnz    nul
 00000A3C  5F			    pop    edi
 00000A3D  5F			    pop    edi
 00000A3E			nul: 
 00000A3E  C3			    ret

 00000A3F			jump: 
 00000A3F  5A			    pop    edx
 00000A40  03 D0		    add    edx, eax
 00000A42  8D 54 82 05		    lea    edx, [5+eax*4+edx]
 00000A46  03 52 FC		    add    edx, [-4+edx]
				    DROP
 00000A49  AD		     1	    lodsd 
 00000A4A  FF E2		    jmp    edx

 00000A4C			LOAD: ;mov    eax, blk !! loading crt blk bug
 00000A4C  83 E8 12		     sub    eax, 18
 00000A4F  C1 E0 08		    shl    eax, 10-2
 00000A52  8B 1D 0000002D R	    mov    ebx, [blocks_adr]
 00000A58  C1 EB 02		    shr    ebx, 2
 00000A5B  03 C3		    add    eax, ebx
 00000A5D  57			    push   edi
 00000A5E  8B F8		    mov    edi, eax
				    DROP
 00000A60  AD		     1	    lodsd 
 00000A61			INTER:  
 00000A61  8B 14 BD		    mov    edx, [edi*4]
	   00000000
 00000A68  47			    inc    edi
 00000A69  83 E2 0F		    and    edx, 17o
 00000A6C  FF 14 95		    call   spaces[edx*4]
	   00000A78 R
 00000A73  EB EC		    jmp    INTER

				ALIGN 4
 00000A78 00000A2F R		spaces     dd   offset qIGNORE,  offset execute, offset NUM                                    
	   000006C9 R
	   00000950 R
 00000A84 00000755 R		aDEFINE    dd 5+offset MACRO_                                               
 00000A88  000008C8 R		           dd   offset qCOMPILE, offset cNUM,    offset cSHORT, offset COMPILE                 
	   0000086C R
	   0000087C R
	   00000918 R
 00000A98  00000936 R		           dd   offset SHORT_,   offset nul,     offset nul,    offset nul                     
	   00000A3E R
	   00000A3E R
	   00000A3E R
 00000AA8  0000082B R		           dd   offset variable, offset nul,     offset nul,    offset nul                     
	   00000A3E R
	   00000A3E R
	   00000A3E R
				                                                                                               
 00000AB8 00000818 R		lit        dd offset adup                                                                      
 00000ABC 00000000		mk         dd 0, 0, 0                                                                          
	   00000000
	   00000000
 00000AC8 00100000		H          dd 40000h*4 ; variable H , dictionary pointer HERE, where new definitions go                                                                     
 00000ACC 00000000		last       dd 0                                                                                
 00000AD0 00000000		class      dd 0                                                                                
 00000AD4 00000000		list       dd 0, 0                                                                             
	   00000000
 00000ADC 00000000		macros     dd 0                ; number of macros (?)                                                                
 00000AE0 00000000		forths     dd 0                ; number of forth words (?)


 00000AE4 F0000000		macro0 dd 170o shl 25 ; ;
 00000AE8  C19B1000		       dd ((140o shl 7+146o)shl 7+142o)shl 11 ; dup
 00000AEC  FF833620		       dd (((177o shl 7+140o)shl 7+146o)shl 7+142o)shl 4 ; ?dup
 00000AF0  C0278800		       dd (((140o shl 4+1)shl 4+3)shl 7+142o)shl 10 ; drop
 00000AF4  2C88C000		       dd (((2 shl 7+144o)shl 4+4)shl 4+6)shl 13 ; then
 00000AF8  C6957600		       dd ((((143o shl 4+4)shl 5+25o)shl 4+7)shl 4+6)shl 8 ; begin
 00000AFC  00000080 [		macro1 dd 128 dup (0)
	    00000000
	   ]
 00000CFC C6664000		forth0 dd (((143o shl 4+3)shl 4+3)shl 4+2)shl 13 ; boot
 00000D00  C7340000		       dd ((((143o shl 5) + 23o) shl 4) + 4o) shl 16 ; bye
				;       dd (((27o shl 4+5)shl 4+1)shl 5+21o)shl 14 ; warm
 00000D04  C4B9A080		       dd ((((142o shl 4+5)shl 7+146o)shl 5+20o)shl 4+4)shl 5 ; PAAUSE_
 00000D08  8AC84C00		       dd ((((21o shl 4+5)shl 5+22o)shl 4+1)shl 4+3)shl 10 ; MACRO
 00000D0C  B1896400		       dd ((((26o shl 4+3)shl 4+1)shl 4+2)shl 7+144o)shl 8 ; FORTH
 00000D10  90000000		       dd 22o shl 27 ; c
 00000D14  811E2000		       dd (((20o shl 4+2)shl 4+3)shl 7+142o)shl 12 ; stop
 00000D18  145C0000		       dd (((1 shl 4+4)shl 4+5)shl 7+140o)shl 13 ; read
 00000D1C  B8B92000		       dd ((((27o shl 4+1)shl 4+7)shl 4+2)shl 4+4)shl 11 ; write
 00000D20  69000000		       dd (6 shl 5+22o)shl 23 ; nc
 00000D24  91C62AC0		       dd (((((22o shl 4+3)shl 5+21o)shl 5+21o)shl 4+5)shl 4+6)shl 5; command
 00000D28  82274000		       dd (((20o shl 4+4)shl 4+4)shl 7+164o)shl 12 ; seek
 00000D2C  145C1300		       dd ((((1 shl 4+4)shl 4+5)shl 7+140o)shl 5+23o)shl 8 ; ready
 00000D30  59100000		       dd ((5 shl 5+22o)shl 4+2)shl 19 ; ACT
 00000D34  8643B800		       dd (((20o shl 7+144o)shl 4+3) shl 5+27o)shl 11 ; SHOW
 00000D38  A1AE0000		       dd (((24o shl 4+3)shl 4+5)shl 7+140o)shl 12 ; LOAD
 00000D3C  C8828000		       dd (((144o shl 4+4)shl 4+1)shl 4+4)shl 13 ; here
 00000D40  FF472000		       dd (((177o shl 5+24o)shl 4+7)shl 4+2)shl 12 ; ?lit
 00000D44  D7F80000		       dd (153o shl 7+176o) shl 18 ; 3,
 00000D48  D5F80000		       dd (152o shl 7+176o) shl 18 ; 2,
 00000D4C  D3F80000		       dd (151o shl 7+176o) shl 18 ; 1,
 00000D50  FC000000		       dd 176o shl 25 ; ,
 00000D54  A2420000		       dd (((24o shl 4+4)shl 5+20o)shl 5+20o)shl 13 ; less
 00000D58  E59A3880		       dd (((162o shl 7+146o)shl 5+21o)shl 7+142o)shl 6 ; jump
 00000D5C  59493110		       dd (((((5 shl 5+22o)shl 5+22o)shl 4+4)shl 7+142o)shl 4+2)shl 3 ; accept
 00000D60  C4B80000		       dd ((142o shl 4+5)shl 7+140o)shl 14 ; pad
 00000D64  41582000		       dd ((((4 shl 4+1)shl 4+5)shl 5+20o)shl 4+4)shl 11 ; erase
 00000D68  91E29800		       dd (((22o shl 4+3)shl 7+142o)shl 5+23o)shl 11 ; copy
 00000D6C  8A8F4000		       dd (((21o shl 4+5)shl 4+1)shl 7+164o)shl 12 ; mark
 00000D70  48E22000		       dd (((4 shl 5+21o)shl 7+142o)shl 4+2)shl 12 ; empt
 00000D74  48B90000		       dd (((4 shl 5+21o)shl 4+7)shl 4+2)shl 15 ; emit
 00000D78  C0F57200		       dd ((((140o shl 4+7)shl 5+25o)shl 4+7)shl 4+2)shl 8 ; digit
 00000D7C  D4917200		       dd ((((152o shl 4+4)shl 5+21o)shl 4+7)shl 4+2)shl 8 ; 2emit
 00000D80  EA000000		       dd 165o shl 25 ; .
 00000D84  C9D40000		       dd (144o shl 7+165o)shl 18 ; h.
 00000D88  C9D58000		       dd ((144o shl 7+165o)shl 4+6)shl 14 ; h.n
 00000D8C  90800000		       dd (22o shl 4+1)shl 23 ; CR
 00000D90  86259200		       dd ((((20o shl 7+142o)shl 4+5)shl 5+22o)shl 4+4)shl 7 ; space
 00000D94  C0776000		       dd (((140o shl 4+3)shl 5+27o)shl 4+6)shl 12 ; DOWN
 00000D98  4C0E4000		       dd (((4 shl 7+140o)shl 4+7)shl 4+2)shl 13 ; edit
 00000D9C  40000000		       dd 4 shl 28 ; E
 00000DA0  A4400000		       dd (24o shl 5+21o)shl 22 ; lm
 00000DA4  18800000		       dd (1 shl 5+21o)shl 23 ; rm
 00000DA8  A8AE2C80		       dd ((((25o shl 4+1)shl 4+5)shl 7+142o)shl 7+144o)shl 5 ; graphic
 00000DAC  24CA4000		       dd (((2 shl 4+4)shl 7+145o)shl 4+2)shl 13 ; text
 00000DB0  E893C660		       dd ((((164o shl 4+4)shl 5+23o)shl 7+143o)shl 4+3)shl 5 ; keyboard
 00000DB4  C098F300		       dd (((140o shl 4+4)shl 7+143o)shl 7+146o)shl 7 ; debug
 00000DB8  52000000		       dd (5 shl 4+2)shl 24 ; at
 00000DBC  F6A40000		       dd ((173o shl 4+5)shl 4+2)shl 17 ; +at
 00000DC0  CB300000		       dd (145o shl 5+23o)shl 20 ; xy
 00000DC4  B1E10000		       dd ((26o shl 4+3)shl 7+141o)shl 16 ; fov
 00000DC8  B3D8C000		       dd (((26o shl 4+7)shl 5+26o)shl 4+3)shl 14 ; fifo
 00000DCC  C6794000		       dd ((143o shl 4+3)shl 7+145o)shl 14 ; box
 00000DD0  A3B20000		       dd (((24o shl 4+7)shl 4+6)shl 4+4)shl 15 ; line
 00000DD4  91D0C400		       dd ((((22o shl 4+3)shl 5+24o)shl 4+3)shl 4+1)shl 10 ; color
 00000DD8  3912B100		       dd (((((3 shl 5+22o)shl 4+2)shl 4+5)shl 4+6)shl 4+2)shl 7 ; octant
 00000DDC  86200000		       dd (20o shl 7+142o)shl 20 ; sp
 00000DE0  A2C08000		       dd (((24o shl 4+5)shl 5+20o)shl 4+2)shl 14 ; last
 00000DE4  CCD89640		       dd (((((146o shl 4+6)shl 7+142o)shl 4+5)shl 5+22o))shl 5 ; unpack
 00000DE8  B4571000		       dd (((26o shl 5 + 21o) shl 4 + 5)shl 7+142o)shl 11 ; fmap
 00000DEC  B6668A80		       dd (((((26o shl 7 + 146o) shl 4 + 6o)shl 5 + 21o)shl 4 + 5o) shl 7) ; funmap
 00000DF0  791B6800		       dd (((((7o shl 5 + 22o) shl 4 + 3o) shl 4 + 6o) shl 7) + 150o) shl 8 ; icons0 791b6800h
 00000DF4  C7435C00		       dd ((((143o shl 5 + 24o) shl 4+3)shl 4+5)shl 7+140o)shl 5 ; bload
 00000DF8  C74E9A00		       dd (((143o shl 5 + 24o) shl 7 + 164o) shl 7 + 150o) shl 6 ; blk0
 00000DFC  CF741200		       dd 0cf741200h ; qwerty
 00000E00  C143C4C0		       dd 0c143c4c0h ; dlopn
 00000E04  C1478E20		       dd 0c1478e20h ; dlimp
 00000E08  C8000000				dd 0C8000000h ; h
 00000E0C  92E00000				dd  92E00000h  ; cad
 00000E10  C525C000				dd 0C525C000h ; pcad
 00000E14  72797400				dd  72797400h ;itick
 00000E18  C0F0C540				dd 0C0F0C540h ;display
 00000E1C  4E840000				dd  4E840000h ;ekt
 00000E20  C74E8000				dd 0C74E8000h  ;blk
 00000E24  96237620				dd  96237620h  ;cpoint
 00000E28  96618000				dd  96618000h  ;curs
 00000E2C  3B5A0840				dd  3B5A0840h  ;offset
 00000E30  B98E0000				dd 0B98E0000h  ;word
 00000E34  B98E0800				dd 0B98E0800h  ;words
				       
 00000E38  00000A00 [		forth1 dd 2560 dup (0)
	    00000000
	   ]
 00003638 00000999 R		macro2 dd offset semi
 0000363C  00000800 R		       dd offset cdup
 00003640  000007E5 R		       dd offset qdup
 00003644  000007CF R		       dd offset cdrop
 00003648  000009BD R		       dd offset then
 0000364C  000009D0 R		       dd offset begin
 00003650  00000080 [		       dd 128 dup (0)
	    00000000
	   ]
 00003850 000004B1 R		forth2 dd offset notimpl ; boot
 00003854  00000007 R		       dd offset bye     ; warm
 00003858  000005C8 R		       dd offset PAAUSE_
 0000385C  00000750 R		       dd offset MACRO_
 00003860  0000076B R		       dd offset FORTH
 00003864  00000631 R		       dd offset c_
 00003868  000004B1 R		       dd offset notimpl ; stop
 0000386C  000004B1 R		       dd offset notimpl ; readf
 00003870  000004B1 R		       dd offset notimpl ; writef
 00003874  0000426C R		       dd offset nc_
 00003878  000004B1 R		       dd offset notimpl ; cmdf
 0000387C  000004B1 R		       dd offset notimpl ; seekf
 00003880  000004B1 R		       dd offset notimpl ; readyf
 00003884  000005E5 R		       dd offset ACT
 00003888  0000060C R		       dd offset SHOW
 0000388C  00000A4C R		       dd offset LOAD
 00003890  000009D6 R		       dd offset here
 00003894  000009E1 R		       dd offset qlit
 00003898  00000992 R		       dd offset COMMA3
 0000389C  0000098B R		       dd offset COMMA2
 000038A0  00000984 R		       dd offset COMMA1
 000038A4  00000968 R		       dd offset COMMA
 000038A8  00000A28 R		       dd offset less
 000038AC  00000A3F R		       dd offset jump
 000038B0  00004A43 R		       dd offset ACCEPT
 000038B4  000054BC R		       dd offset pad
 000038B8  0000418C R		       dd offset erase
 000038BC  000041A8 R		       dd offset copy
 000038C0  00000637 R		       dd offset mark
 000038C4  0000065C R		       dd offset empty
 000038C8  00004401 R		       dd offset emit
 000038CC  00004CB7 R		       dd offset eDIG
 000038D0  00004443 R		       dd offset emit2
 000038D4  00004D28 R		       dd offset dot10
 000038D8  00004CE3 R		       dd offset hdot
 000038DC  00004CD1 R		       dd offset hdotn
 000038E0  00004619 R		       dd offset CR
 000038E4  00004438 R		       dd offset space
 000038E8  0000459F R		       dd offset DOWN
 000038EC  0000525A R		       dd offset edit
 000038F0  00005260 R		       dd offset E
 000038F4  00004633 R		       dd offset LMs
 000038F8  0000463A R		       dd offset RMs
 000038FC  0000437D R		       dd offset graphic
 00003900  00004480 R		       dd offset text1
 00003904  000046CC R		       dd offset keyboard
 00003908  000041F3 R		       dd offset debug
 0000390C  00004641 R		       dd offset at
 00003910  00004650 R		       dd offset pat
 00003914  0000427A R		       dd offset xy_
 00003918  00004288 R		       dd offset fov_
 0000391C  0000437C R		       dd offset fifof
 00003920  000044BC R		       dd offset box
 00003924  0000449E R		       dd offset line
 00003928  00004370 R		       dd offset color
 0000392C  00004661 R		       dd offset octant
 00003930  00004296 R		       dd offset sps
 00003934  000042A4 R		       dd offset last_
 00003938  00004D79 R		       dd offset unpack
 0000393C  000004BB R		       dd offset fmap
 00003940  000004D0 R		       dd offset funmap
 00003944  00000031 R		       dd offset icon0
 00003948  000004DC R		       dd offset bload 
 0000394C  0000003F R		       dd offset blk0
 00003950  0000489F R		       dd offset qwerty
 00003954  00000510 R		       dd offset dlopen
 00003958  00000517 R		       dd offset dlimp
 0000395C  000042B2 R			   dd offset h_
 00003960  000042C0 R			   dd offset cad_
 00003964  000042CE R			   dd offset pcad_
 00003968  00004248 R			dd offset itick_
 0000396C  000042DC R			dd offset display_
 00003970  000042EA R			dd offset ekt_
 00003974  000042F8 R			dd offset blk_
 00003978  00004306 R			dd offset cpoint_
 0000397C  00004314 R			dd offset curs_
 00003980  00004322 R			dd offset offset_
 00003984  000053D2 R			dd offset a_1word_
 00003988  00004330 R			dd offset wordsn_
 0000398C  00000200 [		       dd 512 dup (0)
	    00000000
	   ]

				COMMENT #
				boot: mov  AL, 0FEh ; Reset
				    out  64h, AL
				    jmp  $
				#

 0000418C			erase: 
 0000418C  8B C8		    mov    ecx, eax
 0000418E  C1 E1 08		    shl    ecx, 8
				    DROP
 00004191  AD		     1	    lodsd 
 00004192  57			    push   edi
 00004193  8B F8		    mov    edi, eax
 00004195  83 EF 12		    sub    edi, 18
 00004198  C1 E7 0A		    shl    edi, 2+8
 0000419B  03 3D 0000002D R	    add    edi, [blocks_adr]
 000041A1  33 C0		    xor    eax, eax
 000041A3  F3/ AB		    rep    stosd
 000041A5  5F			    pop    edi
				    DROP
 000041A6  AD		     1	    lodsd 
 000041A7  C3			    ret

 000041A8			copy: 
 000041A8  83 F8 0C		    cmp    eax, 12   
 000041AB  0F 82 FFFFC55B	    jc     ABORT1    
 000041B1  8B F8		    mov    edi, eax  
 000041B3  83 EF 12		    sub    edi, 18
 000041B6  C1 E7 0A		    shl    edi, 2+8  
 000041B9  56			    push   esi       
 000041BA  8B 35 00005094 R	    mov    esi, blk  
 000041C0  83 EE 12		    sub    esi, 18
 000041C3  C1 E6 0A		    shl    esi, 2+8  
 000041C6  B9 00000100		    mov    ecx, 256  
 000041CB  03 35 0000002D R	    add    esi, [blocks_adr]
 000041D1  03 3D 0000002D R	    add    edi, [blocks_adr]
 000041D7  F3/ A5		    rep    movsd     
 000041D9  5E			    pop    esi       
 000041DA  A3 00005094 R	    mov    blk, eax  
				    DROP
 000041DF  AD		     1	    lodsd 
 000041E0  C3			    ret
				    
				; move dwords
				; ( sa da n -- )    
 000041E1			move:
 000041E1  8B C8		    mov    ecx, eax
				    DROP
 000041E3  AD		     1	    lodsd 
 000041E4  8B F8		    mov    edi, eax
 000041E6  C1 E7 02		    shl    edi, 2
				    DROP
 000041E9  AD		     1	    lodsd 
 000041EA  8B F0		    mov    esi, eax
 000041EC  C1 E6 02		    shl    esi, 2
				    DROP
 000041EF  AD		     1	    lodsd 
 000041F0  F3/ A5		    rep    movsd
 000041F2  C3			    ret

 000041F3			debug: 
 000041F3  C7 05 00004258 R	    mov    xy, 3*10000h+(vc-2)*ih+3
	   000302B5
				    DUP_
 000041FD  8D 76 FC	     1	    lea    esi, [esi-4]
 00004200  89 06	     1	    mov    [esi], eax
 00004202  A1 000005B9 R	    mov    eax, God
 00004207  FF 30		    push   [eax]
 00004209  E8 00000AE9		    call   dot
				    DUP_
 0000420E  8D 76 FC	     1	    lea    esi, [esi-4]
 00004211  89 06	     1	    mov    [esi], eax
 00004213  58			    pop    eax
 00004214  E8 00000ADE		    call   dot
				    DUP_
 00004219  8D 76 FC	     1	    lea    esi, [esi-4]
 0000421C  89 06	     1	    mov    [esi], eax
 0000421E  A1 000005C2 R	    mov    eax, main
 00004223  E8 00000ACF		    call   dot
				    DUP_
 00004228  8D 76 FC	     1	    lea    esi, [esi-4]
 0000422B  89 06	     1	    mov    [esi], eax
 0000422D  8B C6		    mov    eax, esi
 0000422F  E9 00000AC3		    jmp    dot

 00004234			ffw:	
 00004234  8B 0D 00000AE0 R	    mov ecx, [forths]              
 0000423A  57			    push edi                                     
 0000423B  8D 3C 8D		    lea edi,dword ptr ds:[ecx*4+forth0-4]        
	   00000CF8 R
 00004242  FD			    std                                          
 00004243  F2/ AF		    repne scasd                                  
 00004245  FC			    cld                                          
 00004246  5F			    pop edi                                      
 00004247  C3			    ret                                          

 00004248			itick_:
 00004248  83 E0 F0		    and eax, 0FFFFFFF0h  
 0000424B  E8 FFFFFFE4		    call ffw;
 00004250  8B 04 8D		    mov eax, [ecx*4+forth2]
	   00003850 R
 00004257  C3			    ret
 = 00000016			iw         equ 16+6 ; 22 
 = 0000001E			ih         equ 24+6 ; 30
 = 0000002E			hc         equ hp/iw ; 46 =1024/22 reminder 12    
 = 00000019			vc         equ vp/ih ; 25 =768/30 reminder 18 
				;			hp     equ 1024    ; horizontal size
				; 			vp     equ 768     ; vertical size

				ALIGN 4
 00004258 00030003		xy         dd 3*10000h+3 ; current x,y coordinate, x in high 16 bits
 0000425C 00000003		lm         dd 3
 00004260 000003F4		rm         dd hc*iw ; 1012
 00004264 00000000		xycr       dd 0
 00004268 00004B00		fov        dd 10*(2*vp+vp/2)

 0000426C			nc_: 
				    DUP_
 0000426C  8D 76 FC	     1	    lea    esi, [esi-4]
 0000426F  89 06	     1	    mov    [esi], eax
 00004271  B8 000005A8 R	    mov    eax, (offset nc)
 00004276  C1 E8 02		    shr    eax, 2
 00004279  C3			    ret

 0000427A			xy_: 
				    DUP_
 0000427A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000427D  89 06	     1	    mov    [esi], eax
 0000427F  B8 00004258 R	    mov    eax, (offset xy)
 00004284  C1 E8 02		    shr    eax, 2
 00004287  C3			    ret

 00004288			fov_: 
				    DUP_
 00004288  8D 76 FC	     1	    lea    esi, [esi-4]
 0000428B  89 06	     1	    mov    [esi], eax
 0000428D  B8 00004268 R	    mov    eax, (offset fov)
 00004292  C1 E8 02		    shr    eax, 2
 00004295  C3			    ret

 00004296			sps: DUP_
 00004296  8D 76 FC	     1	    lea    esi, [esi-4]
 00004299  89 06	     1	    mov    [esi], eax
 0000429B  B8 00000A78 R	    mov    eax, (offset spaces)
 000042A0  C1 E8 02		    shr    eax, 2
 000042A3  C3			    ret

 000042A4			last_: DUP_
 000042A4  8D 76 FC	     1	    lea    esi, [esi-4]
 000042A7  89 06	     1	    mov    [esi], eax
 000042A9  B8 00000ACC R	    mov    eax, (offset last)
 000042AE  C1 E8 02		    shr    eax, 2
 000042B1  C3			    ret

 000042B2			h_: DUP_
 000042B2  8D 76 FC	     1	    lea    esi, [esi-4]
 000042B5  89 06	     1	    mov    [esi], eax
 000042B7  B8 00000AC8 R	    mov    eax, (offset h)
 000042BC  C1 E8 02		    shr    eax, 2
 000042BF  C3			    ret

 000042C0			cad_: DUP_
 000042C0  8D 76 FC	     1	    lea    esi, [esi-4]
 000042C3  89 06	     1	    mov    [esi], eax
 000042C5  B8 000050A4 R	    mov    eax, (offset cad)
 000042CA  C1 E8 02		    shr    eax, 2
 000042CD  C3			    ret

 000042CE			pcad_: DUP_
 000042CE  8D 76 FC	     1	    lea    esi, [esi-4]
 000042D1  89 06	     1	    mov    [esi], eax
 000042D3  B8 000050A8 R	    mov    eax, (offset pcad)
 000042D8  C1 E8 02		    shr    eax, 2
 000042DB  C3			    ret

 000042DC			display_: DUP_
 000042DC  8D 76 FC	     1	    lea    esi, [esi-4]
 000042DF  89 06	     1	    mov    [esi], eax
 000042E1  B8 0000502C R	    mov    eax, (offset display)
 000042E6  C1 E8 02		    shr    eax, 2
 000042E9  C3			    ret

 000042EA			ekt_: DUP_
 000042EA  8D 76 FC	     1	    lea    esi, [esi-4]
 000042ED  89 06	     1	    mov    [esi], eax
 000042EF  B8 000050B8 R	    mov    eax, (offset ekeys)
 000042F4  C1 E8 02		    shr    eax, 2
 000042F7  C3			    ret

 000042F8			blk_: DUP_
 000042F8  8D 76 FC	     1	    lea    esi, [esi-4]
 000042FB  89 06	     1	    mov    [esi], eax
 000042FD  B8 00005094 R	    mov    eax, (offset blk)
 00004302  C1 E8 02		    shr    eax, 2
 00004305  C3			    ret

 00004306			cpoint_: DUP_
 00004306  8D 76 FC	     1	    lea    esi, [esi-4]
 00004309  89 06	     1	    mov    [esi], eax
 0000430B  B8 000050B0 R	    mov    eax, (offset cpoint)
 00004310  C1 E8 02		    shr    eax, 2
 00004313  C3			    ret

 00004314			curs_: DUP_
 00004314  8D 76 FC	     1	    lea    esi, [esi-4]
 00004317  89 06	     1	    mov    [esi], eax
 00004319  B8 000050A0 R	    mov    eax, (offset curs)
 0000431E  C1 E8 02		    shr    eax, 2
 00004321  C3			    ret

 00004322			offset_: DUP_
 00004322  8D 76 FC	     1	    lea    esi, [esi-4]
 00004325  89 06	     1	    mov    [esi], eax
 00004327  B8 0000509C R	    mov    eax, (offset offvadr)
 0000432C  C1 E8 02		    shr    eax, 2
 0000432F  C3			    ret
					
 00004330			wordsn_: DUP_
 00004330  8D 76 FC	     1	    lea    esi, [esi-4]
 00004333  89 06	     1	    mov    [esi], eax
 00004335  B8 00004A3C R	    mov    eax, (offset words)
 0000433A  C1 E8 02		    shr    eax, 2
 0000433D  C3			    ret
					
				COMMENT #
				nblk_: DUP_
				    mov eax,[ecx*4+forth0+4]
				    ret
				#

				;; BEGIN gen.asm
				;Generic graphics

				ALIGN 4
 00004340 01E80000		frame      dd 2000000h-hp*vp*2 ; 32 M
				;;!displ      dd 0f0000000h ; fujitsu
 00004344 0000F7DE		fore       dd 0f7deh ; foreground
 00004348 00000000		xc         dd 0
 0000434C 00000000		yc         dd 0

 00004350			rgb: 
 00004350  C1 C8 08		    ror    eax, 8
 00004353  66| C1 E8 02		    shr    AX, 2
 00004357  C1 C8 06		    ror    eax, 6
 0000435A  C0 E8 03		    shr    AL, 3
 0000435D  C1 C0 0B		    rol    eax, 6+5
 00004360  25 0000F7DE		    and    eax, 0f7deh
 00004365  C3			    ret

 00004366			white: 
				    DUP_
 00004366  8D 76 FC	     1	    lea    esi, [esi-4]
 00004369  89 06	     1	    mov    [esi], eax
 0000436B  B8 00FFFFFF		    mov    eax, 0ffffffh
 00004370			color: 
 00004370  E8 FFFFFFDB		    call   rgb
 00004375  A3 00004344 R	    mov    fore, eax
				    DROP
 0000437A  AD		     1	    lodsd 
 0000437B  C3			    ret

				COMMENT #
				north: 
				    mov  edx, 0cf8h
				    out  DX, eax
				    add  edx, 4
				    in   eax, DX
				    ret
				dev: mov  eax, 80001008h ; Find display, start at device 2
				    mov  ecx, 31-1 ; end with AGP: 10008, bus 1, dev 0
				@@:     DUP_
				        call north
				        and  eax, 0ff000000h
				        cmp  eax, 3000000h
				        DROP
				        jz   @f
				        add  eax, 800h
				        next @b
				@@: ret

				ati0: call dev
				    or   dword ptr [eax-4], 2 ; Enable memory
				    add  AL, 24h-8 ; look for prefetch
				    mov  CL, 5
				@@:     DUP_
				        call north
				        xor  AL, 8
				        jz   @f
				        DROP
				        sub  eax, 4
				        next @b
				    DUP_
				    call north
				    and  eax, 0fffffff0h
				@@: mov  displ, eax
				    DROP
				    ret

				#    

 0000437C			fifof: 
				    DROP
 0000437C  AD		     1	    lodsd 
 0000437D			graphic: 
 0000437D  C3			    ret

 0000437E			switch:
 0000437E  E8 FFFFC0C8		    call   draw_display
 00004383  E9 FFFFC240		    jmp    PAAUSE_

 00004388			clip: 
 00004388  8B 3D 00004258 R	    mov    edi, xy
 0000438E  8B CF		    mov    ecx, edi
 00004390  66| 85 C9		    test   CX, CX
 00004393  79 02		    jns    @f
 00004395  33 C9		    xor    ecx, ecx
 00004397  81 E1 0000FFFF	@@: and    ecx, 0ffffh
 0000439D  89 0D 0000434C R	    mov    yc, ecx
 000043A3  69 C9 00000800	    imul   ecx, hp*2
 000043A9  C1 FF 10		    sar    edi, 16
 000043AC  79 02		    jns    @f
 000043AE  33 FF		    xor    edi, edi
 000043B0  89 3D 00004348 R	@@: mov    xc, edi
 000043B6  8D 3C 79		    lea    edi, [edi*2+ecx]
 000043B9  03 3D 00004340 R	    add    edi, frame
 000043BF  C3			    ret

 000043C0			bit16: 
 000043C0  66| AD		    lodsw
 000043C2  86 C4		    xchg   AL, AH
 000043C4  B9 00000010		    mov    ecx, 16
 000043C9			b16: 
 000043C9  66| D1 E0		    shl    AX, 1
 000043CC  73 03		    jnc    @f
 000043CE  66| 89 17		    mov    [edi], DX
 000043D1  83 C7 02		@@: add    edi, 2
				    next   b16
 000043D4  49		     1	    dec    ecx
 000043D5  75 F2	     1	    jnz    b16
 000043D7  C3			    ret

 000043D8			bit32: 
 000043D8  66| AD		    lodsw
 000043DA  86 C4		    xchg   AL, AH
 000043DC  B9 00000010		    mov    ecx, 16
 000043E1			b32: 
 000043E1  D1 E0		    shl    eax, 1
 000043E3  73 15		    jnc    @f
 000043E5  66| 89 17		    mov    [edi], DX
 000043E8  66| 89 57 02		    mov    [edi+2], DX
 000043EC  66| 89 97		    mov    [edi+hp*2], DX
	   00000800
 000043F3  66| 89 97		    mov    [edi+hp*2+2], DX
	   00000802
 000043FA  83 C7 04		@@: add    edi, 4
				    next   b32
 000043FD  49		     1	    dec    ecx
 000043FE  75 E1	     1	    jnz    b32
 00004400  C3			    ret

 00004401			emit: 
 00004401  E8 00000203		    call   qcr
 00004406  56			    push   esi
 00004407  57			    push   edi
 00004408  52			    push   edx
 00004409  6B C0 30		    imul   eax, 16*24/8
 0000440C  8B 35 00000029 R	    mov    esi, [icons_adr]
 00004412  03 F0		    add    esi, eax
				;;!    lea    esi, icons[eax]
 00004414  E8 FFFFFF6F		    call   clip
 00004419  8B 15 00004344 R	    mov    edx, fore
 0000441F  B9 00000018		    mov    ecx, 24
 00004424			@@:     
 00004424  51			    push   ecx
 00004425  E8 FFFFFF96		    call   bit16
 0000442A  81 C7 000007E0	    add    edi, (hp-16)*2
 00004430  59			    pop    ecx
				    next   @b
 00004431  49		     1	    dec    ecx
 00004432  75 F0	     1	    jnz    @b
 00004434  5A			    pop    edx
 00004435  5F			    pop    edi
 00004436  5E			    pop    esi
 00004437			BL_: 
				    DROP
 00004437  AD		     1	    lodsd 
 00004438			SPACE: 
 00004438  81 05 00004258 R	    add    xy, iw*10000h
	   00160000
 00004442  C3			    ret

 00004443			emit2: 
 00004443  56			    push   esi
 00004444  57			    push   edi
 00004445  52			    push   edx
 00004446  6B C0 30		    imul   eax, 16*24/8
 00004449  8B 35 00000029 R	    mov    esi, [icons_adr]
 0000444F  03 F0		    add    esi, eax
				;;!    lea    esi, 4icons[eax]
 00004451  E8 FFFFFF32		    call   clip
 00004456  8B 15 00004344 R	    mov    edx, fore
 0000445C  B9 00000018		    mov    ecx, 24
 00004461  51			@@: push   ecx
 00004462  E8 FFFFFF71		    call   bit32
 00004467  81 C7 00000FC0	    add    edi, (2*hp-16*2)*2
 0000446D  59			    pop    ecx
				    next   @b
 0000446E  49		     1	    dec    ecx
 0000446F  75 F0	     1	    jnz    @b
 00004471  5A			    pop    edx
 00004472  5F			    pop    edi
 00004473  5E			    pop    esi
 00004474  81 05 00004258 R	    add    xy, iw*10000h*2
	   002C0000
				    DROP
 0000447E  AD		     1	    lodsd 
 0000447F  C3			    ret

 00004480			text1: 
 00004480  E8 FFFFFEE1		    call   WHITE
 00004485  C7 05 0000425C R	    mov    lm, 3
	   00000003
 0000448F  C7 05 00004260 R	    mov    rm, hc*iw
	   000003F4
 00004499  E9 00000152		    jmp    TOP

 0000449E			line: 
 0000449E  E8 FFFFFEE5		    call   clip
 000044A3  8B 0E		    mov    ecx, [esi]
 000044A5  D1 E1		    shl    ecx, 1
 000044A7  2B F9		    sub    edi, ecx
 000044A9  8B C8		    mov    ecx, eax
 000044AB  A1 00004344 R	    mov    eax, fore
 000044B0  F3/ 66| AB		    rep    stosw
 000044B3  FF 05 00004258 R	    inc    xy
				    DROP
 000044B9  AD		     1	    lodsd 
				    DROP
 000044BA  AD		     1	    lodsd 
 000044BB  C3			    ret

 000044BC			box: 
 000044BC  E8 FFFFFEC7		    call   clip
 000044C1  3D 00000301		    cmp    eax, vp+1
 000044C6  78 05		    js     @f
 000044C8  B8 00000300		    mov    eax, vp
 000044CD  8B C8		@@: mov    ecx, eax
 000044CF  2B 0D 0000434C R	    sub    ecx, yc
 000044D5  7E 31		    jng    no
 000044D7  81 3E 00000401	    cmp    dword ptr [esi], hp+1
 000044DD  78 06		    js     @f
 000044DF  C7 06 00000400	    mov    dword ptr [esi], hp
 000044E5  A1 00004348 R	@@: mov    eax, xc
 000044EA  29 06		    sub    [esi], eax
 000044EC  7E 1A		    jng    no
 000044EE  BA 00000400		    mov    edx, hp
 000044F3  2B 16		    sub    edx, [esi]
 000044F5  D1 E2		    shl    edx, 1
 000044F7  A1 00004344 R	    mov    eax, fore
 000044FC  51			@@: push   ecx
 000044FD  8B 0E		    mov    ecx, [esi]
 000044FF  F3/ 66| AB		    rep    stosw
 00004502  03 FA		    add    edi, edx
 00004504  59			    pop    ecx
				    next   @b
 00004505  49		     1	    dec    ecx
 00004506  75 F4	     1	    jnz    @b
 00004508			no: DROP
 00004508  AD		     1	    lodsd 
				    DROP
 00004509  AD		     1	    lodsd 
 0000450A  C3			    ret

				;; END gen.asm

 = 00FFFF00			yellow     equ 0ffff00h
 0000450B			CYAN: 
				    DUP_
 0000450B  8D 76 FC	     1	    lea    esi, [esi-4]
 0000450E  89 06	     1	    mov    [esi], eax
 00004510  B8 0000FFFF		    mov    eax, 0ffffh
 00004515  E9 FFFFFE56		    jmp    color
 0000451A			MAGENTA: 
				    DUP_
 0000451A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000451D  89 06	     1	    mov    [esi], eax
 0000451F  B8 00FF00FF		    mov    eax, 0ff00ffh
 00004524  E9 FFFFFE47		    jmp    color
 00004529			SILVER:    
				    DUP_
 00004529  8D 76 FC	     1	    lea    esi, [esi-4]
 0000452C  89 06	     1	    mov    [esi], eax
 0000452E  B8 00C0C0C0		    mov    eax, 0c0c0c0h
 00004533  E9 FFFFFE38		    jmp    color
 00004538			BLUE: 
				    DUP_
 00004538  8D 76 FC	     1	    lea    esi, [esi-4]
 0000453B  89 06	     1	    mov    [esi], eax
 0000453D  B8 004040FF		    mov    eax, 4040ffh
 00004542  E9 FFFFFE29		    jmp    color
 00004547			RED: 
				    DUP_
 00004547  8D 76 FC	     1	    lea    esi, [esi-4]
 0000454A  89 06	     1	    mov    [esi], eax
 0000454C  B8 00FF0000		    mov    eax, 0ff0000h
 00004551  E9 FFFFFE1A		    jmp    color
 00004556			GREEN: 
				    DUP_
 00004556  8D 76 FC	     1	    lea    esi, [esi-4]
 00004559  89 06	     1	    mov    [esi], eax
 0000455B  B8 8000FF00		    mov    eax, 8000ff00h
 00004560  E9 FFFFFE0B		    jmp    color

 00004565  0000000B [		history    db 11 dup (0)
	    00
	   ]

 00004570			ECHO_: 
 00004570  56			    push   esi
 00004571  B9 0000000A		    mov    ecx, 11-1
 00004576  8D 3D 00004565 R	    lea    edi, history
 0000457C  8D 77 01		    lea    esi, [1+edi]
 0000457F  F3/ A4		    rep    movsb
 00004581  5E			    pop    esi
 00004582  A2 0000456F R	    mov    history+11-1, AL
				    DROP
 00004587  AD		     1	    lodsd 
 00004588  C3			    ret

 00004589			RIGHT: 
				    DUP_
 00004589  8D 76 FC	     1	    lea    esi, [esi-4]
 0000458C  89 06	     1	    mov    [esi], eax
 0000458E  B9 0000000B		    mov    ecx, 11
 00004593  8D 3D 00004565 R	    lea    edi, history
 00004599  33 C0		    xor    eax, eax
 0000459B  F3/ AA		    rep    stosb
				    DROP
 0000459D  AD		     1	    lodsd 
 0000459E  C3			    ret

 0000459F			DOWN: 
				    DUP_
 0000459F  8D 76 FC	     1	    lea    esi, [esi-4]
 000045A2  89 06	     1	    mov    [esi], eax
 000045A4  33 D2		    xor    edx, edx
 000045A6  B9 0000001E		    mov    ecx, ih
 000045AB  F7 F1		    div    ecx
 000045AD  8B C2		    mov    eax, edx
 000045AF  81 C2 00037FE5	    add    edx, 3*10000h+8000h-ih+3
 000045B5  89 15 00004258 R	    mov    xy, edx
 000045BB			ZERO:
 000045BB  85 C0		    test   eax, eax
 000045BD  B8 00000000		    mov    eax, 0
 000045C2  75 01		    jnz    @f
 000045C4  40			    inc    eax
 000045C5  C3			@@: ret

 000045C6			blank: 
				    DUP_
 000045C6  8D 76 FC	     1	    lea    esi, [esi-4]
 000045C9  89 06	     1	    mov    [esi], eax
 000045CB  33 C0		    xor    eax, eax
 000045CD  A3 00004258 R	    mov    xy, eax
 000045D2  E8 FFFFFD99		    call   color
				    DUP_
 000045D7  8D 76 FC	     1	    lea    esi, [esi-4]
 000045DA  89 06	     1	    mov    [esi], eax
 000045DC  B8 00000400		    mov    eax, hp
				    DUP_
 000045E1  8D 76 FC	     1	    lea    esi, [esi-4]
 000045E4  89 06	     1	    mov    [esi], eax
 000045E6  B8 00000300		    mov    eax, vp
 000045EB  E9 FFFFFECC		    jmp    box

 000045F0			TOP: 
 000045F0  8B 0D 0000425C R	    mov    ecx, lm
 000045F6  C1 E1 10		    shl    ecx, 16
 000045F9  83 C1 03		    add    ecx, 3
 000045FC  89 0D 00004258 R	    mov    xy, ecx
 00004602  89 0D 00004264 R	    mov    xycr, ecx
 00004608  C3			    ret

 00004609			qcr: 
 00004609  66| 8B 0D		    mov    CX, word ptr xy+2 ; cy 
	   0000425A R
 00004610  66| 3B 0D		    cmp    CX, word ptr rm ; is at the end of line(rm)
	   00004260 R
 00004617  78 19		    js     @f
 00004619			cr: 
 00004619  8B 0D 0000425C R	    mov    ecx, lm
 0000461F  C1 E1 10		    shl    ecx, 16
 00004622  66| 8B 0D		    mov    CX, word ptr xy
	   00004258 R
 00004629  83 C1 1E		    add    ecx, ih
 0000462C  89 0D 00004258 R	    mov    xy, ecx
 00004632  C3			@@: ret

 00004633			LMs: 
 00004633  A3 0000425C R	    mov    lm, eax
				    DROP
 00004638  AD		     1	    lodsd 
 00004639  C3			    ret

 0000463A			RMs: 
 0000463A  A3 00004260 R	    mov    rm, eax
				    DROP
 0000463F  AD		     1	    lodsd 
 00004640  C3			    ret

 00004641			at: 
 00004641  66| A3		    mov    word ptr xy, AX  ; cy coordonate
	   00004258 R
				    DROP
 00004647  AD		     1	    lodsd 
 00004648  66| A3		    mov    word ptr xy+2, AX ; cx
	   0000425A R
				    DROP
 0000464E  AD		     1	    lodsd 
 0000464F  C3			    ret

 00004650			pAT: 
 00004650  66| 01 05		    add    word ptr xy, AX  ; add ax to cy
	   00004258 R
				    DROP
 00004657  AD		     1	    lodsd 
 00004658  66| 01 05		    add    word ptr xy+2, AX ; add ax  to cx
	   0000425A R
				    DROP
 0000465F  AD		     1	    lodsd 
 00004660  C3			    ret

 00004661			octant: 
				    DUP_
 00004661  8D 76 FC	     1	    lea    esi, [esi-4]
 00004664  89 06	     1	    mov    [esi], eax
 00004666  B8 00000043		    mov    eax, 43h ; poly -last y+ x+ ;23h ; last y+ x+
 0000466B  8B 56 04		    mov    edx, [4+esi]
 0000466E  85 D2		    test   edx, edx
 00004670  79 07		    jns    @f
 00004672  F7 DA		    neg    edx
 00004674  89 56 04		    mov    [4+esi], edx
 00004677  34 01		    xor    AL, 1
 00004679  3B 16		@@: cmp    edx, [esi]
 0000467B  79 02		    jns    @f
 0000467D  34 04		    xor    AL, 4
 0000467F  C3			@@: ret

				; Keyboard

 00004680			EIGHT: 
 00004680  83 C7 0C		    add    edi, 12
 00004683  E8 00000008		    call   FOUR
 00004688  E8 FFFFFDAB		    call   SPACE
 0000468D  83 EF 10		    sub    edi, 16
 00004690			FOUR: 
 00004690  B9 00000004		    mov    ecx, 4
 00004695			FOUR1:  
 00004695  51			    push   ecx
				    DUP_
 00004696  8D 76 FC	     1	    lea    esi, [esi-4]
 00004699  89 06	     1	    mov    [esi], eax
 0000469B  33 C0		    xor    eax, eax
 0000469D  8A 47 04		    mov    AL, [4+edi]
 000046A0  47			    inc    edi
 000046A1  E8 FFFFFD5B		    call   EMIT
 000046A6  59			    pop    ecx
				    next   FOUR1
 000046A7  49		     1	    dec    ecx
 000046A8  75 EB	     1	    jnz    FOUR1
 000046AA  C3			    ret

 000046AB			stack: 
 000046AB  BF 00003A94 R	    mov    edi, Godd-4
 000046B0  8B 15 000005B9 R	@@: mov    edx, God
 000046B6  39 3A		    cmp    [edx], edi
 000046B8  73 11		    jnc    @f
				    DUP_
 000046BA  8D 76 FC	     1	    lea    esi, [esi-4]
 000046BD  89 06	     1	    mov    [esi], eax
 000046BF  8B 07		    mov    eax, [edi]
 000046C1  83 EF 04		    sub    edi, 4
 000046C4  E8 00000656		    call   qDOT
 000046C9  EB E5		    jmp    @b
 000046CB  C3			@@: ret

 000046CC			KEYBOARD: 
 000046CC  E8 FFFFFDAF		    call   text1
 000046D1  8B 3D 00004A1C R	    mov    edi, [board]
				    DUP_
 000046D7  8D 76 FC	     1	    lea    esi, [esi-4]
 000046DA  89 06	     1	    mov    [esi], eax
 000046DC  A1 00004A2C R	    mov    eax, [keyc]
 000046E1  E8 FFFFFC8A		    call   color
 000046E6  C7 05 00004260 R	    mov    [rm], hc*iw
	   000003F4
 000046F0  C7 05 0000425C R	    mov    [lm], hp-9*iw+3
	   0000033D
 000046FA  C7 05 00004258 R	    mov    [xy], (hp-9*iw+3)*10000h+vp-4*ih+3
	   033D028B
 00004704  E8 FFFFFF77		    call   EIGHT
 00004709  E8 FFFFFF72		    call   EIGHT
 0000470E  E8 FFFFFF6D		    call   EIGHT
 00004713  E8 FFFFFF01		    call   CR
 00004718  81 05 00004258 R	    add    [xy], 4*iw*10000h
	   00580000
 00004722  8B 3D 00004A20 R	    mov    edi, [shift]
 00004728  83 C7 0C		    add    edi, 4*4-4
 0000472B  B9 00000003		    mov    ecx, 3
 00004730  E8 FFFFFF60		    call   FOUR1
 00004735  C7 05 0000425C R	    mov    [lm], 3
	   00000003
 0000473F  66| C7 05		    mov    word ptr [xy+2], 3
	   0000425A R
	   0003
 00004748  E8 FFFFFF5E		    call   stack
 0000474D  66| C7 05		    mov    word ptr [xy+2], hp-(11+9)*iw+3
	   0000425A R
	   024B
 00004756  8D 3D 00004561 R	    lea    edi, [history-4]
 0000475C  B9 0000000B		    mov    ecx, 11
 00004761  E9 FFFFFF2F		    jmp    FOUR1

 00004766 0D 0A 01 0C		alpha      db 15o, 12o,  1 , 14o
 0000476A  14 02 06 08		           db 24o,  2 ,  6 , 10o
 0000476E  13 09 0F 11		           db 23o, 11o, 17o, 21o
 00004772  12 0B 0E 07		           db 22o, 13o, 16o,  7
 00004776  05 03 04 16		           db  5 ,  3 ,  4 , 26o
 0000477A  17 24 15 10		           db 27o, 44o, 25o, 20o
				           
 0000477E 19 1A 1B 00		graphics   db 31o, 32o, 33o,  0 
 00004782  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 00004786  1F 20 21 2F		           db 37o, 40o, 41o, 57o
 0000478A  29 28 2A 2C		           db 51o, 50o, 52o, 54o ; : ; ! @
 0000478E  26 22 25 2E		           db 46o, 42o, 45o, 56o ; Z J . ,
 00004792  2D 27 2B 23		           db 55o, 47o, 53o, 43o ; * / + -
				           
 00004796 19 1A 1B 00		numbers    db 31o, 32o, 33o,  0
 0000479A  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 0000479E  1F 20 21 00		           db 37o, 40o, 41o,  0
 000047A2  00 00 00 00		           db  0,   0 ,  0 ,  0
 000047A6  00 00 00 00		           db  0,   0 ,  0 ,  0
 000047AA  00 00 00 00		           db  0,   0 ,  0 ,  0
				           
 000047AE 19 1A 1B 00		octals     db 31o, 32o, 33o,  0
 000047B2  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 000047B6  1F 20 21 00		           db 37o, 40o, 41o,  0
 000047BA  00 05 13 0A		           db  0 ,  5 , 23o, 12o
 000047BE  00 10 04 0E		           db  0 , 20o,  4 , 16o
 000047C2  00 00 00 00		           db  0 ,  0 ,  0 ,  0

 000047C6			LETTER: 
 000047C6  8B 15 00004A1C R	    mov    edx, [board]
 000047CC  F6 05 0000485F R	    test   byte ptr [isqwerty], 0ffh
	   FF
 000047D3  75 09		    jnz    QWLETTER
 000047D5			CMLETTER:    
 000047D5  3C 04		    cmp    AL, 4
 000047D7  79 01		    jns     @f
 000047D9  C3			    ret
 000047DA			@@: 
 000047DA  8A 04 10		    mov    AL, [edx][eax]
 000047DD  C3			    ret

 000047DE			QWLETTER:
 000047DE  81 FA 00004762 R	    cmp    edx, offset alpha - 4
 000047E4  74 1F		    je     @f
 000047E6  81 FA 0000477A R	    cmp    edx, offset graphics - 4
 000047EC  74 17		    je     @f
 000047EE  81 FA 00004792 R	    cmp    edx, offset numbers - 4
 000047F4  74 0F		    je     @f
 000047F6  81 FA 000047AA R	    cmp    edx, offset octals - 4
 000047FC  74 07		    je     @f
 000047FE  E8 00000040		    call   QWADJUST
 00004803  EB D0		    jmp    CMLETTER

 00004805			@@: 
 00004805  3C 3A		    cmp    al, 72o
 00004807  78 04		    js     @f
 00004809  2C 3A		    sub    al, 72o
 0000480B  EB 20		    jmp    QWDECODE
 0000480D			@@: 
 0000480D  3C 04		    cmp    al, 4
 0000480F  8A C8		    mov        cl, al
 00004811  78 25		    js     @f
 00004813  B1 01		    mov    cl, 1
 00004815  3C 01		    cmp    al, 1  ; esc
 00004817  74 1F		    je     @f
 00004819  3C 0E		    cmp    al, 14 ; bksp
 0000481B  74 1B		    je     @f
 0000481D  FE C1		    inc    cl
 0000481F  3C 39		    cmp    al, 57 ; space
 00004821  74 15		    je     @f
 00004823  FE C1		    inc    cl
 00004825  3C 1C		    cmp    al, 28 ; enter
 00004827  74 0F		    je     @f
 00004829  3C 38		    cmp    al, 56 ; alt
 0000482B  74 0B		    je     @f

 0000482D			QWDECODE:
 0000482D  BA 00004860 R	    mov    edx, offset qwkeys
 00004832  8A 04 10		    mov    AL, [edx][eax]
 00004835  84 C0		    test   AL, AL
 00004837  C3			    ret

 00004838  8A C1		@@: mov    al, cl
 0000483A  3C 04		    cmp    al, 4
 0000483C  C3			    ret 

				    
 0000483D  B8 00000000		@@: mov    eax, 0
 00004842  C3			    ret
 00004843			QWADJUST:
 00004843  F6 05 0000485F R	    test   byte ptr [isqwerty], 0ffh
	   FF
 0000484A  74 12		    jz     @f
 0000484C  3C 04		    cmp    AL, 4
 0000484E  78 0E		    js     @f
 00004850  3C 10		    cmp    AL, 20o
 00004852  78 E9		    js     @b
 00004854  3C 3A		    cmp    AL, 72o
 00004856  79 E5		    jns    @b
 00004858  8A 80 00004896 R	    mov    AL, [keys-20o+eax]    
 0000485E  C3			@@: ret

 0000485F 00			isqwerty   db   0

 00004860 00 01			qwkeys     db   0,   1
 00004862  19 1A 1B 1C 1D	           db 31o, 32o, 33o, 34o, 35o, 36o, 37o, 40o, 41o, 30o, 43o, 53o,   1 ; 14
	   1E 1F 20 21 18
	   23 2B 01
 0000486F  00 17 0F 04 01	           db   0, 27o, 17o,  4o,  1o,  2o, 13o, 26o,  7o,  3o, 22o, 52o, 54o,   3      ; 28
	   02 0B 16 07 03
	   12 2A 2C 03
 0000487D  00 05 08 10 0E	           db   0,  5o, 10o, 20o, 16o, 15o, 24o, 42o, 44o, 14o, 51o, 50o, 57o,   0      ; 42
	   0D 14 22 24 0C
	   29 28 2F 00
 0000488B  2D 26 15 0A 11	           db 55o, 46o, 25o, 12o, 21o, 23o,  6o, 11o, 56o, 45o, 47o,   0,   0,   0,   3 ; 56
	   13 06 09 2E 25
	   27 00 00 00 03
 0000489A  02 00 01 02 03	           db   2,   0,   1,   2,   3

 0000489F			qwerty: ; ( isqwerty -- )
 0000489F  A2 0000485F R	    mov    byte ptr [isqwerty], al
				    DROP
 000048A4  AD		     1	    lodsd 
 000048A5  C3			    ret   

 000048A6 10 11 12 13 00	keys       db 16, 17, 18, 19,  0,  0,  4,  5 ; 20
	   00 04 05
 000048AE  06 07 00 00 03	           db  6,  7,  0,  0,  3,  3, 20, 21
	   03 14 15
 000048B6  16 17 00 00 08	           db 22, 23,  0,  0,  8,  9, 10, 11 ; 40
	   09 0A 0B
 000048BE  00 00 00 00 18	           db  0,  0,  0,  0, 24, 25, 26, 27
	   19 1A 1B
 000048C6  00 01 0C 0D 0E	           db  0,  1, 12, 13, 14, 15,  0,  0 ; 60 N
	   0F 00 00
 000048CE  03 02		           db  3,  2 ; alt space
				    
 000048D0			wkey:
				    DUP_
 000048D0  8D 76 FC	     1	    lea    esi, [esi-4]
 000048D3  89 06	     1	    mov    [esi], eax
 000048D5  33 C0		    xor    eax, eax
 000048D7  E8 FFFFBCEC		    call   PAAUSE_
 000048DC  56			    push   esi
 000048DD  57			    push   edi
				    
 000048DE  6A 00		    push   0
 000048E0  6A 00		    push   0
 000048E2  FF 35 00000142 R	    push   [hwndmain]
 000048E8  E8 00000000 E	    call   InvalidateRect
 000048ED  FF 35 00000142 R	    push   [hwndmain]
 000048F3  E8 00000000 E	    call   UpdateWindow
				    
 000048F8			wkey1:
 000048F8  E8 FFFFBA21		    call   process_messages
				    
 000048FD  68 00000091		    push   145      ; VK_SCROLL
 00004902  E8 00000000 E	    call   GetKeyState
 00004907  A9 00000001		    test   eax, 1
 0000490C  C6 05 0000485F R	    mov    byte ptr [isqwerty], 1
	   01
 00004913  74 07		    jz     @f
 00004915  C6 05 0000485F R	    mov    byte ptr [isqwerty], 0
	   00
				    
 0000491C  B9 000000FF		@@: mov    ecx, 255
 00004921  51			@@: push   ecx
 00004922  51			    push   ecx
 00004923  E8 00000000 E	    call   GetAsyncKeyState
 00004928  59			    pop    ecx
 00004929  A9 00000001		    test   eax, 1
 0000492E  75 05		    jnz    @f
 00004930  49			    dec    ecx
 00004931  75 EE		    jnz    @b
 00004933  EB C3		    jmp    wkey1
 00004935			@@: 
				;    cmp    ecx, 164 ; alt
				;    test   eax, 00008000h
				;    jz     wkey1
				    
				    
 00004935  6A 00		@@: push   0
 00004937  51			    push   ecx
 00004938  E8 00000000 E	    call   MapVirtualKeyA
 0000493D  0B C0		    or     eax, eax
 0000493F  74 B7		    jz     wkey1
				    
				    
 00004941  3C 3A		@@: cmp    al, 72o
 00004943  73 B3		    jnc    wkey1
				;
 00004945  F6 05 0000485F R	    test   byte ptr [isqwerty], 0ffh
	   FF
 0000494C  8A C8		    mov    cl, al
 0000494E  75 0F		    jnz    @f
 00004950  3C 10		    cmp    al, 20o                                                   
 00004952  7C A4		    jl     wkey1
 00004954  8A 88 00004896 R	    mov    cl, [keys-20o+eax]
 0000495A			wkeyex:    
 0000495A  8A C1		    mov    al, cl
 0000495C  5F			    pop    edi
 0000495D  5E			    pop    esi
 0000495E  C3			    ret
				    
 0000495F  B1 01		@@: mov    cl, 1
 00004961  3C 01		    cmp    al, 1  ; esc
 00004963  74 F5		    je     wkeyex
 00004965  3C 0E		    cmp    al, 14 ; bksp
 00004967  74 F1		    je     wkeyex
 00004969  FE C1		    inc    cl
 0000496B  3C 39		    cmp    al, 57 ; space
 0000496D  74 EB		    je     wkeyex

 0000496F  8A C8		@@: mov    cl, al
 00004971  3C 04		    cmp    al, 4
 00004973  7D E5		    jnl    wkeyex
 00004975  80 C1 3A		    add    cl, 72o
 00004978  EB E0		    jmp    wkeyex
				    
 0000497A			KEY: 
 0000497A  E9 FFFFFF51		    jmp    wkey

				    DUP_
 0000497F  8D 76 FC	     1	    lea    esi, [esi-4]
 00004982  89 06	     1	    mov    [esi], eax
 00004984  33 C0		    xor    eax, eax
 00004986  E8 FFFFBC3D		@@: call   PAAUSE_
 0000498B  E4 64		    in     AL, 144o
 0000498D  A8 01		    test   AL, 1
 0000498F  74 F5		    jz     @b                                    
 00004991  E4 60		    in     AL, 140o
 00004993  A8 F0		    test   AL, 360o
 00004995  74 EF		    jz     @b
 00004997  3C 3A		    cmp    AL, 72o
 00004999  73 EB		    jnc    @b
 0000499B  8A 80 00004896 R	    mov    AL, [keys-20o+eax]
 000049A1  C3			    ret

				ALIGN 4
 000049A4 00004A40 R		graph0     dd offset nul0, offset nul0, offset nul0, offset ALPH0
	   00004A40 R
	   00004A40 R
	   00004C36 R
 000049B4  00 00 05 00		           db  0 ,  0 ,  5 , 0 ;     a
 000049B8 00004B3D R		graph1     dd offset WORD0, offset X, offset LJ, offset ALPH
	   00004AD6 R
	   00004AAF R
	   00004C5E R
 000049C8  15 25 05 00		           db 25o, 45o,  5 , 0 ; x . a
 000049CC 00004A40 R		alpha0     dd offset nul0, offset nul0, offset NUMBER, offset STAR0
	   00004A40 R
	   00004BD6 R
	   00004C48 R
 000049DC  00 21 2D 00		           db  0 , 41o, 55o, 0 ;   9 *
 000049E0 00004B3D R		alpha1     dd offset WORD0, offset X, offset LJ, offset GRAPH
	   00004AD6 R
	   00004AAF R
	   00004C70 R
 000049F0  15 25 2D 00		           db 25o, 45o, 55o, 0 ; x . *
 000049F4 00004A40 R		numb0      dd offset nul0, offset MINUS, offset ALPHn, offset OCTAL
	   00004BCC R
	   00004C35 R
	   00004B83 R
 00004A04  23 05 0E 00		           db 43o,  5 , 16o, 0 ; - a f
 00004A08 00004BD3 R		numb1      dd offset NUMBER0, offset Xn, offset ENDN, offset NUMBER0
	   00004BA6 R
	   00004C29 R
	   00004BD3 R
 00004A18  15 25 00 00		           db 25o, 45o,  0 , 0 ; x .

 00004A1C 00004762 R		board      dd offset alpha-4
 00004A20 000049CC R		shift      dd offset alpha0
 00004A24 0000000A		base       dd 10
 00004A28 00004B45 R		current    dd offset decimal
 00004A2C 00FFFF00		keyc       dd yellow
 00004A30 00000001		chars      dd 1
 00004A34 000006AF R		aword      dd offset EX1
 00004A38 00000A3E R		anumber    dd offset nul
 00004A3C 00000001		words      dd 1

 00004A40			nul0: 
				    DROP
 00004A40  AD		     1	    lodsd 
 00004A41  EB 16		    jmp    @f
				    
 00004A43			ACCEPT:
 00004A43			acceptn: 
 00004A43  C7 05 00004A20 R	    mov    [shift], offset alpha0
	   000049CC R
 00004A4D  8D 3D 00004762 R	    lea    edi, alpha-4
 00004A53			ACCEPT1: 
 00004A53  89 3D 00004A1C R	    mov    [board], edi
 00004A59  E8 FFFFFF1C		@@: call   KEY
 00004A5E  3C 04		    cmp    AL, 4
 00004A60  0F 89 00000225	    jns    first
 00004A66  8B 15 00004A20 R	    mov    edx, [shift]
 00004A6C  FF 24 82		    jmp    dword ptr [edx+eax*4]

 00004A6F 1C			bits       db 28

 00004A70  83 C0 50		@@: add    eax, 120o
 00004A73  B1 07		    mov    CL, 7
 00004A75  EB 0D		    jmp    @f
				    
 00004A77			PACK: 
 00004A77  3C 10		    cmp    AL, 20o
 00004A79  73 F5		    jnc    @b
 00004A7B  B1 04		    mov    CL, 4
 00004A7D  A8 08		    test   AL, 10o
 00004A7F  74 03		    jz     @f
 00004A81  41			    inc    ecx
 00004A82  34 18		    xor    AL, 30o
 00004A84  8B D0		@@: mov    edx, eax
 00004A86  8A E9		    mov    CH, CL
 00004A88  38 0D 00004A6F R	@@: cmp    [bits], CL
 00004A8E  73 08		    jnc    @f
 00004A90  D0 E8		    shr    AL, 1
 00004A92  72 22		    jc     FULL
 00004A94  FE C9		    dec    CL
 00004A96  EB F0		    jmp    @b
 00004A98  D3 26		@@: shl    dword ptr [esi], CL
 00004A9A  31 06		    xor    [esi], eax
 00004A9C  28 0D 00004A6F R	    sub    [bits], CL
 00004AA2  C3			    ret

 00004AA3			LJ0: 
 00004AA3  8A 0D 00004A6F R	    mov    CL, [bits]
 00004AA9  80 C1 04		    add    CL, 4
 00004AAC  D3 26		    shl    dword ptr [esi], CL
 00004AAE  C3			    ret

 00004AAF			LJ: 
 00004AAF  E8 FFFFFFEF		    call   LJ0
				    DROP
 00004AB4  AD		     1	    lodsd 
 00004AB5  C3			    ret

 00004AB6			FULL: 
 00004AB6  E8 FFFFFFE8		    call   LJ0
 00004ABB  FF 05 00004A3C R	    inc    words
 00004AC1  C6 05 00004A6F R	    mov    bits, 28
	   1C
 00004AC8  28 2D 00004A6F R	    sub    bits, CH
 00004ACE  8B C2		    mov    eax, edx
				    DUP_
 00004AD0  8D 76 FC	     1	    lea    esi, [esi-4]
 00004AD3  89 06	     1	    mov    [esi], eax
 00004AD5  C3			    ret

 00004AD6			X:  
 00004AD6  E8 FFFFFAAE		    call   RIGHT
 00004ADB  A1 00004A3C R	    mov    eax, words
 00004AE0  8D 34 86		    lea    esi, [eax*4+esi]
				    DROP
 00004AE3  AD		     1	    lodsd 
 00004AE4  E9 FFFFFF5A		    jmp    ACCEPT

 00004AE9			WORD_: 
 00004AE9  E8 FFFFFA9B		    call   RIGHT
 00004AEE  C7 05 00004A3C R	    mov    words, 1
	   00000001
 00004AF8  C7 05 00004A30 R	    mov    chars, 1
	   00000001
				    DUP_
 00004B02  8D 76 FC	     1	    lea    esi, [esi-4]
 00004B05  89 06	     1	    mov    [esi], eax
 00004B07  C7 06 00000000	    mov    dword ptr [esi], 0
 00004B0D  C6 05 00004A6F R	    mov    bits, 28
	   1C
 00004B14			WORD1:  
 00004B14  E8 FFFFFCAD		    call   LETTER
 00004B19  79 09		    jns    @f
 00004B1B  8B 15 00004A20 R	    mov    edx, [shift]
 00004B21  FF 24 82		    jmp    dword ptr [edx+eax*4]
 00004B24  84 C0		@@: test   AL, AL
 00004B26  74 15		    jz     WORD0
				    DUP_
 00004B28  8D 76 FC	     1	    lea    esi, [esi-4]
 00004B2B  89 06	     1	    mov    [esi], eax
 00004B2D  E8 FFFFFA3E		    call   ECHO_
 00004B32  E8 FFFFFF40		    call   PACK
 00004B37  FF 05 00004A30 R	    inc    chars

 00004B3D			WORD0:   
				    DROP
 00004B3D  AD		     1	    lodsd 
 00004B3E  E8 FFFFFE37		    call   KEY
 00004B43  EB CF		    jmp    WORD1

 00004B45			decimal: 
 00004B45  C7 05 00004A24 R	    mov    [base], 10
	   0000000A
 00004B4F  C7 05 00004A20 R	    mov    [shift], offset numb0
	   000049F4 R
 00004B59  C7 05 00004A1C R	    mov    [board], offset numbers-4
	   00004792 R
 00004B63  C3			    ret

 00004B64			hex: 
 00004B64  C7 05 00004A24 R	    mov    [base], 16
	   00000010
 00004B6E  C7 05 00004A20 R	    mov    [shift], offset numb0 ; oct0
	   000049F4 R
 00004B78  C7 05 00004A1C R	    mov    [board], offset octals-4
	   000047AA R
 00004B82  C3			    ret

 00004B83			octal: 
 00004B83  81 35 00004A28 R	    xor    [current], (offset decimal) 
	   00004B45 R
 00004B8D  81 35 00004A28 R	    xor    [current], (offset hex)
	   00004B64 R
 00004B97  80 35 00004A06 R	    xor    byte ptr numb0+18, 41o xor 16o ; f vs 9
	   2F
 00004B9E  FF 15 00004A28 R	    call   [current]
 00004BA4  EB 2D		    jmp    NUMBER0

 00004BA6			Xn: DROP
 00004BA6  AD		     1	    lodsd 
				    DROP
 00004BA7  AD		     1	    lodsd 
 00004BA8  E9 FFFFFE96		    jmp    ACCEPTn

 00004BAD 0E 0A 00 00		digit      db 14, 10,  0,  0
 00004BB1  00 00 0C 00 00	           db  0,  0, 12,  0,  0,  0, 15,  0
	   00 0F 00
 00004BB9  0D 00 00 0B 00	           db 13,  0,  0, 11,  0,  0,  0,  0
	   00 00 00
 00004BC1  00 01 02 03 04	           db  0,  1,  2,  3,  4,  5,  6,  7
	   05 06 07
 00004BC9  08 09		           db  8,  9
 00004BCB 00			sign       db 0

 00004BCC			MINUS: 
 00004BCC  A2 00004BCB R	    mov    [sign], AL
 00004BD1  EB 49		    jmp    NUMBER2

 00004BD3			NUMBER0: 
				    DROP
 00004BD3  AD		     1	    lodsd 
 00004BD4  EB 0F		    jmp    NUMBER3

 00004BD6			NUMBER: 
 00004BD6  FF 15 00004A28 R	    call   [current]
 00004BDC  C6 05 00004BCB R	    mov    [sign], 0
	   00
 00004BE3  33 C0		    xor    eax, eax
 00004BE5			NUMBER3: 
 00004BE5  E8 FFFFFD90		    call   KEY
 00004BEA  E8 FFFFFBD7		    call   LETTER
 00004BEF  79 09		    jns    @f
 00004BF1  8B 15 00004A20 R	    mov    edx, [shift]
 00004BF7  FF 24 82		    jmp    dword ptr [edx+eax*4]
 00004BFA  84 C0		@@: test   AL, AL
 00004BFC  74 D5		    jz     NUMBER0
 00004BFE  8A 80 00004BA9 R	    mov    AL, [digit-4+eax]
 00004C04  F6 05 00004BCB R	    test   [sign], 37o
	   1F
 00004C0B  74 02		    jz     @f
 00004C0D  F7 D8		    neg    eax
 00004C0F  8B 16		@@: mov    edx, [esi]
 00004C11  0F AF 15		    imul   edx, [base]
	   00004A24 R
 00004C18  03 D0		    add    edx, eax
 00004C1A  89 16		@@: mov    [esi], edx

 00004C1C			NUMBER2:   
				    DROP
 00004C1C  AD		     1	    lodsd 
 00004C1D  C7 05 00004A20 R	    mov    [shift], offset numb1
	   00004A08 R
 00004C27  EB BC		    jmp    NUMBER3

 00004C29			ENDN: 
				    DROP
 00004C29  AD		     1	    lodsd 
 00004C2A  FF 15 00004A38 R	    call   [anumber]
 00004C30  E9 FFFFFE0E		    jmp    ACCEPTn

 00004C35			ALPHn: 
				    DROP
 00004C35  AD		     1	    lodsd 
 00004C36			ALPH0: 
 00004C36  C7 05 00004A20 R	    mov    [shift], offset alpha0
	   000049CC R
 00004C40  8D 3D 00004762 R	    lea    edi, [alpha-4]
 00004C46  EB 10		    jmp    @f
 00004C48			STAR0: 
 00004C48  C7 05 00004A20 R	    mov    [shift], offset graph0
	   000049A4 R
 00004C52  8D 3D 0000477A R	    lea    edi, [graphics-4]
 00004C58			@@: DROP
 00004C58  AD		     1	    lodsd 
 00004C59  E9 FFFFFDF5		    jmp    ACCEPT1

 00004C5E			ALPH: 
 00004C5E  C7 05 00004A20 R	    mov    [shift], offset alpha1
	   000049E0 R
 00004C68  8D 3D 00004762 R	    lea    edi, [alpha-4]
 00004C6E  EB 10		    jmp    @f
 00004C70			GRAPH: 
 00004C70  C7 05 00004A20 R	    mov    [shift], offset graph1
	   000049B8 R
 00004C7A  8D 3D 0000477A R	    lea    edi, [graphics-4]
 00004C80  89 3D 00004A1C R	@@: mov    [board], edi
 00004C86  E9 FFFFFEB2		    jmp    WORD0

 00004C8B			first: 
 00004C8B  83 05 00004A20 R	    add    [shift], 4*4+4
	   14
 00004C92  E8 FFFFFE52		    call   WORD_
 00004C97  FF 15 00004A34 R	    call   [aword]
 00004C9D  E9 FFFFFDA1		    jmp    ACCEPT

 00004CA2 18 19 1A 1B 1C	hicon      db 30o, 31o, 32o, 33o, 34o, 35o, 36o, 37o ; 01234567
	   1D 1E 1F
 00004CAA  20 21 05 13 0A	           db 40o, 41o,  5 , 23o, 12o, 20o,  4 , 16o ; 89abcdef
	   10 04 0E
				; eDIG11 ( n -- n ) and eDIG ( n -- ) emit a hexadecimal digit
 00004CB2			eDIG1: 
				    DUP_
 00004CB2  8D 76 FC	     1	    lea    esi, [esi-4]
 00004CB5  89 06	     1	    mov    [esi], eax
 00004CB7			eDIG: 
 00004CB7  51			    push   ecx
 00004CB8  8A 80 00004CA2 R	    mov    AL, hicon[eax]
 00004CBE  E8 FFFFF73E		    call   EMIT
 00004CC3  59			    pop    ecx
 00004CC4  C3			    ret
				; oDIG ( x -- y n ) converts the next four bits in a 32-bit number 
				; into a value between 0 and 15 (0..0x0F)
 00004CC5			oDIG: 
 00004CC5  C1 C0 04		    rol    eax, 4
				    DUP_
 00004CC8  8D 76 FC	     1	    lea    esi, [esi-4]
 00004CCB  89 06	     1	    mov    [esi], eax
 00004CCD  83 E0 0F		    and    eax, 0Fh
 00004CD0  C3			    ret

 00004CD1			hdotn: 
 00004CD1  8B D0		    mov    edx, eax
 00004CD3  F7 D8		    neg    eax
 00004CD5  8D 0C 85		    lea    ecx, [32+eax*4]
	   00000020
				    DROP
 00004CDC  AD		     1	    lodsd 
 00004CDD  D3 C0		    rol    eax, CL
 00004CDF  8B CA		    mov    ecx, edx
 00004CE1  EB 05		    jmp    @f
				; Print 32-bit number onto screen as eight-digit hexadecimal number 
 00004CE3			hdot: 
 00004CE3  B9 00000008		    mov    ecx, 8
 00004CE8  E8 FFFFFFD8		@@: call   oDIG
 00004CED  E8 FFFFFFC5		    call   eDIG
				    next   @b
 00004CF2  49		     1	    dec    ecx
 00004CF3  75 F3	     1	    jnz    @b
				    DROP
 00004CF5  AD		     1	    lodsd 
 00004CF6  C3			    ret
				; Print 32-bit number onto screen as hexadecimal 
				; number without leading zeroes
 00004CF7			dot: 
 00004CF7  B9 00000007		    mov    ecx, 7
 00004CFC  E8 FFFFFFC4		@@: call   oDIG
 00004D01  75 19		    jnz    @h
				    DROP
 00004D03  AD		     1	    lodsd 
				    next   @b
 00004D04  49		     1	    dec    ecx
 00004D05  75 F5	     1	    jnz    @b
 00004D07  41			    inc    ecx
 00004D08  E8 FFFFFFB8		@@: call   oDIG
 00004D0D  E8 FFFFFFA5		@h1:call   eDIG
				    next   @b
 00004D12  49		     1	    dec    ecx
 00004D13  75 F3	     1	    jnz    @b
 00004D15  E8 FFFFF71E		    call   space
				    DROP
 00004D1A  AD		     1	    lodsd 
 00004D1B  C3			    ret
 00004D1C  41			@h: inc    ecx
 00004D1D  EB EE		    jmp    @h1
				; Print 32-bit number onto screen without leading zeroes — as a decimal or a hexadecimal number, 
				; depending on the current base.
 00004D1F			qdot: 
 00004D1F  83 3D 00004A24 R	    cmp    base, 10
	   0A
 00004D26  75 CF		    jnz    dot
 00004D28			dot10: 
 00004D28  8B D0		    mov    edx, eax
 00004D2A  85 D2		    test   edx, edx
 00004D2C  79 11		    jns    @f
 00004D2E  F7 DA		    neg    edx
				    DUP_
 00004D30  8D 76 FC	     1	    lea    esi, [esi-4]
 00004D33  89 06	     1	    mov    [esi], eax
 00004D35  B8 00000023		    mov    eax, 43o
 00004D3A  E8 FFFFF6C2		    call   EMIT
 00004D3F  B9 00000008		@@: mov    ecx, 8
 00004D44  8B C2		@@: mov    eax, edx
 00004D46  33 D2		    xor    edx, edx
 00004D48  F7 34 8D		    div    tens[ecx*4]
	   0000506C R
 00004D4F  85 C0		    test   eax, eax
 00004D51  75 10		    jnz    D_1
 00004D53  49			    dec    ecx
 00004D54  79 EE		    jns    @b
 00004D56  EB 13		    jmp    D_2
 00004D58  8B C2		@@: mov    eax, edx
 00004D5A  33 D2		    xor    edx, edx
 00004D5C  F7 34 8D		    div    tens[ecx*4]
	   0000506C R
 00004D63			D_1: 
 00004D63  E8 FFFFFF4A		    call   eDIG1
 00004D68  49			    dec    ecx
 00004D69  79 ED		    jns    @b
 00004D6B			D_2: 
 00004D6B  8B C2		    mov    eax, edx
 00004D6D  E8 FFFFFF40		    call   eDIG1
 00004D72  E8 FFFFF6C1		    call   space ; spcr
				    DROP
 00004D77  AD		     1	    lodsd 
 00004D78  C3			    ret
				; unpack the Huffman-coded characters in a 32-bit word 
 00004D79			unPACK: 
				    DUP_
 00004D79  8D 76 FC	     1	    lea    esi, [esi-4]
 00004D7C  89 06	     1	    mov    [esi], eax
 00004D7E  85 C0		    test   eax, eax
 00004D80  78 0A		    js     @f
 00004D82  C1 26 04		    shl    dword ptr [esi], 4
 00004D85  C1 C0 04		    rol    eax, 4
 00004D88  83 E0 07		    and    eax, 7
 00004D8B  C3			    ret
 00004D8C  D1 E0		@@: shl    eax, 1
 00004D8E  78 0C		    js     @f
 00004D90  C1 26 05		    shl    dword ptr [esi], 5
 00004D93  C1 C0 04		    rol    eax, 4
 00004D96  83 E0 07		    and    eax, 7
 00004D99  34 08		    xor    AL, 10o
 00004D9B  C3			    ret
 00004D9C  C1 26 07		@@: shl    dword ptr [esi], 7
 00004D9F  C1 C0 06		    rol    eax, 6
 00004DA2  83 E0 3F		    and    eax, 77o
 00004DA5  2C 10		    sub    AL, 20o
 00004DA7  C3			    ret

 00004DA8			qRING: 
				    DUP_
 00004DA8  8D 76 FC	     1	    lea    esi, [esi-4]
 00004DAB  89 06	     1	    mov    [esi], eax
 00004DAD  FF 06		    inc    dword ptr [esi]
 00004DAF  39 3D 000050A0 R	    cmp    curs, edi ; from abort, insert
 00004DB5  75 05		    jnz    @f
 00004DB7  A3 000050A0 R	    mov    curs, eax        
 00004DBC  3B 05 000050A0 R	@@: cmp    eax, curs
 00004DC2  74 10		    jz     RING
 00004DC4  79 0C		    jns    @f
 00004DC6  89 3D 000050A8 R	    mov    pcad, edi
 00004DCC  89 3D 000050A4 R		mov    cad, edi
 00004DD2			@@: DROP
 00004DD2  AD		     1	    lodsd 
 00004DD3  C3			    ret

 00004DD4			RING: 
 00004DD4  89 3D 000050A4 R	    mov    cad, edi
 00004DDA  81 2D 00004258 R	    sub    xy, iw*10000h ; bksp
	   00160000
				    DUP_
 00004DE4  8D 76 FC	     1	    lea    esi, [esi-4]
 00004DE7  89 06	     1	    mov    [esi], eax
 00004DE9  B8 00E04000		    mov    eax, 0e04000h
 00004DEE  E8 FFFFF57D		    call   color
 00004DF3  B8 00000030		    mov    eax, 60o
 00004DF8  66| 8B 0D		    mov    CX, word ptr xy+2
	   0000425A R
 00004DFF  66| 3B 0D		    cmp    CX, word ptr rm
	   00004260 R
 00004E06  78 10		    js     @f
 00004E08  E8 FFFFF5F4		    call   EMIT
 00004E0D  81 2D 00004258 R	    sub    xy, iw*10000h ; bksp
	   00160000
 00004E17  C3			    ret
 00004E18  E9 FFFFF5E4		@@: jmp    EMIT

 00004E1D  66| 8B 0D		rW: mov    CX, word ptr xy+2
	   0000425A R
 00004E24  66| 3B 0D		    cmp    CX, word ptr lm
	   0000425C R
 00004E2B  74 05		    jz     @f
 00004E2D  E8 FFFFF7E7		    call   cr
 00004E32  E8 FFFFF710		@@: call   RED
 00004E37  E9 0000009F		    jmp    TYPE_

 00004E3C  E8 FFFFF715		gW: call   GREEN
 00004E41  E9 00000095		    jmp    TYPE_
 00004E46  E8 FFFFF6C0		mW: call   CYAN
 00004E4B  E9 0000008B		    jmp    TYPE_
 00004E50			wW: DUP_
 00004E50  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E53  89 06	     1	    mov    [esi], eax
 00004E55  B8 00FFFF00		    mov    eax, yellow
 00004E5A  E8 FFFFF511		    call   color
 00004E5F  EB 7A		    jmp    TYPE_

 00004E61			type0: 
 00004E61  81 2D 00004258 R	    sub    xy, iw*10000h ; call bspcr
	   00160000
 00004E6B  F7 04 BD		    test   dword ptr [-4+edi*4], -20o
	   FFFFFFFC
	   FFFFFFF0
 00004E76  75 63		    jnz    type1
 00004E78  4F			    dec    edi
 00004E79  89 3D 000050AC R	    mov    lcad, edi
 00004E7F  E8 FFFFF5B4		    call   space
 00004E84  E8 FFFFFF1F		    call   qRING
 00004E89  5A			    pop    edx ; End of block
				    DROP
 00004E8A  AD		     1	    lodsd 
					;ret
 00004E8B  E9 FFFFF83C		    jmp    KEYBOARD

 00004E90			Cap: 
 00004E90  E8 FFFFF4D1		    call   white
				    DUP_
 00004E95  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E98  89 06	     1	    mov    [esi], eax
 00004E9A  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004EA1  83 E0 F0		    and    eax, -20o
 00004EA4  E8 FFFFFED0		    call   unPACK
 00004EA9  04 30		    add    AL, 48
 00004EAB  E8 FFFFF551		    call   EMIT
 00004EB0  EB 38		    jmp    type2

 00004EB2			CAPS: 
 00004EB2  E8 FFFFF4AF		    call   white
				    DUP_
 00004EB7  8D 76 FC	     1	    lea    esi, [esi-4]
 00004EBA  89 06	     1	    mov    [esi], eax
 00004EBC  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004EC3  83 E0 F0		    and    eax, -20o
 00004EC6  E8 FFFFFEAE		@@: call   unPACK
 00004ECB  74 2B		    jz     @f
 00004ECD  04 30		    add    AL, 48
 00004ECF  E8 FFFFF52D		    call   EMIT
 00004ED4  EB F0		    jmp    @b

 00004ED6			text: 
 00004ED6  E8 FFFFF48B		    call   WHITE
 00004EDB			TYPE_:
 00004EDB			type1: 
				    DUP_
 00004EDB  8D 76 FC	     1	    lea    esi, [esi-4]
 00004EDE  89 06	     1	    mov    [esi], eax
 00004EE0  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004EE7  83 E0 F0		    and    eax, -20o
 00004EEA			type2:     
 00004EEA  E8 FFFFFE8A		    call   unPACK
 00004EEF  74 07		    jz     @f
 00004EF1  E8 FFFFF50B		    call   EMIT
 00004EF6  EB F2		    jmp    type2
 00004EF8  E8 FFFFF53B		@@: call   space
				    DROP
 00004EFD  AD		     1	    lodsd 
				    DROP
 00004EFE  AD		     1	    lodsd 
 00004EFF  C3			    ret

 00004F00			gsW: 
 00004F00  8B 14 BD		    mov    edx, [-4+edi*4]
	   FFFFFFFC
 00004F07  C1 FA 05		    sar    edx, 5
 00004F0A  EB 12		    jmp    gnW1

 00004F0C			var: 
 00004F0C  E8 FFFFF609		    call   MAGENTA
 00004F11  E8 FFFFFFC5		    call   TYPE_
 00004F16			gnW: 
 00004F16  8B 14 BD		    mov    edx, [edi*4]
	   00000000
 00004F1D  47			    inc    edi
 00004F1E			gnW1: 
				    DUP_
 00004F1E  8D 76 FC	     1	    lea    esi, [esi-4]
 00004F21  89 06	     1	    mov    [esi], eax
 00004F23  B8 0000F800		    mov    eax, 0f800h ; Green
 00004F28  81 3D 00005090 R	    cmp    bas, offset dot10
	   00004D28 R
 00004F32  74 36		    jz     @f        
 00004F34  B8 0000C000		    mov    eax, 0c000h ; dark green
 00004F39  EB 2F		    jmp    @f

 00004F3B  8B 14 BD		sW: mov    edx, [-4+edi*4]
	   FFFFFFFC
 00004F42  C1 FA 05		    sar    edx, 5
 00004F45  EB 08		    jmp    nW1

 00004F47  8B 14 BD		nW: mov    edx, [edi*4]
	   00000000
 00004F4E  47			    inc    edi
 00004F4F			nW1: 
				    DUP_
 00004F4F  8D 76 FC	     1	    lea    esi, [esi-4]
 00004F52  89 06	     1	    mov    [esi], eax
 00004F54  B8 00FFFF00		    mov    eax, yellow
 00004F59  81 3D 00005090 R	    cmp    bas, offset dot10
	   00004D28 R
 00004F63  74 05		    jz     @f        
 00004F65  B8 00C0C000		    mov    eax, 0c0c000h ; dark yellow
 00004F6A  E8 FFFFF401		@@: call   color
				    DUP_
 00004F6F  8D 76 FC	     1	    lea    esi, [esi-4]
 00004F72  89 06	     1	    mov    [esi], eax
 00004F74  8B C2		    mov    eax, edx
 00004F76  FF 25 00005090 R	    jmp    [bas]

 00004F7C			siW: ;silver
 00004F7C  8B 14 BD			mov edx, [edi*4-4]
	   FFFFFFFC
 00004F83  C1 FA 05			sar edx,5
					DUP_
 00004F86  8D 76 FC	     1	    lea    esi, [esi-4]
 00004F89  89 06	     1	    mov    [esi], eax
 00004F8B  B8 00FFFFFF			mov eax, 0FFFFFFh  ; white
 00004F90  81 3D 00005090 R		cmp    bas, offset dot10
	   00004D28 R
 00004F9A  74 61			je @f
 00004F9C  B8 00C0C0C0			mov eax, 0c0c0c0h; silver
 00004FA1  FF 25 00005090 R		jmp [bas]
				  

 00004FA7			REFRESH: 
 00004FA7  E8 FFFFB660		    call   SHOW
 00004FAC  E8 FFFFF615		    call   blank
 00004FB1  E8 FFFFF4CA		    call   text1
				    DUP_            ; Counter
 00004FB6  8D 76 FC	     1	    lea    esi, [esi-4]
 00004FB9  89 06	     1	    mov    [esi], eax
 00004FBB  A1 000050AC R	    mov    eax, lcad
 00004FC0  A3 000050A4 R	    mov    cad, eax ; for curs beyond end

 00004FC5  A1 00005094 R	    mov    eax, blk
 00004FCA  83 E8 12		    sub    eax, 18
 00004FCD  C1 E0 08		    shl    eax, 10-2
 00004FD0  8B 1D 0000002D R	    mov    ebx, [blocks_adr]
 00004FD6  C1 EB 02		    shr    ebx, 2
 00004FD9  03 C3		    add    eax, ebx
 00004FDB  8B F8		    mov    edi, eax 

 00004FDD  33 C0		    xor    eax, eax
 00004FDF  89 3D 000050A8 R	    mov    pcad, edi ; for curs=0
 00004FE5  89 3D 000050A4 R		mov    cad, edi
 00004FEB			ref1:   
 00004FEB  F7 04 BD		    test   dword ptr [edi*4], 0fh
	   00000000
	   0000000F
 00004FF6  74 05		    jz     @f
 00004FF8  E8 FFFFFDAB		    call   qRING
 00004FFD  8B 14 BD		@@: mov    edx, [edi*4]
	   00000000
 00005004  47			    inc    edi
 00005005  C7 05 00005090 R	    mov    bas, offset dot10
	   00004D28 R
 0000500F  F6 C2 10		    test   DL, 20o
 00005012  74 0A		    jz     @f
 00005014  C7 05 00005090 R	    mov    bas, offset dot
	   00004CF7 R
 0000501E  83 E2 0F		@@: and    edx, 17o
 00005021  FF 14 95		    call   display[edx*4]
	   0000502C R
 00005028  EB C1		    jmp    ref1

				ALIGN 4
 0000502C 00004E61 R		display    dd offset TYPE0, offset wW,   offset nW,  offset rW
	   00004E50 R
	   00004F47 R
	   00004E1D R
 0000503C  00004E3C R		           dd offset gW,    offset gnW,  offset gsW, offset mW
	   00004F16 R
	   00004F00 R
	   00004E46 R
 0000504C  00004F3B R		           dd offset sW,    offset text, offset Cap, offset CAPS
	   00004ED6 R
	   00004E90 R
	   00004EB2 R
 0000505C  00004F0C R		           dd offset var,   offset nul,  offset nul, offset siW
	   00000A3E R
	   00000A3E R
	   00004F7C R
 0000506C 0000000A		tens       dd 10, 100, 1000, 10000, 100000, 1000000
	   00000064
	   000003E8
	   00002710
	   000186A0
	   000F4240
 00005084  00989680		           dd 10000000, 100000000, 1000000000
	   05F5E100
	   3B9ACA00
 00005090 00004D28 R		bas        dd offset dot10
 00005094 00000012		blk        dd 18
 00005098 00000012		o_blk      dd 18
 0000509C 00000000		offvadr    dd 0
 000050A0 00000000		curs       dd 0
 000050A4 00000000		cad        dd 0
 000050A8 00000000		pcad       dd 0
 000050AC 00000000		lcad       dd 0
 000050B0 000000C3		cpoint     dd 0C3h
 000050B4 00004650 R		trash      dd offset trash_adr ;;! buffer*4
 000050B8 00000A3E R		ekeys      dd offset nul, offset DEL, offset Eout, offset destack
	   00005459 R
	   000052BC R
	   00005301 R
 000050C8  00005181 R		           dd offset act1, offset act3, offset act4, offset shadow   ; y r g *
	   00005185 R
	   00005189 R
	   00005239 R
 000050D8  000051EF R		           dd offset mcur, offset mmcur, offset ppcur, offset pcur   ; l u d r
	   000051FE R
	   00005212 R
	   000051F7 R
 000050E8  00005225 R		           dd offset mblk, offset actv, offset act7, offset pblk     ; - m c +
	   000051C5 R
	   000051A1 R
	   0000521A R
 000050F8  00000A3E R		           dd offset nul, offset act11, offset act10, offset act9    ; _ S C t
	   00005195 R
	   00005191 R
	   0000518D R
 00005108  00000A3E R		           dd offset nul, offset nul, offset nul, offset actoblk    ; c _ _ j
	   00000A3E R
	   00000A3E R
	   00005244 R
 00005118 00005199 R		ekbd0      dd offset actA, offset actB, offset nul, offset nul ; a b _ _
	   0000519D R
	   00000A3E R
	   00000A3E R
 00005128  15 25 07 00		           db 25o, 45o,  7 ,  0  ; x  .  i  ; chars to display on the bottom line kboard
 0000512C 0B 01 0D 2D		ekbd       db 13o,  1 , 15o, 55o ; y  r  g  *
 00005130  0C 16 10 01		           db 14o, 26o, 20o,  1  ; l  u  d  r
 00005134  23 09 0A 2B		           db 43o, 11o, 12o, 53o ; -  m  c  +
 00005138  00 38 3A 02		           db  0 , 70o, 72o,  2  ;    S  C  t
 0000513C  0A 10 0E 22		           db 12o,  20o ,  16o,  42o ; c  d  f  j
 00005140  05 13 00 00		           db  5 ,  23o ,0 ,  0  ; a  b  _  _
 00005144 00FFFF00		actc       dd yellow, 0, 0ff0000h, 0c000h, 0, 0, 0ffffh
	   00000000
	   00FF0000
	   0000C000
	   00000000
	   00000000
	   0000FFFF
								; 1=yellow (0xFFFF00), --, 3=red (0xFF0000),
								; 4=green (0x00C000), --, --, 7=cyan (0x00FFFF)
 00005160  00000000		           dd 0, 0ffffffh, 0ffffffh, 0ffffffh, 8080ffh, 0c0c0c0h, 4040ffh
	   00FFFFFF
	   00FFFFFF
	   00FFFFFF
	   008080FF
	   00C0C0C0
	   004040FF
								; --, 9..11=white (0xFFFFFF), 12=light blue??? (0x8080FF) 
				                ; 13=silver. 14 blue				
						   
 0000517C 00000000		vector     dd 0
 00005180 01			action     db 1

 00005181			act1: 
 00005181  B0 01		    mov    AL, 1 ; 1 = execute (yellow word)
 00005183  EB 1E		    jmp    @f
 00005185			act3: 
 00005185  B0 03		    mov    AL, 3 ; 3 = define (red word)
 00005187  EB 1A		    jmp    @f
 00005189			act4: 
 00005189  B0 04		    mov    AL, 4 ; 4 = compile (green word)
 0000518B  EB 16		    jmp    @f
 0000518D			act9: 
 0000518D  B0 09		    mov    AL, 9 ; 9 = comment (white word)
 0000518F  EB 12		    jmp    @f
 00005191			act10: 
 00005191  B0 0A		    mov    AL, 10 ; 10 = Capitalized Comment
 00005193  EB 0E		    jmp    @f
 00005195			act11: 
 00005195  B0 0B		    mov    AL, 11 ; 11 = COMMENT IN ALL CAPS
 00005197  EB 0A		    jmp    @f
 00005199			actA:
 00005199  B0 0D			mov al, 13 ; gray
 0000519B  EB 06			jmp    @f
 0000519D			actB:
 0000519D  B0 0E		    mov al, 14  ; blue
 0000519F  EB 02		    jmp    @f
 000051A1			act7: 
 000051A1  B0 07		    mov    AL, 7 ; 7 = compile macro (cyan word)
 000051A3  A2 00005180 R	@@: mov    action, AL
 000051A8  8B 04 85		    mov    eax, [actc-4+eax*4]
	   00005140 R
 000051AF  C7 05 00004A34 R	    mov    aword, offset insert
	   00005399 R
 000051B9			actn: 
 000051B9  A3 00004A2C R	    mov    keyc, eax
 000051BE  58			    pop    eax
				    DROP
 000051BF  AD		     1	    lodsd 
 000051C0  E9 FFFFF87E		    jmp    ACCEPT

 000051C5			actv: 
 000051C5  C6 05 00005180 R	    mov    action, 12 ; 12 = variable (magenta word)
	   0C
 000051CC  B8 00FF00FF		    mov    eax, 0ff00ffh ; Magenta
 000051D1  C7 05 00004A34 R	    mov    aword, offset @f
	   000051DD R
 000051DB  EB DC		    jmp    actn

 000051DD			@@: DUP_
 000051DD  8D 76 FC	     1	    lea    esi, [esi-4]
 000051E0  89 06	     1	    mov    [esi], eax
 000051E2  33 C0		    xor    eax, eax
 000051E4  FF 05 00004A3C R	    inc    words
 000051EA  E9 000001AA		    jmp    insert    

 000051EF			mcur: 
 000051EF  FF 0D 000050A0 R	    dec    curs
 000051F5  79 06		    jns    @f
 000051F7			pcur: 
 000051F7  FF 05 000050A0 R	    inc    curs
 000051FD  C3			@@: ret

 000051FE			mmcur: 
 000051FE  83 2D 000050A0 R	    sub    curs, 8
	   08
 00005205  79 0A		    jns    @f
 00005207  C7 05 000050A0 R	    mov    curs, 0
	   00000000
 00005211  C3			@@: ret
 00005212			ppcur: 
 00005212  83 05 000050A0 R	    add    curs, 8
	   08
 00005219  C3			    ret

 0000521A			pblk: 
 0000521A  83 05 00005094 R	    add    blk, 2
	   02
 00005221  83 06 02		    add    dword ptr [esi], 2
 00005224  C3			    ret
 00005225			mblk: 
 00005225  83 3D 00005094 R	    cmp    blk, 20
	   14
 0000522C  78 0A		    js     @f
 0000522E  83 2D 00005094 R	    sub    blk, 2 
	   02
 00005235  83 2E 02		    sub    dword ptr [esi], 2
 00005238  C3			@@: ret

 00005239			shadow: 
 00005239  83 35 00005094 R	    xor    blk, 1
	   01
 00005240  83 36 01		    xor    dword ptr [esi], 1
 00005243  C3			    ret

 00005244			actoblk:
 00005244  8B 0D 00005094 R	    mov ecx, blk 
 0000524A  87 0D 00005098 R	    xchg ecx, o_blk
 00005250  89 0D 00005094 R	    mov  blk, ecx
 00005256  C3			    ret
								
 00005257			E0: DROP
 00005257  AD		     1	    lodsd 
 00005258  EB 30		    jmp    @f

 0000525A			edit: 
 0000525A  A3 00005094 R	    mov    blk, eax
				    DROP
 0000525F  AD		     1	    lodsd 
 00005260			E:  DUP_
 00005260  8D 76 FC	     1	    lea    esi, [esi-4]
 00005263  89 06	     1	    mov    [esi], eax
 00005265  A1 00005094 R	    mov    eax, blk
 0000526A  C7 05 00004A38 R	    mov    anumber, offset FORMAT
	   000053E1 R
 00005274  C6 05 000049DC R	    mov    byte ptr alpha0+4*4, 45o ; .
	   25
 0000527B  C7 05 000049D0 R	    mov    alpha0+4, offset E0
	   00005257 R
 00005285  E8 FFFFFD1D		    call   REFRESH
 0000528A  C7 05 00004A20 R	@@: mov    [shift], offset ekbd0
	   00005118 R
 00005294  C7 05 00004A1C R	    mov    [board], offset ekbd-4
	   00005128 R
 0000529E  C7 05 00004A2C R	    mov    [keyc], yellow
	   00FFFF00
 000052A8  E8 FFFFF6CD		@@: call   KEY
 000052AD  E8 FFFFF591		    call   QWADJUST
 000052B2  FF 14 85		    call   ekeys[eax*4]
	   000050B8 R
				    DROP
 000052B9  AD		     1	    lodsd 
 000052BA  EB EC		    jmp    @b

 000052BC			eout: 
 000052BC  58			    pop    eax
				    DROP
 000052BD  AD		     1	    lodsd 
				    DROP
 000052BE  AD		     1	    lodsd 
 000052BF  C7 05 00004A34 R	    mov    aword, offset EX1
	   000006AF R
 000052C9  C7 05 00004A38 R	    mov    anumber, offset nul
	   00000A3E R
 000052D3  C6 05 000049DC R	    mov    byte ptr alpha0+4*4, 0
	   00
 000052DA  C7 05 000049D0 R	    mov    alpha0+4, offset nul0
	   00004A40 R
 000052E4  C7 05 00004A2C R	    mov    keyc, yellow
	   00FFFF00
 000052EE  53			    push ebx
 000052EF  8B 1D 00005094 R	    mov    ebx, blk
 000052F5  89 1D 00005098 R	    mov    o_blk, ebx
 000052FB  5B			    pop ebx

 000052FC  E9 FFFFF742		    jmp    ACCEPT

 00005301			destack: 
 00005301  8B 15 000050B4 R	    mov    edx, trash
 00005307  81 FA 00004650 R	    cmp    edx, offset trash_adr ;;! buffer*4
 0000530D  75 01		    jnz    @f
 0000530F  C3			    ret
 00005310  83 EA 08		@@: sub    edx, 2*4
 00005313  8B 4A 04		    mov    ecx, [edx+1*4]
 00005316  89 0D 00004A3C R	    mov    words, ecx
 0000531C			@@: DUP_
 0000531C  8D 76 FC	     1	    lea    esi, [esi-4]
 0000531F  89 06	     1	    mov    [esi], eax
 00005321  8B 02		    mov    eax, [edx]
 00005323  83 EA 04		    sub    edx, 1*4
				    next   @b
 00005326  49		     1	    dec    ecx
 00005327  75 F3	     1	    jnz    @b
 00005329  83 C2 04		    add    edx, 1*4
 0000532C  89 15 000050B4 R	    mov    trash, edx

 00005332			insert0: 
 00005332  8B 0D 000050AC R	    mov    ecx, lcad  ; room available?
 00005338  03 0D 00004A3C R	    add    ecx, words
 0000533E  33 0D 000050AC R	    xor    ecx, lcad
 00005344  81 E1 FFFFFF00	    and    ecx, -100h
 0000534A  74 0B		    jz     insert1
 0000534C  8B 0D 00004A3C R	    mov    ecx, words ; no
 00005352			@@:          
				    DROP
 00005352  AD		     1	    lodsd 
				    next @b
 00005353  49		     1	    dec    ecx
 00005354  75 FC	     1	    jnz    @b
 00005356  C3			    ret

 00005357			insert1: 
 00005357  56			    push   esi
 00005358  8B 35 000050AC R	    mov    esi, lcad
 0000535E  8B CE		    mov    ecx, esi
 00005360  4E			    dec    esi
 00005361  8B FE		    mov    edi, esi
 00005363  03 3D 00004A3C R	    add    edi, words
 00005369  C1 E7 02		    shl    edi, 2
 0000536C  2B 0D 000050A4 R	    sub    ecx, cad
 00005372  78 07		    js     @f
 00005374  C1 E6 02		    shl    esi, 2
 00005377  FD			    std
 00005378  F3/ A5		    rep movsd
 0000537A  FC			    cld
 0000537B  5E			@@: pop    esi
 0000537C  C1 EF 02		    shr    edi, 2
 0000537F  47			    inc    edi
 00005380  89 3D 000050A0 R	    mov    curs, edi ; like abort
 00005386  8B 0D 00004A3C R	    mov    ecx, words
 0000538C  4F			@@: dec    edi
 0000538D  89 04 BD		    mov    [edi*4], eax
	   00000000
				    DROP   ; requires cld
 00005394  AD		     1	    lodsd 
				    next   @b
 00005395  49		     1	    dec    ecx
 00005396  75 F4	     1	    jnz    @b
 00005398  C3			    ret

 00005399			insert: 
 00005399  E8 FFFFFF94		    call   insert0
 0000539E  8A 0D 00005180 R	    mov    CL, action
 000053A4  30 0C BD		    xor    [edi*4], CL
	   00000000
 000053AB  80 F9 03			cmp cl,3
 000053AE  75 2C			jne    @f 
 000053B0  C6 05 00005180 R		mov byte ptr action,4
	   04
 000053B7  C7 05 00004A2C R		mov keyc,8000ff00h ;
	   8000FF00
				;    @@: ret	
 000053C1			get1word:
 000053C1  8F 05 00004A34 R	    pop [aword]
 000053C7  C7 05 00004A34 R		mov [aword], offset ex1
	   000006AF R
 000053D1  C3				ret
 000053D2			a_1word_:
 000053D2  C7 05 00004A34 R		mov [aword], offset get1word ; for find word proc
	   000053C1 R
 000053DC  E9 FFFFF662		@@: jmp    ACCEPT

 000053E1			FORMAT: 
 000053E1  F6 05 00005180 R	    test   action, 12o ; ignore 3 and 9
	   0A
 000053E8  74 02		    jz     @f
				    DROP
 000053EA  AD		     1	    lodsd 
 000053EB  C3			    ret
 000053EC  8B D0		@@: mov    edx, eax
 000053EE  81 E2 FC000000	    and    edx, 0FC000000h
 000053F4  74 08		    jz     @f
 000053F6  81 FA FC000000	    cmp    edx, 0FC000000h
 000053FC  75 2A		    jnz    FORMAT2
 000053FE  C1 E0 05		@@: shl    eax, 5
 00005401  34 02		    xor    AL, 2 ; 6
 00005403  80 3D 00005180 R	    cmp    action, 4
	   04
 0000540A  74 02		    jz     @f
 0000540C  34 0B		    xor    AL, 13o ; 8
 0000540E  83 3D 00004A24 R	@@: cmp    base, 10
	   0A
 00005415  74 02		    jz     @f
 00005417  34 10		    xor    AL, 20o
 00005419  C7 05 00004A3C R	@@: mov    words, 1
	   00000001
 00005423  E9 FFFFFF71		    jmp    insert

 00005428			FORMAT2: 
				    DUP_
 00005428  8D 76 FC	     1	    lea    esi, [esi-4]
 0000542B  89 06	     1	    mov    [esi], eax
 0000542D  B8 00000001		    mov    eax, 1 ; 5
 00005432  80 3D 00005180 R	    cmp    [action], 4
	   04
 00005439  74 02		    jz     @f
 0000543B  B0 03		    mov    AL, 3 ; 2
 0000543D  83 3D 00004A24 R	@@: cmp    [base], 10
	   0A
 00005444  74 02		    jz     @f
 00005446  34 10		    xor    AL, 20o
 00005448  87 06		@@: xchg   eax, [esi]
 0000544A  C7 05 00004A3C R	    mov    [words], 2
	   00000002
 00005454  E9 FFFFFF40		    jmp    insert

 00005459			DEL: 
 00005459  E8 00000023		    call   enstack
 0000545E  8B 3D 000050A8 R	    mov    edi, [pcad]
 00005464  8B 0D 000050AC R	    mov    ecx, [lcad]
 0000546A  2B CF		    sub    ecx, edi
 0000546C  C1 E7 02		    shl    edi, 2
 0000546F  56			    push   esi
 00005470  8B 35 000050A4 R	    mov    esi, [cad]
 00005476  C1 E6 02		    shl    esi, 2
 00005479  F3/ A5		    rep    movsd
 0000547B  5E			    pop    esi
 0000547C  E9 FFFFFD6E		    jmp    mcur

 00005481			enstack: 
				    DUP_
 00005481  8D 76 FC	     1	    lea    esi, [esi-4]
 00005484  89 06	     1	    mov    [esi], eax
 00005486  A1 000050A4 R	    mov    eax, [cad]
 0000548B  2B 05 000050A8 R	    sub    eax, [pcad]
 00005491  74 27		    jz     ens
 00005493  8B C8		    mov    ecx, eax
 00005495  92			    xchg   eax, edx
 00005496  56			    push   esi
 00005497  8B 35 000050A4 R	    mov    esi, [cad]
 0000549D  8D 34 B5		    lea    esi, [esi*4-4]
	   FFFFFFFC
 000054A4  8B 3D 000050B4 R	    mov    edi, [trash]
 000054AA  FD			@@: std
 000054AB  AD			    lodsd
 000054AC  FC			    cld
 000054AD  AB			    stosd
				    next   @b
 000054AE  49		     1	    dec    ecx
 000054AF  75 F9	     1	    jnz    @b
 000054B1  92			    xchg   eax, edx
 000054B2  AB			    stosd
 000054B3  89 3D 000050B4 R	    mov    [trash], edi
 000054B9  5E			    pop    esi
 000054BA			ens: 
				    DROP
 000054BA  AD		     1	    lodsd 
 000054BB  C3			    ret

 000054BC			pad: 
 000054BC  5A			    pop    edx
 000054BD  89 15 0000517C R	    mov    [vector], edx
 000054C3  81 C2 0000008C	    add    edx, 28*5
 000054C9  89 15 00004A1C R	    mov    [board], edx
 000054CF  83 EA 10		    sub    edx, 4*4
 000054D2  89 15 00004A20 R	    mov    [shift], edx
 000054D8			@@:     
 000054D8  E8 FFFFF49D		    call   KEY
 000054DD  E8 FFFFF361		    call   QWADJUST
 000054E2  8B 15 0000517C R	    mov    edx, [vector]
 000054E8  03 D0		    add    edx, eax
 000054EA  8D 54 82 05		    lea    edx, [5+eax*4+edx]
 000054EE  03 52 FC		    add    edx, [-4+edx]
				    DROP
 000054F1  AD		     1	    lodsd 
 000054F2  FF D2		    call   edx
 000054F4  EB E2		    jmp    @b

				;org (1200h-1)*4
				;    dd 0

 000054F6			code_end:
 000054F6
				end _start

Microsoft (R) Macro Assembler Version 6.15.8803		    03/11/22 14:24:57
color.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

DROP . . . . . . . . . . . . . .	Proc
DUP_ . . . . . . . . . . . . . .	Proc
next . . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

BITMAPINFOHEADER . . . . . . . .	 00000028
  biSize . . . . . . . . . . . .	 00000000	 DWord
  biWidth  . . . . . . . . . . .	 00000004	 DWord
  biHeight . . . . . . . . . . .	 00000008	 DWord
  biPlanes . . . . . . . . . . .	 0000000C	 Word
  biBitCount . . . . . . . . . .	 0000000E	 Word
  biCompression  . . . . . . . .	 00000010	 DWord
  biSizeImage  . . . . . . . . .	 00000014	 DWord
  biXPelsPerMeter  . . . . . . .	 00000018	 DWord
  biYPelsPerMeter  . . . . . . .	 0000001C	 DWord
  biClrUsed  . . . . . . . . . .	 00000020	 DWord
  biClrImportant . . . . . . . .	 00000024	 DWord
MSG  . . . . . . . . . . . . . .	 0000001C
  hwnd . . . . . . . . . . . . .	 00000000	 DWord
  message  . . . . . . . . . . .	 00000004	 DWord
  wParam . . . . . . . . . . . .	 00000008	 DWord
  lParam . . . . . . . . . . . .	 0000000C	 DWord
  time . . . . . . . . . . . . .	 00000010	 DWord
  pt . . . . . . . . . . . . . .	 00000014	 QWord
PAINTSTRUCT  . . . . . . . . . .	 00000040
  hdc  . . . . . . . . . . . . .	 00000000	 DWord
  fErase . . . . . . . . . . . .	 00000004	 DWord
  rcPaint  . . . . . . . . . . .	 00000008	  00000010
  fRestore . . . . . . . . . . .	 00000018	 DWord
  fIncUpdate . . . . . . . . . .	 0000001C	 DWord
  rgbReserved  . . . . . . . . .	 00000020	 Byte
POINT  . . . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
RECT . . . . . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  right  . . . . . . . . . . . .	 00000008	 DWord
  bottom . . . . . . . . . . . .	 0000000C	 DWord
WNDCLASSEX . . . . . . . . . . .	 00000030
  cbSize . . . . . . . . . . . .	 00000000	 DWord
  style  . . . . . . . . . . . .	 00000004	 DWord
  lpfnWndProc  . . . . . . . . .	 00000008	 DWord
  cbClsExtra . . . . . . . . . .	 0000000C	 DWord
  cbWndExtra . . . . . . . . . .	 00000010	 DWord
  hInstance  . . . . . . . . . .	 00000014	 DWord
  hIcon  . . . . . . . . . . . .	 00000018	 DWord
  hCursor  . . . . . . . . . . .	 0000001C	 DWord
  hbrBackground  . . . . . . . .	 00000020	 DWord
  lpszMenuName . . . . . . . . .	 00000024	 DWord
  lpszClassName  . . . . . . . .	 00000028	 DWord
  hIconSm  . . . . . . . . . . .	 0000002C	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_STACK . . . . . . . . . . . . .	32 Bit	 00004694 Para	  Private 'STACK'	 
_TEXT  . . . . . . . . . . . . .	32 Bit	 000054F6 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001B2 Private STDCALL
  bye  . . . . . . . . . . . . .	L Near	 00000007 _TEXT	
  exit_process . . . . . . . . .	L Near	 00000007 _TEXT	
  last_error . . . . . . . . . .	L Near	 0000000E _TEXT	
  icon0  . . . . . . . . . . . .	L Near	 00000031 _TEXT	
  blk0 . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
  map_file . . . . . . . . . . .	L Near	 00000052 _TEXT	
  map_file_ex1 . . . . . . . . .	L Near	 00000093 _TEXT	
  map_file_ex  . . . . . . . . .	L Near	 00000099 _TEXT	
  unmap_file . . . . . . . . . .	L Near	 0000009A _TEXT	
  map_work_files . . . . . . . .	L Near	 000000A1 _TEXT	
  alloc_mem  . . . . . . . . . .	L Near	 000000DE _TEXT	
  alloc_buffers  . . . . . . . .	L Near	 000000F6 _TEXT	
$$$00003 . . . . . . . . . . . .	P Near	 0000021A _TEXT	Length= 000052DC Private STDCALL
  process_messages . . . . . . .	L Near	 0000031E _TEXT	
  process_messages_disp  . . . .	L Near	 00000337 _TEXT	
  process_messages_ex  . . . . .	L Near	 0000034B _TEXT	
  alloc_display  . . . . . . . .	L Near	 00000380 _TEXT	
  draw_display . . . . . . . . .	L Near	 0000044B _TEXT	
  notimpl  . . . . . . . . . . .	L Near	 000004B1 _TEXT	
  fmap . . . . . . . . . . . . .	L Near	 000004BB _TEXT	
  funmap . . . . . . . . . . . .	L Near	 000004D0 _TEXT	
  bload  . . . . . . . . . . . .	L Near	 000004DC _TEXT	
  bload_ex . . . . . . . . . . .	L Near	 0000050C _TEXT	
  dlopen . . . . . . . . . . . .	L Near	 00000510 _TEXT	
  dlimp  . . . . . . . . . . . .	L Near	 00000517 _TEXT	
  outputdebug  . . . . . . . . .	L Near	 00000520 _TEXT	
  warm . . . . . . . . . . . . .	L Near	 0000053B _TEXT	
  _start . . . . . . . . . . . .	L Near	 00000540 _TEXT	
  start  . . . . . . . . . . . .	L Near	 00000540 _TEXT	
  ROUND  . . . . . . . . . . . .	L Near	 000005B4 _TEXT	
  PAAUSE_  . . . . . . . . . . .	L Near	 000005C8 _TEXT	
  unPAAUSE_  . . . . . . . . . .	L Near	 000005DA _TEXT	
  ACT  . . . . . . . . . . . . .	L Near	 000005E5 _TEXT	
  show0  . . . . . . . . . . . .	L Near	 00000606 _TEXT	
  show . . . . . . . . . . . . .	L Near	 0000060C _TEXT	
  c_ . . . . . . . . . . . . . .	L Near	 00000631 _TEXT	
  mark . . . . . . . . . . . . .	L Near	 00000637 _TEXT	
  empty  . . . . . . . . . . . .	L Near	 0000065C _TEXT	
  mFIND  . . . . . . . . . . . .	L Near	 0000068B _TEXT	
  FIND . . . . . . . . . . . . .	L Near	 0000069B _TEXT	
  EX1  . . . . . . . . . . . . .	L Near	 000006AF _TEXT	
  execute  . . . . . . . . . . .	L Near	 000006C9 _TEXT	
  ex2  . . . . . . . . . . . . .	L Near	 000006DF _TEXT	
  ABORT  . . . . . . . . . . . .	L Near	 000006F1 _TEXT	
  ABORT1 . . . . . . . . . . . .	L Near	 0000070C _TEXT	
  sDEFINE  . . . . . . . . . . .	L Near	 00000749 _TEXT	
  MACRO_ . . . . . . . . . . . .	L Near	 00000750 _TEXT	
  macrod . . . . . . . . . . . .	L Near	 00000755 _TEXT	
  FORTH  . . . . . . . . . . . .	L Near	 0000076B _TEXT	
  forthd . . . . . . . . . . . .	L Near	 00000770 _TEXT	
  cdrop  . . . . . . . . . . . .	L Near	 000007CF _TEXT	
  qdup . . . . . . . . . . . . .	L Near	 000007E5 _TEXT	
  cdup . . . . . . . . . . . . .	L Near	 00000800 _TEXT	
  adup . . . . . . . . . . . . .	L Near	 00000818 _TEXT	
  var1 . . . . . . . . . . . . .	L Near	 0000081E _TEXT	
  variable . . . . . . . . . . .	L Near	 0000082B _TEXT	
  cNUM . . . . . . . . . . . . .	L Near	 0000086C _TEXT	
  cSHORT . . . . . . . . . . . .	L Near	 0000087C _TEXT	
  alit . . . . . . . . . . . . .	L Near	 00000893 _TEXT	
  literal  . . . . . . . . . . .	L Near	 0000089D _TEXT	
  qCOMPILE . . . . . . . . . . .	L Near	 000008C8 _TEXT	
  call_  . . . . . . . . . . . .	L Near	 000008F9 _TEXT	
  COMPILE  . . . . . . . . . . .	L Near	 00000918 _TEXT	
  SHORT_ . . . . . . . . . . . .	L Near	 00000936 _TEXT	
  NUM  . . . . . . . . . . . . .	L Near	 00000950 _TEXT	
  comma  . . . . . . . . . . . .	L Near	 00000968 _TEXT	
  comma1 . . . . . . . . . . . .	L Near	 00000984 _TEXT	
  comma2 . . . . . . . . . . . .	L Near	 0000098B _TEXT	
  comma3 . . . . . . . . . . . .	L Near	 00000992 _TEXT	
  semi . . . . . . . . . . . . .	L Near	 00000999 _TEXT	
  then . . . . . . . . . . . . .	L Near	 000009BD _TEXT	
  begin  . . . . . . . . . . . .	L Near	 000009D0 _TEXT	
  here . . . . . . . . . . . . .	L Near	 000009D6 _TEXT	
  qlit . . . . . . . . . . . . .	L Near	 000009E1 _TEXT	
  q1 . . . . . . . . . . . . . .	L Near	 00000A1D _TEXT	
  less . . . . . . . . . . . . .	L Near	 00000A28 _TEXT	
  qIGNORE  . . . . . . . . . . .	L Near	 00000A2F _TEXT	
  nul  . . . . . . . . . . . . .	L Near	 00000A3E _TEXT	
  jump . . . . . . . . . . . . .	L Near	 00000A3F _TEXT	
  LOAD . . . . . . . . . . . . .	L Near	 00000A4C _TEXT	
  INTER  . . . . . . . . . . . .	L Near	 00000A61 _TEXT	
  erase  . . . . . . . . . . . .	L Near	 0000418C _TEXT	
  copy . . . . . . . . . . . . .	L Near	 000041A8 _TEXT	
  move . . . . . . . . . . . . .	L Near	 000041E1 _TEXT	
  debug  . . . . . . . . . . . .	L Near	 000041F3 _TEXT	
  ffw  . . . . . . . . . . . . .	L Near	 00004234 _TEXT	
  itick_ . . . . . . . . . . . .	L Near	 00004248 _TEXT	
  nc_  . . . . . . . . . . . . .	L Near	 0000426C _TEXT	
  xy_  . . . . . . . . . . . . .	L Near	 0000427A _TEXT	
  fov_ . . . . . . . . . . . . .	L Near	 00004288 _TEXT	
  sps  . . . . . . . . . . . . .	L Near	 00004296 _TEXT	
  last_  . . . . . . . . . . . .	L Near	 000042A4 _TEXT	
  h_ . . . . . . . . . . . . . .	L Near	 000042B2 _TEXT	
  cad_ . . . . . . . . . . . . .	L Near	 000042C0 _TEXT	
  pcad_  . . . . . . . . . . . .	L Near	 000042CE _TEXT	
  display_ . . . . . . . . . . .	L Near	 000042DC _TEXT	
  ekt_ . . . . . . . . . . . . .	L Near	 000042EA _TEXT	
  blk_ . . . . . . . . . . . . .	L Near	 000042F8 _TEXT	
  cpoint_  . . . . . . . . . . .	L Near	 00004306 _TEXT	
  curs_  . . . . . . . . . . . .	L Near	 00004314 _TEXT	
  offset_  . . . . . . . . . . .	L Near	 00004322 _TEXT	
  wordsn_  . . . . . . . . . . .	L Near	 00004330 _TEXT	
  rgb  . . . . . . . . . . . . .	L Near	 00004350 _TEXT	
  white  . . . . . . . . . . . .	L Near	 00004366 _TEXT	
  color  . . . . . . . . . . . .	L Near	 00004370 _TEXT	
  fifof  . . . . . . . . . . . .	L Near	 0000437C _TEXT	
  graphic  . . . . . . . . . . .	L Near	 0000437D _TEXT	
  switch . . . . . . . . . . . .	L Near	 0000437E _TEXT	
  clip . . . . . . . . . . . . .	L Near	 00004388 _TEXT	
  bit16  . . . . . . . . . . . .	L Near	 000043C0 _TEXT	
  b16  . . . . . . . . . . . . .	L Near	 000043C9 _TEXT	
  bit32  . . . . . . . . . . . .	L Near	 000043D8 _TEXT	
  b32  . . . . . . . . . . . . .	L Near	 000043E1 _TEXT	
  emit . . . . . . . . . . . . .	L Near	 00004401 _TEXT	
  BL_  . . . . . . . . . . . . .	L Near	 00004437 _TEXT	
  SPACE  . . . . . . . . . . . .	L Near	 00004438 _TEXT	
  emit2  . . . . . . . . . . . .	L Near	 00004443 _TEXT	
  text1  . . . . . . . . . . . .	L Near	 00004480 _TEXT	
  line . . . . . . . . . . . . .	L Near	 0000449E _TEXT	
  box  . . . . . . . . . . . . .	L Near	 000044BC _TEXT	
  no . . . . . . . . . . . . . .	L Near	 00004508 _TEXT	
  CYAN . . . . . . . . . . . . .	L Near	 0000450B _TEXT	
  MAGENTA  . . . . . . . . . . .	L Near	 0000451A _TEXT	
  SILVER . . . . . . . . . . . .	L Near	 00004529 _TEXT	
  BLUE . . . . . . . . . . . . .	L Near	 00004538 _TEXT	
  RED  . . . . . . . . . . . . .	L Near	 00004547 _TEXT	
  GREEN  . . . . . . . . . . . .	L Near	 00004556 _TEXT	
  ECHO_  . . . . . . . . . . . .	L Near	 00004570 _TEXT	
  RIGHT  . . . . . . . . . . . .	L Near	 00004589 _TEXT	
  DOWN . . . . . . . . . . . . .	L Near	 0000459F _TEXT	
  ZERO . . . . . . . . . . . . .	L Near	 000045BB _TEXT	
  blank  . . . . . . . . . . . .	L Near	 000045C6 _TEXT	
  TOP  . . . . . . . . . . . . .	L Near	 000045F0 _TEXT	
  qcr  . . . . . . . . . . . . .	L Near	 00004609 _TEXT	
  cr . . . . . . . . . . . . . .	L Near	 00004619 _TEXT	
  LMs  . . . . . . . . . . . . .	L Near	 00004633 _TEXT	
  RMs  . . . . . . . . . . . . .	L Near	 0000463A _TEXT	
  at . . . . . . . . . . . . . .	L Near	 00004641 _TEXT	
  pAT  . . . . . . . . . . . . .	L Near	 00004650 _TEXT	
  octant . . . . . . . . . . . .	L Near	 00004661 _TEXT	
  EIGHT  . . . . . . . . . . . .	L Near	 00004680 _TEXT	
  FOUR . . . . . . . . . . . . .	L Near	 00004690 _TEXT	
  FOUR1  . . . . . . . . . . . .	L Near	 00004695 _TEXT	
  stack  . . . . . . . . . . . .	L Near	 000046AB _TEXT	
  KEYBOARD . . . . . . . . . . .	L Near	 000046CC _TEXT	
  LETTER . . . . . . . . . . . .	L Near	 000047C6 _TEXT	
  CMLETTER . . . . . . . . . . .	L Near	 000047D5 _TEXT	
  QWLETTER . . . . . . . . . . .	L Near	 000047DE _TEXT	
  QWDECODE . . . . . . . . . . .	L Near	 0000482D _TEXT	
  QWADJUST . . . . . . . . . . .	L Near	 00004843 _TEXT	
  qwerty . . . . . . . . . . . .	L Near	 0000489F _TEXT	
  wkey . . . . . . . . . . . . .	L Near	 000048D0 _TEXT	
  wkey1  . . . . . . . . . . . .	L Near	 000048F8 _TEXT	
  wkeyex . . . . . . . . . . . .	L Near	 0000495A _TEXT	
  KEY  . . . . . . . . . . . . .	L Near	 0000497A _TEXT	
  nul0 . . . . . . . . . . . . .	L Near	 00004A40 _TEXT	
  ACCEPT . . . . . . . . . . . .	L Near	 00004A43 _TEXT	
  acceptn  . . . . . . . . . . .	L Near	 00004A43 _TEXT	
  ACCEPT1  . . . . . . . . . . .	L Near	 00004A53 _TEXT	
  PACK . . . . . . . . . . . . .	L Near	 00004A77 _TEXT	
  LJ0  . . . . . . . . . . . . .	L Near	 00004AA3 _TEXT	
  LJ . . . . . . . . . . . . . .	L Near	 00004AAF _TEXT	
  FULL . . . . . . . . . . . . .	L Near	 00004AB6 _TEXT	
  X  . . . . . . . . . . . . . .	L Near	 00004AD6 _TEXT	
  WORD_  . . . . . . . . . . . .	L Near	 00004AE9 _TEXT	
  WORD1  . . . . . . . . . . . .	L Near	 00004B14 _TEXT	
  WORD0  . . . . . . . . . . . .	L Near	 00004B3D _TEXT	
  decimal  . . . . . . . . . . .	L Near	 00004B45 _TEXT	
  hex  . . . . . . . . . . . . .	L Near	 00004B64 _TEXT	
  octal  . . . . . . . . . . . .	L Near	 00004B83 _TEXT	
  Xn . . . . . . . . . . . . . .	L Near	 00004BA6 _TEXT	
  MINUS  . . . . . . . . . . . .	L Near	 00004BCC _TEXT	
  NUMBER0  . . . . . . . . . . .	L Near	 00004BD3 _TEXT	
  NUMBER . . . . . . . . . . . .	L Near	 00004BD6 _TEXT	
  NUMBER3  . . . . . . . . . . .	L Near	 00004BE5 _TEXT	
  NUMBER2  . . . . . . . . . . .	L Near	 00004C1C _TEXT	
  ENDN . . . . . . . . . . . . .	L Near	 00004C29 _TEXT	
  ALPHn  . . . . . . . . . . . .	L Near	 00004C35 _TEXT	
  ALPH0  . . . . . . . . . . . .	L Near	 00004C36 _TEXT	
  STAR0  . . . . . . . . . . . .	L Near	 00004C48 _TEXT	
  ALPH . . . . . . . . . . . . .	L Near	 00004C5E _TEXT	
  GRAPH  . . . . . . . . . . . .	L Near	 00004C70 _TEXT	
  first  . . . . . . . . . . . .	L Near	 00004C8B _TEXT	
  eDIG1  . . . . . . . . . . . .	L Near	 00004CB2 _TEXT	
  eDIG . . . . . . . . . . . . .	L Near	 00004CB7 _TEXT	
  oDIG . . . . . . . . . . . . .	L Near	 00004CC5 _TEXT	
  hdotn  . . . . . . . . . . . .	L Near	 00004CD1 _TEXT	
  hdot . . . . . . . . . . . . .	L Near	 00004CE3 _TEXT	
  dot  . . . . . . . . . . . . .	L Near	 00004CF7 _TEXT	
  @h1  . . . . . . . . . . . . .	L Near	 00004D0D _TEXT	
  @h . . . . . . . . . . . . . .	L Near	 00004D1C _TEXT	
  qdot . . . . . . . . . . . . .	L Near	 00004D1F _TEXT	
  dot10  . . . . . . . . . . . .	L Near	 00004D28 _TEXT	
  D_1  . . . . . . . . . . . . .	L Near	 00004D63 _TEXT	
  D_2  . . . . . . . . . . . . .	L Near	 00004D6B _TEXT	
  unPACK . . . . . . . . . . . .	L Near	 00004D79 _TEXT	
  qRING  . . . . . . . . . . . .	L Near	 00004DA8 _TEXT	
  RING . . . . . . . . . . . . .	L Near	 00004DD4 _TEXT	
  rW . . . . . . . . . . . . . .	L Near	 00004E1D _TEXT	
  gW . . . . . . . . . . . . . .	L Near	 00004E3C _TEXT	
  mW . . . . . . . . . . . . . .	L Near	 00004E46 _TEXT	
  wW . . . . . . . . . . . . . .	L Near	 00004E50 _TEXT	
  type0  . . . . . . . . . . . .	L Near	 00004E61 _TEXT	
  Cap  . . . . . . . . . . . . .	L Near	 00004E90 _TEXT	
  CAPS . . . . . . . . . . . . .	L Near	 00004EB2 _TEXT	
  text . . . . . . . . . . . . .	L Near	 00004ED6 _TEXT	
  TYPE_  . . . . . . . . . . . .	L Near	 00004EDB _TEXT	
  type1  . . . . . . . . . . . .	L Near	 00004EDB _TEXT	
  type2  . . . . . . . . . . . .	L Near	 00004EEA _TEXT	
  gsW  . . . . . . . . . . . . .	L Near	 00004F00 _TEXT	
  var  . . . . . . . . . . . . .	L Near	 00004F0C _TEXT	
  gnW  . . . . . . . . . . . . .	L Near	 00004F16 _TEXT	
  gnW1 . . . . . . . . . . . . .	L Near	 00004F1E _TEXT	
  sW . . . . . . . . . . . . . .	L Near	 00004F3B _TEXT	
  nW . . . . . . . . . . . . . .	L Near	 00004F47 _TEXT	
  nW1  . . . . . . . . . . . . .	L Near	 00004F4F _TEXT	
  siW  . . . . . . . . . . . . .	L Near	 00004F7C _TEXT	
  REFRESH  . . . . . . . . . . .	L Near	 00004FA7 _TEXT	
  ref1 . . . . . . . . . . . . .	L Near	 00004FEB _TEXT	
  act1 . . . . . . . . . . . . .	L Near	 00005181 _TEXT	
  act3 . . . . . . . . . . . . .	L Near	 00005185 _TEXT	
  act4 . . . . . . . . . . . . .	L Near	 00005189 _TEXT	
  act9 . . . . . . . . . . . . .	L Near	 0000518D _TEXT	
  act10  . . . . . . . . . . . .	L Near	 00005191 _TEXT	
  act11  . . . . . . . . . . . .	L Near	 00005195 _TEXT	
  actA . . . . . . . . . . . . .	L Near	 00005199 _TEXT	
  actB . . . . . . . . . . . . .	L Near	 0000519D _TEXT	
  act7 . . . . . . . . . . . . .	L Near	 000051A1 _TEXT	
  actn . . . . . . . . . . . . .	L Near	 000051B9 _TEXT	
  actv . . . . . . . . . . . . .	L Near	 000051C5 _TEXT	
  mcur . . . . . . . . . . . . .	L Near	 000051EF _TEXT	
  pcur . . . . . . . . . . . . .	L Near	 000051F7 _TEXT	
  mmcur  . . . . . . . . . . . .	L Near	 000051FE _TEXT	
  ppcur  . . . . . . . . . . . .	L Near	 00005212 _TEXT	
  pblk . . . . . . . . . . . . .	L Near	 0000521A _TEXT	
  mblk . . . . . . . . . . . . .	L Near	 00005225 _TEXT	
  shadow . . . . . . . . . . . .	L Near	 00005239 _TEXT	
  actoblk  . . . . . . . . . . .	L Near	 00005244 _TEXT	
  E0 . . . . . . . . . . . . . .	L Near	 00005257 _TEXT	
  edit . . . . . . . . . . . . .	L Near	 0000525A _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 00005260 _TEXT	
  eout . . . . . . . . . . . . .	L Near	 000052BC _TEXT	
  destack  . . . . . . . . . . .	L Near	 00005301 _TEXT	
  insert0  . . . . . . . . . . .	L Near	 00005332 _TEXT	
  insert1  . . . . . . . . . . .	L Near	 00005357 _TEXT	
  insert . . . . . . . . . . . .	L Near	 00005399 _TEXT	
  get1word . . . . . . . . . . .	L Near	 000053C1 _TEXT	
  a_1word_ . . . . . . . . . . .	L Near	 000053D2 _TEXT	
  FORMAT . . . . . . . . . . . .	L Near	 000053E1 _TEXT	
  FORMAT2  . . . . . . . . . . .	L Near	 00005428 _TEXT	
  DEL  . . . . . . . . . . . . .	L Near	 00005459 _TEXT	
  enstack  . . . . . . . . . . .	L Near	 00005481 _TEXT	
  ens  . . . . . . . . . . . . .	L Near	 000054BA _TEXT	
  pad  . . . . . . . . . . . . .	L Near	 000054BC _TEXT	
  code_end . . . . . . . . . . .	L Near	 000054F6 _TEXT	
BeginPaint . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateCompatibleDC . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateDIBSection . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileMappingA . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateWindowExA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DefWindowProcA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DispatchMessageA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EndPaint . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDC  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMessageA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetModuleHandleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcAddress . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InvalidateRect . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadCursorA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadIconA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadLibraryA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MapViewOfFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MapVirtualKeyA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputDebugStringA . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekMessageA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RegisterClassExA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowWindow . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StretchDIBits  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TranslateMessage . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnmapViewOfFile  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateWindow . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
VirtualAlloc . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wnd_proc . . . . . . . . . . . .	P Near	 000001B2 _TEXT	Length= 00000068 Public STDCALL
  hWnd . . . . . . . . . . . . .	DWord	 bp + 00000008
  uMsg . . . . . . . . . . . . .	DWord	 bp + 0000000C
  wParam . . . . . . . . . . . .	DWord	 bp + 00000010
  lParam . . . . . . . . . . . .	DWord	 bp + 00000014
  wnd_proc_ex  . . . . . . . . .	L Near	 00000211 _TEXT	
  wnd_proc_exx . . . . . . . . .	L Near	 00000216 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@h1  . . . . . . . . . . . . . .	L Near	 00004D0D _TEXT	
@h . . . . . . . . . . . . . . .	L Near	 00004D1C _TEXT	
@stack . . . . . . . . . . . . .	Text   	 FLAT
ABORT1 . . . . . . . . . . . . .	L Near	 0000070C _TEXT	
ABORT  . . . . . . . . . . . . .	L Near	 000006F1 _TEXT	
ACCEPT1  . . . . . . . . . . . .	L Near	 00004A53 _TEXT	
ACCEPT . . . . . . . . . . . . .	L Near	 00004A43 _TEXT	
ACT  . . . . . . . . . . . . . .	L Near	 000005E5 _TEXT	
ALPH0  . . . . . . . . . . . . .	L Near	 00004C36 _TEXT	
ALPHn  . . . . . . . . . . . . .	L Near	 00004C35 _TEXT	
ALPH . . . . . . . . . . . . . .	L Near	 00004C5E _TEXT	
BLUE . . . . . . . . . . . . . .	L Near	 00004538 _TEXT	
BL_  . . . . . . . . . . . . . .	L Near	 00004437 _TEXT	
CAPS . . . . . . . . . . . . . .	L Near	 00004EB2 _TEXT	
CMLETTER . . . . . . . . . . . .	L Near	 000047D5 _TEXT	
COMPILE  . . . . . . . . . . . .	L Near	 00000918 _TEXT	
CYAN . . . . . . . . . . . . . .	L Near	 0000450B _TEXT	
Cap  . . . . . . . . . . . . . .	L Near	 00004E90 _TEXT	
DEL  . . . . . . . . . . . . . .	L Near	 00005459 _TEXT	
DOWN . . . . . . . . . . . . . .	L Near	 0000459F _TEXT	
D_1  . . . . . . . . . . . . . .	L Near	 00004D63 _TEXT	
D_2  . . . . . . . . . . . . . .	L Near	 00004D6B _TEXT	
E0 . . . . . . . . . . . . . . .	L Near	 00005257 _TEXT	
ECHO_  . . . . . . . . . . . . .	L Near	 00004570 _TEXT	
EIGHT  . . . . . . . . . . . . .	L Near	 00004680 _TEXT	
ENDN . . . . . . . . . . . . . .	L Near	 00004C29 _TEXT	
EX1  . . . . . . . . . . . . . .	L Near	 000006AF _TEXT	
E  . . . . . . . . . . . . . . .	L Near	 00005260 _TEXT	
FIND . . . . . . . . . . . . . .	L Near	 0000069B _TEXT	
FORMAT2  . . . . . . . . . . . .	L Near	 00005428 _TEXT	
FORMAT . . . . . . . . . . . . .	L Near	 000053E1 _TEXT	
FORTH  . . . . . . . . . . . . .	L Near	 0000076B _TEXT	
FOUR1  . . . . . . . . . . . . .	L Near	 00004695 _TEXT	
FOUR . . . . . . . . . . . . . .	L Near	 00004690 _TEXT	
FULL . . . . . . . . . . . . . .	L Near	 00004AB6 _TEXT	
GRAPH  . . . . . . . . . . . . .	L Near	 00004C70 _TEXT	
GREEN  . . . . . . . . . . . . .	L Near	 00004556 _TEXT	
Godd_size  . . . . . . . . . . .	Number	 00000BB8h   
Godd . . . . . . . . . . . . . .	Number	 00003A98h   
Gods . . . . . . . . . . . . . .	Number	 00004650h   
God  . . . . . . . . . . . . . .	DWord	 000005B9 _TEXT	
H  . . . . . . . . . . . . . . .	DWord	 00000AC8 _TEXT	
INTER  . . . . . . . . . . . . .	L Near	 00000A61 _TEXT	
KEYBOARD . . . . . . . . . . . .	L Near	 000046CC _TEXT	
KEY  . . . . . . . . . . . . . .	L Near	 0000497A _TEXT	
LETTER . . . . . . . . . . . . .	L Near	 000047C6 _TEXT	
LJ0  . . . . . . . . . . . . . .	L Near	 00004AA3 _TEXT	
LJ . . . . . . . . . . . . . . .	L Near	 00004AAF _TEXT	
LMs  . . . . . . . . . . . . . .	L Near	 00004633 _TEXT	
LOAD . . . . . . . . . . . . . .	L Near	 00000A4C _TEXT	
MACRO_ . . . . . . . . . . . . .	L Near	 00000750 _TEXT	
MAGENTA  . . . . . . . . . . . .	L Near	 0000451A _TEXT	
MINUS  . . . . . . . . . . . . .	L Near	 00004BCC _TEXT	
NUMBER0  . . . . . . . . . . . .	L Near	 00004BD3 _TEXT	
NUMBER2  . . . . . . . . . . . .	L Near	 00004C1C _TEXT	
NUMBER3  . . . . . . . . . . . .	L Near	 00004BE5 _TEXT	
NUMBER . . . . . . . . . . . . .	L Near	 00004BD6 _TEXT	
NUM  . . . . . . . . . . . . . .	L Near	 00000950 _TEXT	
PAAUSE_  . . . . . . . . . . . .	L Near	 000005C8 _TEXT	
PACK . . . . . . . . . . . . . .	L Near	 00004A77 _TEXT	
QWADJUST . . . . . . . . . . . .	L Near	 00004843 _TEXT	
QWDECODE . . . . . . . . . . . .	L Near	 0000482D _TEXT	
QWLETTER . . . . . . . . . . . .	L Near	 000047DE _TEXT	
RED  . . . . . . . . . . . . . .	L Near	 00004547 _TEXT	
REFRESH  . . . . . . . . . . . .	L Near	 00004FA7 _TEXT	
RIGHT  . . . . . . . . . . . . .	L Near	 00004589 _TEXT	
RING . . . . . . . . . . . . . .	L Near	 00004DD4 _TEXT	
RMs  . . . . . . . . . . . . . .	L Near	 0000463A _TEXT	
ROUND  . . . . . . . . . . . . .	L Near	 000005B4 _TEXT	
SHORT_ . . . . . . . . . . . . .	L Near	 00000936 _TEXT	
SILVER . . . . . . . . . . . . .	L Near	 00004529 _TEXT	
SPACE  . . . . . . . . . . . . .	L Near	 00004438 _TEXT	
STAR0  . . . . . . . . . . . . .	L Near	 00004C48 _TEXT	
TOP  . . . . . . . . . . . . . .	L Near	 000045F0 _TEXT	
TYPE_  . . . . . . . . . . . . .	L Near	 00004EDB _TEXT	
WORD0  . . . . . . . . . . . . .	L Near	 00004B3D _TEXT	
WORD1  . . . . . . . . . . . . .	L Near	 00004B14 _TEXT	
WORD_  . . . . . . . . . . . . .	L Near	 00004AE9 _TEXT	
Xn . . . . . . . . . . . . . . .	L Near	 00004BA6 _TEXT	
X  . . . . . . . . . . . . . . .	L Near	 00004AD6 _TEXT	
ZERO . . . . . . . . . . . . . .	L Near	 000045BB _TEXT	
_IObuff  . . . . . . . . . . . .	Byte	 00000171 _TEXT	
_start . . . . . . . . . . . . .	L Near	 00000540 _TEXT	Public STDCALL
aDEFINE  . . . . . . . . . . . .	DWord	 00000A84 _TEXT	
a_1word_ . . . . . . . . . . . .	L Near	 000053D2 _TEXT	
acceptn  . . . . . . . . . . . .	L Near	 00004A43 _TEXT	
act10  . . . . . . . . . . . . .	L Near	 00005191 _TEXT	
act11  . . . . . . . . . . . . .	L Near	 00005195 _TEXT	
act1 . . . . . . . . . . . . . .	L Near	 00005181 _TEXT	
act3 . . . . . . . . . . . . . .	L Near	 00005185 _TEXT	
act4 . . . . . . . . . . . . . .	L Near	 00005189 _TEXT	
act7 . . . . . . . . . . . . . .	L Near	 000051A1 _TEXT	
act9 . . . . . . . . . . . . . .	L Near	 0000518D _TEXT	
actA . . . . . . . . . . . . . .	L Near	 00005199 _TEXT	
actB . . . . . . . . . . . . . .	L Near	 0000519D _TEXT	
actc . . . . . . . . . . . . . .	DWord	 00005144 _TEXT	
action . . . . . . . . . . . . .	Byte	 00005180 _TEXT	
actn . . . . . . . . . . . . . .	L Near	 000051B9 _TEXT	
actoblk  . . . . . . . . . . . .	L Near	 00005244 _TEXT	
actv . . . . . . . . . . . . . .	L Near	 000051C5 _TEXT	
adup . . . . . . . . . . . . . .	L Near	 00000818 _TEXT	
alit . . . . . . . . . . . . . .	L Near	 00000893 _TEXT	
alloc_buffers  . . . . . . . . .	L Near	 000000F6 _TEXT	
alloc_display  . . . . . . . . .	L Near	 00000380 _TEXT	
alloc_mem  . . . . . . . . . . .	L Near	 000000DE _TEXT	
alloc_window . . . . . . . . . .	L Near	 0000021A _TEXT	
alpha0 . . . . . . . . . . . . .	DWord	 000049CC _TEXT	
alpha1 . . . . . . . . . . . . .	DWord	 000049E0 _TEXT	
alpha  . . . . . . . . . . . . .	Byte	 00004766 _TEXT	
anumber  . . . . . . . . . . . .	DWord	 00004A38 _TEXT	
area_size  . . . . . . . . . . .	Number	 00004650h   
at . . . . . . . . . . . . . . .	L Near	 00004641 _TEXT	
aword  . . . . . . . . . . . . .	DWord	 00004A34 _TEXT	
b16  . . . . . . . . . . . . . .	L Near	 000043C9 _TEXT	
b32  . . . . . . . . . . . . . .	L Near	 000043E1 _TEXT	
base . . . . . . . . . . . . . .	DWord	 00004A24 _TEXT	
bas  . . . . . . . . . . . . . .	DWord	 00005090 _TEXT	
begin  . . . . . . . . . . . . .	L Near	 000009D0 _TEXT	
bit16  . . . . . . . . . . . . .	L Near	 000043C0 _TEXT	
bit32  . . . . . . . . . . . . .	L Near	 000043D8 _TEXT	
bits . . . . . . . . . . . . . .	Byte	 00004A6F _TEXT	
blank  . . . . . . . . . . . . .	L Near	 000045C6 _TEXT	
blk0 . . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
blk_ . . . . . . . . . . . . . .	L Near	 000042F8 _TEXT	
blk  . . . . . . . . . . . . . .	DWord	 00005094 _TEXT	
bload_ex . . . . . . . . . . . .	L Near	 0000050C _TEXT	
bload  . . . . . . . . . . . . .	L Near	 000004DC _TEXT	
blocks_adr . . . . . . . . . . .	DWord	 0000002D _TEXT	
blocks_file  . . . . . . . . . .	Byte	 0000001E _TEXT	
bmih . . . . . . . . . . . . . .	BITMAPINFOHEADER  0000034C _TEXT	
board  . . . . . . . . . . . . .	DWord	 00004A1C _TEXT	
box  . . . . . . . . . . . . . .	L Near	 000044BC _TEXT	
bpc  . . . . . . . . . . . . . .	Number	 00000002h   
bye  . . . . . . . . . . . . . .	L Near	 00000007 _TEXT	
cNUM . . . . . . . . . . . . . .	L Near	 0000086C _TEXT	
cSHORT . . . . . . . . . . . . .	L Near	 0000087C _TEXT	
c_ . . . . . . . . . . . . . . .	L Near	 00000631 _TEXT	
cad_ . . . . . . . . . . . . . .	L Near	 000042C0 _TEXT	
cad  . . . . . . . . . . . . . .	DWord	 000050A4 _TEXT	
call_  . . . . . . . . . . . . .	L Near	 000008F9 _TEXT	
cdrop  . . . . . . . . . . . . .	L Near	 000007CF _TEXT	
cdup . . . . . . . . . . . . . .	L Near	 00000800 _TEXT	
chars  . . . . . . . . . . . . .	DWord	 00004A30 _TEXT	
class  . . . . . . . . . . . . .	DWord	 00000AD0 _TEXT	
clip . . . . . . . . . . . . . .	L Near	 00004388 _TEXT	
code_begin . . . . . . . . . . .	L Near	 00000000 _TEXT	
code_end . . . . . . . . . . . .	L Near	 000054F6 _TEXT	
color  . . . . . . . . . . . . .	L Near	 00004370 _TEXT	
comma1 . . . . . . . . . . . . .	L Near	 00000984 _TEXT	
comma2 . . . . . . . . . . . . .	L Near	 0000098B _TEXT	
comma3 . . . . . . . . . . . . .	L Near	 00000992 _TEXT	
comma  . . . . . . . . . . . . .	L Near	 00000968 _TEXT	
copy . . . . . . . . . . . . . .	L Near	 000041A8 _TEXT	
cpoint_  . . . . . . . . . . . .	L Near	 00004306 _TEXT	
cpoint . . . . . . . . . . . . .	DWord	 000050B0 _TEXT	
cr . . . . . . . . . . . . . . .	L Near	 00004619 _TEXT	
current  . . . . . . . . . . . .	DWord	 00004A28 _TEXT	
curs_  . . . . . . . . . . . . .	L Near	 00004314 _TEXT	
curs . . . . . . . . . . . . . .	DWord	 000050A0 _TEXT	
debug  . . . . . . . . . . . . .	L Near	 000041F3 _TEXT	
decimal  . . . . . . . . . . . .	L Near	 00004B45 _TEXT	
destack  . . . . . . . . . . . .	L Near	 00005301 _TEXT	
digit  . . . . . . . . . . . . .	Byte	 00004BAD _TEXT	
display_ . . . . . . . . . . . .	L Near	 000042DC _TEXT	
display  . . . . . . . . . . . .	DWord	 0000502C _TEXT	
dlimp  . . . . . . . . . . . . .	L Near	 00000517 _TEXT	
dlopen . . . . . . . . . . . . .	L Near	 00000510 _TEXT	
dot10  . . . . . . . . . . . . .	L Near	 00004D28 _TEXT	
dot  . . . . . . . . . . . . . .	L Near	 00004CF7 _TEXT	
draw_display . . . . . . . . . .	L Near	 0000044B _TEXT	
dummyio  . . . . . . . . . . . .	Byte	 000001B1 _TEXT	
dummy  . . . . . . . . . . . . .	DWord	 00004690 _STACK	
eDIG1  . . . . . . . . . . . . .	L Near	 00004CB2 _TEXT	
eDIG . . . . . . . . . . . . . .	L Near	 00004CB7 _TEXT	
edit . . . . . . . . . . . . . .	L Near	 0000525A _TEXT	
ekbd0  . . . . . . . . . . . . .	DWord	 00005118 _TEXT	
ekbd . . . . . . . . . . . . . .	Byte	 0000512C _TEXT	
ekeys  . . . . . . . . . . . . .	DWord	 000050B8 _TEXT	
ekt_ . . . . . . . . . . . . . .	L Near	 000042EA _TEXT	
emit2  . . . . . . . . . . . . .	L Near	 00004443 _TEXT	
emit . . . . . . . . . . . . . .	L Near	 00004401 _TEXT	
empty  . . . . . . . . . . . . .	L Near	 0000065C _TEXT	
enstack  . . . . . . . . . . . .	L Near	 00005481 _TEXT	
ens  . . . . . . . . . . . . . .	L Near	 000054BA _TEXT	
eout . . . . . . . . . . . . . .	L Near	 000052BC _TEXT	
erase  . . . . . . . . . . . . .	L Near	 0000418C _TEXT	
ex2  . . . . . . . . . . . . . .	L Near	 000006DF _TEXT	
execute  . . . . . . . . . . . .	L Near	 000006C9 _TEXT	
exit_process . . . . . . . . . .	L Near	 00000007 _TEXT	
fail_process . . . . . . . . . .	L Near	 00000000 _TEXT	
ffw  . . . . . . . . . . . . . .	L Near	 00004234 _TEXT	
fifof  . . . . . . . . . . . . .	L Near	 0000437C _TEXT	
first  . . . . . . . . . . . . .	L Near	 00004C8B _TEXT	
fmap . . . . . . . . . . . . . .	L Near	 000004BB _TEXT	
fname  . . . . . . . . . . . . .	DWord	 000004B6 _TEXT	
fore . . . . . . . . . . . . . .	DWord	 00004344 _TEXT	
forth0 . . . . . . . . . . . . .	DWord	 00000CFC _TEXT	
forth1 . . . . . . . . . . . . .	DWord	 00000E38 _TEXT	
forth2 . . . . . . . . . . . . .	DWord	 00003850 _TEXT	
forthd . . . . . . . . . . . . .	L Near	 00000770 _TEXT	
forths . . . . . . . . . . . . .	DWord	 00000AE0 _TEXT	
fov_ . . . . . . . . . . . . . .	L Near	 00004288 _TEXT	
fov  . . . . . . . . . . . . . .	DWord	 00004268 _TEXT	
frame  . . . . . . . . . . . . .	DWord	 00004340 _TEXT	
funmap . . . . . . . . . . . . .	L Near	 000004D0 _TEXT	
gW . . . . . . . . . . . . . . .	L Near	 00004E3C _TEXT	
gap_size . . . . . . . . . . . .	Number	 00000BB8h   
get1word . . . . . . . . . . . .	L Near	 000053C1 _TEXT	
gnW1 . . . . . . . . . . . . . .	L Near	 00004F1E _TEXT	
gnW  . . . . . . . . . . . . . .	L Near	 00004F16 _TEXT	
graph0 . . . . . . . . . . . . .	DWord	 000049A4 _TEXT	
graph1 . . . . . . . . . . . . .	DWord	 000049B8 _TEXT	
graphics . . . . . . . . . . . .	Byte	 0000477E _TEXT	
graphic  . . . . . . . . . . . .	L Near	 0000437D _TEXT	
gsW  . . . . . . . . . . . . . .	L Near	 00004F00 _TEXT	
h_ . . . . . . . . . . . . . . .	L Near	 000042B2 _TEXT	
hbmpframe  . . . . . . . . . . .	DWord	 00000378 _TEXT	
hcurmain . . . . . . . . . . . .	DWord	 0000013E _TEXT	
hc . . . . . . . . . . . . . . .	Number	 0000002Eh   
hdcdesktop . . . . . . . . . . .	DWord	 00000374 _TEXT	
hdcframe . . . . . . . . . . . .	DWord	 0000037C _TEXT	
hdcpaint . . . . . . . . . . . .	DWord	 00000447 _TEXT	
hdotn  . . . . . . . . . . . . .	L Near	 00004CD1 _TEXT	
hdot . . . . . . . . . . . . . .	L Near	 00004CE3 _TEXT	
here . . . . . . . . . . . . . .	L Near	 000009D6 _TEXT	
hex  . . . . . . . . . . . . . .	L Near	 00004B64 _TEXT	
hiconmain  . . . . . . . . . . .	DWord	 0000013A _TEXT	
hicon  . . . . . . . . . . . . .	Byte	 00004CA2 _TEXT	
history  . . . . . . . . . . . .	Byte	 00004565 _TEXT	
hmodule  . . . . . . . . . . . .	DWord	 00000136 _TEXT	
hp . . . . . . . . . . . . . . .	Number	 00000400h   
hwndmain . . . . . . . . . . . .	DWord	 00000142 _TEXT	
icon0  . . . . . . . . . . . . .	L Near	 00000031 _TEXT	
icons_adr  . . . . . . . . . . .	DWord	 00000029 _TEXT	
icons_file . . . . . . . . . . .	Byte	 00000014 _TEXT	
ih . . . . . . . . . . . . . . .	Number	 0000001Eh   
insert0  . . . . . . . . . . . .	L Near	 00005332 _TEXT	
insert1  . . . . . . . . . . . .	L Near	 00005357 _TEXT	
insert . . . . . . . . . . . . .	L Near	 00005399 _TEXT	
isqwerty . . . . . . . . . . . .	Byte	 0000485F _TEXT	
itick_ . . . . . . . . . . . . .	L Near	 00004248 _TEXT	
iw . . . . . . . . . . . . . . .	Number	 00000016h   
jump . . . . . . . . . . . . . .	L Near	 00000A3F _TEXT	
keyc . . . . . . . . . . . . . .	DWord	 00004A2C _TEXT	
keys . . . . . . . . . . . . . .	Byte	 000048A6 _TEXT	
last_error . . . . . . . . . . .	L Near	 0000000E _TEXT	
last_  . . . . . . . . . . . . .	L Near	 000042A4 _TEXT	
last . . . . . . . . . . . . . .	DWord	 00000ACC _TEXT	
lcad . . . . . . . . . . . . . .	DWord	 000050AC _TEXT	
less . . . . . . . . . . . . . .	L Near	 00000A28 _TEXT	
line . . . . . . . . . . . . . .	L Near	 0000449E _TEXT	
list . . . . . . . . . . . . . .	DWord	 00000AD4 _TEXT	
literal  . . . . . . . . . . . .	L Near	 0000089D _TEXT	
lit  . . . . . . . . . . . . . .	DWord	 00000AB8 _TEXT	
lm . . . . . . . . . . . . . . .	DWord	 0000425C _TEXT	
mFIND  . . . . . . . . . . . . .	L Near	 0000068B _TEXT	
mW . . . . . . . . . . . . . . .	L Near	 00004E46 _TEXT	
macro0 . . . . . . . . . . . . .	DWord	 00000AE4 _TEXT	
macro1 . . . . . . . . . . . . .	DWord	 00000AFC _TEXT	
macro2 . . . . . . . . . . . . .	DWord	 00003638 _TEXT	
macrod . . . . . . . . . . . . .	L Near	 00000755 _TEXT	
macros . . . . . . . . . . . . .	DWord	 00000ADC _TEXT	
maind_size . . . . . . . . . . .	Number	 00000BB8h   
maind  . . . . . . . . . . . . .	Number	 00001770h   
mains_size . . . . . . . . . . .	Number	 00001770h   
mains  . . . . . . . . . . . . .	Number	 00002328h   
main . . . . . . . . . . . . . .	DWord	 000005C2 _TEXT	
map_file_ex1 . . . . . . . . . .	L Near	 00000093 _TEXT	
map_file_ex  . . . . . . . . . .	L Near	 00000099 _TEXT	
map_file . . . . . . . . . . . .	L Near	 00000052 _TEXT	
map_work_files . . . . . . . . .	L Near	 000000A1 _TEXT	
mark . . . . . . . . . . . . . .	L Near	 00000637 _TEXT	
mblk . . . . . . . . . . . . . .	L Near	 00005225 _TEXT	
mcur . . . . . . . . . . . . . .	L Near	 000051EF _TEXT	
me . . . . . . . . . . . . . . .	DWord	 000005AC _TEXT	
mk . . . . . . . . . . . . . . .	DWord	 00000ABC _TEXT	
mmcur  . . . . . . . . . . . . .	L Near	 000051FE _TEXT	
move . . . . . . . . . . . . . .	L Near	 000041E1 _TEXT	
nW1  . . . . . . . . . . . . . .	L Near	 00004F4F _TEXT	
nW . . . . . . . . . . . . . . .	L Near	 00004F47 _TEXT	
nc_  . . . . . . . . . . . . . .	L Near	 0000426C _TEXT	
nc . . . . . . . . . . . . . . .	DWord	 000005A8 _TEXT	
notimpl  . . . . . . . . . . . .	L Near	 000004B1 _TEXT	
no . . . . . . . . . . . . . . .	L Near	 00004508 _TEXT	
nul0 . . . . . . . . . . . . . .	L Near	 00004A40 _TEXT	
nul  . . . . . . . . . . . . . .	L Near	 00000A3E _TEXT	
numb0  . . . . . . . . . . . . .	DWord	 000049F4 _TEXT	
numb1  . . . . . . . . . . . . .	DWord	 00004A08 _TEXT	
numbers  . . . . . . . . . . . .	Byte	 00004796 _TEXT	
oDIG . . . . . . . . . . . . . .	L Near	 00004CC5 _TEXT	
o_blk  . . . . . . . . . . . . .	DWord	 00005098 _TEXT	
octals . . . . . . . . . . . . .	Byte	 000047AE _TEXT	
octal  . . . . . . . . . . . . .	L Near	 00004B83 _TEXT	
octant . . . . . . . . . . . . .	L Near	 00004661 _TEXT	
offset_  . . . . . . . . . . . .	L Near	 00004322 _TEXT	
offvadr  . . . . . . . . . . . .	DWord	 0000509C _TEXT	
outputdebug  . . . . . . . . . .	L Near	 00000520 _TEXT	
pAT  . . . . . . . . . . . . . .	L Near	 00004650 _TEXT	
pad  . . . . . . . . . . . . . .	L Near	 000054BC _TEXT	
paintstruc . . . . . . . . . . .	PAINTSTRUCT  00000407 _TEXT	
pblk . . . . . . . . . . . . . .	L Near	 0000521A _TEXT	
pcad_  . . . . . . . . . . . . .	L Near	 000042CE _TEXT	
pcad . . . . . . . . . . . . . .	DWord	 000050A8 _TEXT	
pcur . . . . . . . . . . . . . .	L Near	 000051F7 _TEXT	
ppcur  . . . . . . . . . . . . .	L Near	 00005212 _TEXT	
process_messages_disp  . . . . .	L Near	 00000337 _TEXT	
process_messages_ex  . . . . . .	L Near	 0000034B _TEXT	
process_messages . . . . . . . .	L Near	 0000031E _TEXT	
q1 . . . . . . . . . . . . . . .	L Near	 00000A1D _TEXT	
qCOMPILE . . . . . . . . . . . .	L Near	 000008C8 _TEXT	
qIGNORE  . . . . . . . . . . . .	L Near	 00000A2F _TEXT	
qRING  . . . . . . . . . . . . .	L Near	 00004DA8 _TEXT	
qcr  . . . . . . . . . . . . . .	L Near	 00004609 _TEXT	
qdot . . . . . . . . . . . . . .	L Near	 00004D1F _TEXT	
qdup . . . . . . . . . . . . . .	L Near	 000007E5 _TEXT	
qlit . . . . . . . . . . . . . .	L Near	 000009E1 _TEXT	
qwerty . . . . . . . . . . . . .	L Near	 0000489F _TEXT	
qwkeys . . . . . . . . . . . . .	Byte	 00004860 _TEXT	
rW . . . . . . . . . . . . . . .	L Near	 00004E1D _TEXT	
ref1 . . . . . . . . . . . . . .	L Near	 00004FEB _TEXT	
rgb  . . . . . . . . . . . . . .	L Near	 00004350 _TEXT	
rm . . . . . . . . . . . . . . .	DWord	 00004260 _TEXT	
sDEFINE  . . . . . . . . . . . .	L Near	 00000749 _TEXT	
sW . . . . . . . . . . . . . . .	L Near	 00004F3B _TEXT	
screen . . . . . . . . . . . . .	DWord	 000005B0 _TEXT	
semi . . . . . . . . . . . . . .	L Near	 00000999 _TEXT	
shadow . . . . . . . . . . . . .	L Near	 00005239 _TEXT	
shift  . . . . . . . . . . . . .	DWord	 00004A20 _TEXT	
show0  . . . . . . . . . . . . .	L Near	 00000606 _TEXT	
show . . . . . . . . . . . . . .	L Near	 0000060C _TEXT	
siW  . . . . . . . . . . . . . .	L Near	 00004F7C _TEXT	
sign . . . . . . . . . . . . . .	Byte	 00004BCB _TEXT	
spaces . . . . . . . . . . . . .	DWord	 00000A78 _TEXT	
sps  . . . . . . . . . . . . . .	L Near	 00004296 _TEXT	
stack0 . . . . . . . . . . . . .	DWord	 0000052F _TEXT	
stack1 . . . . . . . . . . . . .	DWord	 00000533 _TEXT	
stack2 . . . . . . . . . . . . .	DWord	 00000537 _TEXT	
stack  . . . . . . . . . . . . .	L Near	 000046AB _TEXT	
start  . . . . . . . . . . . . .	L Near	 00000540 _TEXT	
switch . . . . . . . . . . . . .	L Near	 0000437E _TEXT	
szwndclass . . . . . . . . . . .	Byte	 0000014E _TEXT	
szwndname  . . . . . . . . . . .	Byte	 00000159 _TEXT	
tens . . . . . . . . . . . . . .	DWord	 0000506C _TEXT	
text1  . . . . . . . . . . . . .	L Near	 00004480 _TEXT	
text . . . . . . . . . . . . . .	L Near	 00004ED6 _TEXT	
then . . . . . . . . . . . . . .	L Near	 000009BD _TEXT	
trash_adr  . . . . . . . . . . .	Byte	 00004650 _STACK	
trash  . . . . . . . . . . . . .	DWord	 000050B4 _TEXT	
type0  . . . . . . . . . . . . .	L Near	 00004E61 _TEXT	
type1  . . . . . . . . . . . . .	L Near	 00004EDB _TEXT	
type2  . . . . . . . . . . . . .	L Near	 00004EEA _TEXT	
unPAAUSE_  . . . . . . . . . . .	L Near	 000005DA _TEXT	
unPACK . . . . . . . . . . . . .	L Near	 00004D79 _TEXT	
unmap_file . . . . . . . . . . .	L Near	 0000009A _TEXT	
var1 . . . . . . . . . . . . . .	L Near	 0000081E _TEXT	
variable . . . . . . . . . . . .	L Near	 0000082B _TEXT	
var  . . . . . . . . . . . . . .	L Near	 00004F0C _TEXT	
vc . . . . . . . . . . . . . . .	Number	 00000019h   
vector . . . . . . . . . . . . .	DWord	 0000517C _TEXT	
vp . . . . . . . . . . . . . . .	Number	 00000300h   
wW . . . . . . . . . . . . . . .	L Near	 00004E50 _TEXT	
warm . . . . . . . . . . . . . .	L Near	 0000053B _TEXT	
wcmain . . . . . . . . . . . . .	WNDCLASSEX  00000106 _TEXT	
white  . . . . . . . . . . . . .	L Near	 00004366 _TEXT	
wkey1  . . . . . . . . . . . . .	L Near	 000048F8 _TEXT	
wkeyex . . . . . . . . . . . . .	L Near	 0000495A _TEXT	
wkey . . . . . . . . . . . . . .	L Near	 000048D0 _TEXT	
wm . . . . . . . . . . . . . . .	MSG	 00000302 _TEXT	
wndheight  . . . . . . . . . . .	DWord	 0000014A _TEXT	
wndwidth . . . . . . . . . . . .	DWord	 00000146 _TEXT	
wordsn_  . . . . . . . . . . . .	L Near	 00004330 _TEXT	
words  . . . . . . . . . . . . .	DWord	 00004A3C _TEXT	
xc . . . . . . . . . . . . . . .	DWord	 00004348 _TEXT	
xy_  . . . . . . . . . . . . . .	L Near	 0000427A _TEXT	
xycr . . . . . . . . . . . . . .	DWord	 00004264 _TEXT	
xy . . . . . . . . . . . . . . .	DWord	 00004258 _TEXT	
yc . . . . . . . . . . . . . . .	DWord	 0000434C _TEXT	
yellow . . . . . . . . . . . . .	Number	 00FFFF00h   

	   0 Warnings
	   0 Errors
