Microsoft (R) Macro Assembler Version 6.15.8803		    02/22/22 22:22:22
color.asm						     Page 1 - 1


				; Charles H. Moore : invertor of colorForth, in masm, 2001 Jul 22, Public Domain
				; Jeff Fox at GreenArrays, Inc. - http://www.greenarraychips.com/home/documents/downindex.html
				; GreenArraysInc - https://www.youtube.com/user/GreenArraysInc/videos
						;; Old Release 02b colorForth based arrayForth software  as of 10/30/2013, at                
						;;  http://www.greenarraychips.com/home/support/index.html#software
				; colorForth for Windows By Roman Pavlyuk, 2003 plus other tools  
						;;http://web.archive.org/web/20040725124909/http://www.geocities.com/eleks_76/
				; Howerd Oakford www.inventio.co.uk colorForth for 80x86 PC in NASM
				;; this is colorForth 22 for win32, in masm ml 6.1.5, ver.02/22/22   
						 
					; Data are addressed as 32-bit words, not bytes. 
					; But esp and esi hold byte addresses, for optimization. 
					; Instructions are optimized if agruments are literals. 
					; Registers are assigned:
					; 0 eax: stack (1st number on Data stack) TOS_the top stack item ( eax --> ebx )
					; 1 ecx: counter, string counter, scratch register
					; 2 edx: address register A, I/O port, run-time pointer (?), "a register" used by  a! 
				             ;; , otherwise scratch register 
					; 3 ebx: scratch register
					; 4 esp: the call ... ret, byte pointer to top of Return stack 
					; 5 ebp: variable pointer register 
					; 6 esi: byte pointer to 2nd number on Data stack,is the stack pointer, also needed by lods and movs
					; 7 edi: dword pointer to next word to be interpreted, dictionary pointer 
				             ;; ( H --> : HERE ( -- a )   H @ ; )
					; ds, es, cs - segment selector
					; blocks.bin oeditriginally at offset 4800h (1200h * 4)
					; icons.bin  originally at offset 3000h


				.486p
				.MODEL flat, stdcall

 00000000			_STACK     segment para 'STACK'

 = 00000BB8			Godd_size  equ 750*4
 = 00001770			mains_size equ 1500*4
 = 00000BB8			maind_size equ 750*4
 = 00000BB8			gap_size   equ 750*4
 = 00004650			area_size  equ Godd_size+mains_size+maind_size+maind_size+gap_size

 00000000  00001194 [		           dd  area_size/4 dup (offset dummy)
	    00004690 R
	   ]

 00004650 = 00004650		Gods       equ $

 00004650  00000040 [		trash_adr  db  64 dup ('T')
	    54
	   ]
 00004690 00000000		dummy      dd  0

 = 00003A98			Godd       equ Gods-Godd_size
 = 00002328			mains      equ Godd-mains_size
 = 00001770			maind      equ mains-maind_size
 00004694			_STACK     ends

 00000000			.code

 00000000			code_begin:

				includelib kernel32.lib
				includelib gdi32.lib
				includelib user32.lib

				; imports from kernel32.dll
				    ExitProcess        PROTO :DWORD
				    GetLastError       PROTO
				    GetModuleHandleA   PROTO :DWORD

				    CloseHandle        PROTO :DWORD
				    CreateFileA        PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    CreateFileMappingA PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    MapViewOfFile      PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    UnmapViewOfFile    PROTO :DWORD
				    VirtualAlloc       PROTO :DWORD, :DWORD, :DWORD, :DWORD
				    
				    LoadLibraryA       PROTO :DWORD
				    GetProcAddress     PROTO :DWORD, :DWORD
					OutputDebugStringA PROTO :DWORD
				 
				; imports from user32.dll
				    GetAsyncKeyState   PROTO :DWORD
				    GetKeyState        PROTO :DWORD
				    MapVirtualKeyA     PROTO :DWORD, :DWORD
				    RegisterClassExA   PROTO :DWORD
				    CreateWindowExA    PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    ShowWindow         PROTO :DWORD, :DWORD
				    UpdateWindow       PROTO :DWORD
				    DefWindowProcA     PROTO :DWORD, :DWORD, :DWORD,:DWORD
				    GetDC              PROTO :DWORD
				    LoadIconA          PROTO :DWORD, :DWORD
				    LoadCursorA        PROTO :DWORD, :DWORD
				    BeginPaint         PROTO :DWORD, :DWORD
				    EndPaint           PROTO :DWORD, :DWORD
				    InvalidateRect     PROTO :DWORD, :DWORD, :DWORD
				      
				    PeekMessageA       PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    GetMessageA        PROTO :DWORD, :DWORD, :DWORD, :DWORD
				    TranslateMessage   PROTO :DWORD
				    DispatchMessageA   PROTO :DWORD
				    
				       
				; imports from gdi32.dll
				    CreateCompatibleDC PROTO :DWORD
				    CreateDIBSection   PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				    StretchDIBits      PROTO :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD, :DWORD
				          

 00000000			fail_process:
 00000000  6A 01		    push   1      
 00000002  E8 00000000 E	    call   ExitProcess
				    
 00000007			bye:    
 00000007			exit_process:
 00000007  6A 00		    push   0      
 00000009  E8 00000000 E	    call   ExitProcess

				    
 0000000E			last_error:
 0000000E  E8 00000000 E	    call   GetLastError
 00000013  C3			    ret        

				next   MACRO adr
				    dec    ecx
				    jnz    adr
				ENDM

				DUP_   MACRO
				    lea    esi, [esi-4]
				    mov    [esi], eax
				ENDM

				; lodsd  loads a 32 bit dword from [ds:esi] into _TOS_, increments  esi  by 4
				DROP   MACRO
				    lodsd 
				ENDM

 = 00000400			hp     equ 1024    ; horizontal size
 = 00000300			vp     equ 768     ; vertical size
 = 00000002			bpc    equ 2       ; bytes per color (16 bit)

				;   100000 dictionary
				;    a0000 top of return stack
				;    9f800 top of data stack
				;    9d800 free
				;    97000 floppy buffer
				;     4800 source
				;icons  equ 12*256*4 ; 3000
				;     7c00 BIOS boot sector
				;        0 Forth

 00000014 69 63 6F 6E 73	icons_file     db  'icons.bin', 0
	   2E 62 69 6E 00
 0000001E 62 6C 6F 63 6B	blocks_file    db  'blocks.bin', 0
	   73 2E 62 69 6E
	   00

 00000029 00000000		icons_adr      dd  0
 0000002D 00000000		blocks_adr     dd  0

 00000031			icon0: 
				    DUP_
 00000031  8D 76 FC	     1	    lea    esi, [esi-4]
 00000034  89 06	     1	    mov    [esi], eax
 00000036  A1 00000029 R	    mov    eax, [icons_adr]
 0000003B  C1 E8 02		    shr    eax, 2
 0000003E  C3			    ret
				    
 0000003F			blk0:
				    DUP_
 0000003F  8D 76 FC	     1	    lea    esi, [esi-4]
 00000042  89 06	     1	    mov    [esi], eax
 00000044  A1 0000002D R	    mov    eax, [blocks_adr]
 00000049  C1 E8 02		    shr    eax, 2
 0000004C  2D 00004800		    sub    eax, 18 shl 10
 00000051  C3			    ret

				; in:  edx - file name
				; out: eax - memory address
 00000052			map_file:
 00000052  6A 00		    push   0               ; template file
 00000054  68 00000080		    push   00000080h       ; attributes
 00000059  6A 03		    push   00000003h       ; OPEN_EXISTING
 0000005B  6A 00		    push   0               ; security attributes
 0000005D  6A 03		    push   00000003h       ; FILE_SHARE_READ or FILE_SHARE_WRITE
 0000005F  68 C0000000		    push   0c0000000h      ; GENERIC_READ or GENERIC_WRITE
 00000064  52			    push   edx             ; file name
 00000065  E8 00000000 E	    call   CreateFileA     ; -1 indicates error
 0000006A  40			    inc    eax             ; add 1
 0000006B  74 2C		    jz     map_file_ex     ; jmp if eax == 0 (error == -1)

 0000006D  48			    dec    eax
 0000006E  33 DB		    xor    ebx, ebx
 00000070  53			    push   ebx             ; 0 return address
 00000071  50			    push   eax             ; save file handle
				    
 00000072  53			    push   ebx             ; object name
 00000073  53			    push   ebx             ; size
 00000074  53			    push   ebx
 00000075  6A 04		    push   00000004h       ; PAGE_READWRITE
 00000077  53			    push   ebx             ; security attributes
 00000078  50			    push   eax             ; file handle
 00000079  E8 00000000 E	    call   CreateFileMappingA
 0000007E  0B C0		    or     eax, eax
 00000080  74 11		    jz     map_file_ex1
				    
 00000082  33 DB		    xor    ebx, ebx
 00000084  53			    push   ebx             ; whole file
 00000085  53			    push   ebx             ; position
 00000086  53			    push   ebx             
 00000087  6A 02		    push   00000002h       ; SECTION_MAP_WRITE
 00000089  50			    push   eax
 0000008A  E8 00000000 E	    call   MapViewOfFile

 0000008F  5B			    pop    ebx             ; file handle
 00000090  5A			    pop    edx             ; drop 0 return address
 00000091  50			    push   eax             ; save address
 00000092  53			    push   ebx
 00000093			map_file_ex1:
 00000093  E8 00000000 E	    call   CloseHandle  

 00000098  58			    pop    eax   
 00000099			map_file_ex:    
 00000099  C3			    ret

				; in:  eax - memory address
 0000009A			unmap_file:
 0000009A  50			    push   eax
 0000009B  E8 00000000 E	    call   UnmapViewOfFile
 000000A0  C3			    ret       

 000000A1			map_work_files:
 000000A1  BA 00000014 R	    mov    edx, offset icons_file
 000000A6  E8 FFFFFFA7		    call   map_file
 000000AB  0B C0		    or     eax, eax
 000000AD  0F 84 FFFFFF4D	    jz     fail_process
 000000B3  A3 00000029 R	    mov    [icons_adr], eax
				     
 000000B8  BA 0000001E R	    mov    edx, offset blocks_file
 000000BD  E8 FFFFFF90		    call   map_file
 000000C2  0B C0		    or     eax, eax
 000000C4  0F 84 FFFFFF36	    jz     fail_process
 000000CA  A3 0000002D R	    mov    [blocks_adr], eax

 000000CF  C3			    ret 

				; in:  ecx - size
				; out: eax - address
 000000D0			alloc_mem:
 000000D0  6A 40		    push   40h                   ; PAGE_EXECUTE_READWRITE
 000000D2  68 00001000		    push   1000h                 ; MEM_COMMIT
 000000D7  51			    push   ecx                   ; size 1 MB
 000000D8  6A 00		    push   00000000h             ; dictionary starting address
 000000DA  E8 00000000 E	    call   VirtualAlloc
 000000DF  0B C0		    or     eax, eax
 000000E1  0F 84 FFFFFF19	    jz     fail_process
 000000E7  C3			    ret
				    
 000000E8			alloc_buffers:
				; dictionary
 000000E8  B9 00100000		    mov    ecx, 1024*1024        ; dictionary size 1 MB
 000000ED  E8 FFFFFFDE		    call   alloc_mem      
 000000F2  A3 00000ABC R	    mov    [H], eax

 000000F7  C3			    ret    

 00000030			WNDCLASSEX struc
 00000000  00000000		  cbSize            DWORD      ?
 00000004  00000000		  style             DWORD      ?
 00000008  00000000		  lpfnWndProc       DWORD      ?
 0000000C  00000000		  cbClsExtra        DWORD      ?
 00000010  00000000		  cbWndExtra        DWORD      ?
 00000014  00000000		  hInstance         DWORD      ?
 00000018  00000000		  hIcon             DWORD      ?
 0000001C  00000000		  hCursor           DWORD      ?
 00000020  00000000		  hbrBackground     DWORD      ?
 00000024  00000000		  lpszMenuName      DWORD      ?
 00000028  00000000		  lpszClassName     DWORD      ?
 0000002C  00000000		  hIconSm           DWORD      ?
				WNDCLASSEX ends

 000000F8 00000000		wcmain     WNDCLASSEX          <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000128 00000000		hmodule    dd  0
 0000012C 00000000		hiconmain  dd  0
 00000130 00000000		hcurmain   dd  0
 00000134 00000000		hwndmain   dd  0                
 00000138 000002AA		wndwidth   dd  hp*2/3
 0000013C 00000200		wndheight  dd  vp*2/3
 00000140 43 6F 6C 6F 72szwndclass db  "ColorForth" , 0
	   46 6F 72 74 68
	   00
 0000014B 43 6F 6C 6F 72	szwndname  db  "ColorForth 22 for Win32", 0
	   46 6F 72 74 68
	   20 32 32 20 66
	   6F 72 20 57 69
	   6E 33 32 00
 00000163  00000040 [		_IObuff    db  64 dup ('I')
	    49
	   ]
 000001A3 00			dummyio    db  0

 000001A4 000001A4		wnd_proc   proc hWnd :DWORD, uMsg   :DWORD, wParam :DWORD, lParam :DWORD
 000001A7  8B 55 0C		    mov    edx, [uMsg]
				    
 000001AA  83 FA 02		@@: cmp    edx,  2h  ; WM_DESTROY
 000001AD  75 05		    jne    @f
 000001AF  E9 FFFFFE53		    jmp    exit_process

 000001B4  83 FA 0F		@@: cmp    edx, 0fh  ; WM_PAINT    
 000001B7  75 09		    jne    @f
 000001B9  E8 0000027F		    call   draw_display
 000001BE  33 C0		    xor    eax, eax
 000001C0  EB 46		    jmp    wnd_proc_exx

 000001C2  83 FA 05		@@: cmp    edx, 5h   ; WM_SIZE
 000001C5  75 27		    jne    @f
 000001C7  8B 5D 14		    mov    ebx, [lParam]
 000001CA  8B C3		    mov    eax, ebx
 000001CC  25 0000FFFF		    and    eax, 0000ffffh
 000001D1  A3 00000138 R	    mov    [wndwidth], eax
 000001D6  C1 EB 10		    shr    ebx, 16                                                                    
 000001D9  89 1D 0000013C R	    mov    [wndheight], ebx
 000001DF  FF 35 00000134 R	    push   [hwndmain]
 000001E5  E8 00000000 E	    call   UpdateWindow
 000001EA  33 C0		    xor    eax, eax
 000001EC  EB 15		    jmp    wnd_proc_ex
				    
 000001EE			@@:    
 000001EE  FF 75 14		    push   [lParam]
 000001F1  FF 75 10		    push   [wParam]
 000001F4  FF 75 0C		    push   [uMsg]
 000001F7  FF 75 08		    push   [hWnd]
 000001FA  E8 00000000 E	    call   DefWindowProcA
				    ret

 00000203			wnd_proc_ex:
 00000203  B8 00000001		    mov    eax, 1
 00000208			wnd_proc_exx:    
				    ret 
 0000020C			wnd_proc   endp

 0000020C			alloc_window:
 0000020C  6A 00		    push   0
 0000020E  E8 00000000 E	    call   GetModuleHandleA
 00000213  A3 00000128 R	    mov    [hmodule], eax
				    
 00000218  6A 01		    push   1
 0000021A  50			    push   eax
 0000021B  E8 00000000 E	    call   LoadIconA
 00000220  A3 0000012C R	    mov    [hiconmain], eax
				    
 00000225  68 00007F00		    push   32512 ; IDC_ARROW
 0000022A  6A 00		    push   0
 0000022C  E8 00000000 E	    call   LoadCursorA
 00000231  A3 00000130 R	    mov    [hcurmain], eax

 00000236  BB 000000F8 R	    mov    ebx, offset wcmain
 0000023B  C7 03 00000030	    mov    [ebx].WNDCLASSEX.cbSize, sizeof WNDCLASSEX
 00000241  C7 43 04		    mov    [ebx].WNDCLASSEX.style, 0001h or 0002h or 2000h ; or 80000000h
	   00002003
 00000248  C7 43 08		    mov    [ebx].WNDCLASSEX.lpfnWndProc, wnd_proc
	   000001A4 R
 0000024F  C7 43 0C		    mov    [ebx].WNDCLASSEX.cbClsExtra, 0
	   00000000
 00000256  C7 43 10		    mov    [ebx].WNDCLASSEX.cbWndExtra, 0
	   00000000
 0000025D  A1 00000128 R	    mov    eax, [hmodule]
 00000262  89 43 14		    mov    [ebx].WNDCLASSEX.hInstance, eax
 00000265  C7 43 20		    mov    [ebx].WNDCLASSEX.hbrBackground, 000000h
	   00000000
 0000026C  C7 43 24		    mov    [ebx].WNDCLASSEX.lpszMenuName, 0
	   00000000
 00000273  C7 43 28		    mov    [ebx].WNDCLASSEX.lpszClassName, offset szwndclass 
	   00000140 R
 0000027A  A1 0000012C R	    mov    eax, [hiconmain]
 0000027F  89 43 18		    mov    [ebx].WNDCLASSEX.hIcon, eax
 00000282  89 43 2C		    mov    [ebx].WNDCLASSEX.hIconSm, eax
 00000285  A1 00000130 R	    mov    eax, [hcurmain]
 0000028A  89 43 1C		    mov    [ebx].WNDCLASSEX.hCursor, eax
 0000028D  53			    push   ebx
 0000028E  E8 00000000 E	    call   RegisterClassExA
 00000293  0B C0		    or     eax, eax
 00000295  0F 84 FFFFFD65	    jz     fail_process
				    
 0000029B  33 DB		    xor    ebx, ebx
 0000029D  53			    push   ebx
 0000029E  FF 35 00000128 R	    push   [hmodule]
 000002A4  53			    push   ebx
 000002A5  53			    push   ebx
 000002A6  FF 35 0000013C R	    push   [wndheight]
 000002AC  FF 35 00000138 R	    push   [wndwidth]
 000002B2  6A 00		    push   0
 000002B4  6A 00		    push   0
 000002B6  68 00CF0000		    push   0CF0000h ; WS_SIZEBOX or WM_MINIMIZEBOX or WM_MAXIMIZEBOX
 000002BB  68 0000014B R	    push   offset szwndname
 000002C0  68 00000140 R	    push   offset szwndclass
 000002C5  68 00000300		    push   300h ; WS_EX_OVERLAPPEDWINDOW
 000002CA  E8 00000000 E	    call   CreateWindowExA
 000002CF  0B C0		    or     eax, eax
 000002D1  0F 84 FFFFFD29	    jz     fail_process
 000002D7  A3 00000134 R	    mov    [hwndmain], eax
				    
 000002DC  6A 03		    push   3
 000002DE  50			    push   eax
 000002DF  E8 00000000 E	    call   ShowWindow
				    
 000002E4  6A 00		    push   0
 000002E6  6A 00		    push   0
 000002E8  FF 35 00000134 R	    push   [hwndmain]
 000002EE  E8 00000000 E	    call   InvalidateRect
				    
				;    push   [hwndmain]
				;    call   UpdateWindow
				               
 000002F3  C3			    ret         
				    
 00000008			POINT struc
 00000000  00000000		  x  DWORD ?
 00000004  00000000		  y  DWORD ?
				POINT ends

 00000010			RECT struc 
 00000000  00000000		  left    dd      ?
 00000004  00000000		  top     dd      ?
 00000008  00000000		  right   dd      ?
 0000000C  00000000		  bottom  dd      ?
				RECT ends

 0000001C			MSG struc
 00000000  00000000		  hwnd      DWORD      ?
 00000004  00000000		  message   DWORD      ?
 00000008  00000000		  wParam    DWORD      ?
 0000000C  00000000		  lParam    DWORD      ?
 00000010  00000000		  time      DWORD      ?
 00000014  00000000		  pt        POINT      <>
	   00000000
				MSG ends
				    
 000002F4 00000000		wm  MSG    <>         
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000310			process_messages:
				;    push   1      ; PM_REMOVE
 00000310  6A 00		    push   0h     ; WM_KEYLAST
 00000312  6A 00		    push   0h     ; WM_KEYFIRST
 00000314  6A 00		    push   0 ; [hwndmain]      
 00000316  68 000002F4 R	    push   offset wm
 0000031B  E8 00000000 E	    call   GetMessageA
 00000320  0B C0		    or     eax, eax
 00000322  75 05		    jnz    process_messages_disp
 00000324  E9 FFFFFCDE		    jmp    exit_process
				    
 00000329			process_messages_disp:    
 00000329  68 000002F4 R	@@: push   offset wm
 0000032E  E8 00000000 E	    call   TranslateMessage
 00000333  68 000002F4 R	    push   offset wm
 00000338  E8 00000000 E	    call   DispatchMessageA
				    
 0000033D			process_messages_ex:
 0000033D  C3			    ret
				    
				    
 00000028			BITMAPINFOHEADER struc
 00000000  00000000		  biSize            DWORD      ?
 00000004  00000000		  biWidth           DWORD      ?
 00000008  00000000		  biHeight          DWORD      ?
 0000000C  0000			  biPlanes          WORD       ?
 0000000E  0000			  biBitCount        WORD       ?
 00000010  00000000		  biCompression     DWORD      ?
 00000014  00000000		  biSizeImage       DWORD      ?
 00000018  00000000		  biXPelsPerMeter   DWORD      ?
 0000001C  00000000		  biYPelsPerMeter   DWORD      ?
 00000020  00000000		  biClrUsed         DWORD      ?
 00000024  00000000		  biClrImportant    DWORD      ?
				BITMAPINFOHEADER ends
				    
 0000033E 00000000		bmih       BITMAPINFOHEADER    <>
	   00000000
	   00000000 0000
	   0000 00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000366 00000000		hdcdesktop dd 0
 0000036A 00000000		hbmpframe  dd 0
 0000036E 00000000		hdcframe   dd 0

				    
 00000372			alloc_display:
				; get DC
 00000372  FF 35 00000134 R	    push   [hwndmain]
 00000378  E8 00000000 E	    call   GetDC
 0000037D  0B C0		    or     eax, eax
 0000037F  0F 84 FFFFFC7B	    jz     fail_process
 00000385  A3 00000366 R	    mov    [hdcdesktop], eax
				    
				; create bitmap DC
 0000038A  6A 00		    push   0
 0000038C  E8 00000000 E	    call   CreateCompatibleDC                                                                                    
 00000391  0B C0		    or     eax, eax
 00000393  0F 84 FFFFFC67	    jz     fail_process
 00000399  A3 0000036E R	    mov    [hdcframe], eax

				; create bitmap for frame data
 0000039E  33 C0		    xor    eax, eax
 000003A0  BB 0000033E R	    mov    ebx, offset bmih
 000003A5  C7 03 00000028	    mov    [ebx].BITMAPINFOHEADER.biSize, sizeof BITMAPINFOHEADER
 000003AB  C7 43 04		    mov    [ebx].BITMAPINFOHEADER.biWidth, hp
	   00000400
 000003B2  C7 43 08		    mov    [ebx].BITMAPINFOHEADER.biHeight, -vp
	   FFFFFD00
 000003B9  66| C7 43 0C		    mov    [ebx].BITMAPINFOHEADER.biPlanes, 1
	   0001
 000003BF  66| C7 43 0E		    mov    [ebx].BITMAPINFOHEADER.biBitCount, 16
	   0010
 000003C5  89 43 10		    mov    [ebx].BITMAPINFOHEADER.biCompression, eax               ; BI_RGB = 0
 000003C8  89 43 14		    mov    [ebx].BITMAPINFOHEADER.biSizeImage, eax
 000003CB  89 43 18		    mov    [ebx].BITMAPINFOHEADER.biXPelsPerMeter, eax
 000003CE  89 43 1C		    mov    [ebx].BITMAPINFOHEADER.biYPelsPerMeter, eax
 000003D1  89 43 20		    mov    [ebx].BITMAPINFOHEADER.biClrUsed, eax
 000003D4  89 43 24		    mov    [ebx].BITMAPINFOHEADER.biClrImportant, eax
 000003D7  50			    push   eax
 000003D8  50			    push   eax
 000003D9  68 00004224 R	    push   offset frame
 000003DE  50			    push   eax
 000003DF  53			    push   ebx
 000003E0  FF 35 0000036E R	    push   [hdcframe]
 000003E6  E8 00000000 E	    call   CreateDIBSection
 000003EB  0B C0		    or     eax, eax
 000003ED  0F 84 FFFFFC0D	    jz     fail_process
 000003F3  A3 0000036A R	    mov    [hbmpframe], eax

 000003F8  C3			    ret

 00000040			PAINTSTRUCT struc
 00000000  00000000		  hdc           DWORD      ?
 00000004  00000000		  fErase        DWORD      ?
 00000008  00000000		  rcPaint       RECT       <>
	   00000000
	   00000000
	   00000000
 00000018  00000000		  fRestore      DWORD      ?
 0000001C  00000000		  fIncUpdate    DWORD      ?
 00000020  00000020 [		  rgbReserved   BYTE 32 dup(?)
	    00
	   ]
				PAINTSTRUCT ends

 000003F9 00000000		paintstruc PAINTSTRUCT  <>
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000020 [
	    00
	   ]
 00000439 00000000		hdcpaint   dd  0

 0000043D			draw_display:
 0000043D  68 000003F9 R	    push   offset paintstruc
 00000442  FF 35 00000134 R	    push   [hwndmain]
 00000448  E8 00000000 E	    call   BeginPaint
 0000044D  0B C0		    or     eax, eax
 0000044F  0F 84 FFFFFBAB	    jz     fail_process
 00000455  A3 00000439 R	    mov    [hdcpaint], eax

 0000045A  33 DB		    xor    ebx, ebx
 0000045C  68 00CC0020		    push   0CC0020h        ; SRCCOPY
 00000461  53			    push   ebx
 00000462  68 0000033E R	    push   offset bmih 
 00000467  FF 35 00004224 R	    push   [frame]   
 0000046D  68 00000300		    push   vp
 00000472  68 00000400		    push   hp              
 00000477  53			    push   ebx
 00000478  53			    push   ebx
 00000479  FF 35 0000013C R	    push   [wndheight]
 0000047F  FF 35 00000138 R	    push   [wndwidth]
 00000485  53			    push   ebx
 00000486  53			    push   ebx
 00000487  FF 35 00000439 R	    push   [hdcpaint]    
 0000048D  E8 00000000 E	    call   StretchDIBits
				    
 00000492  68 000003F9 R	    push   offset paintstruc
 00000497  FF 35 00000134 R	    push   [hwndmain]
 0000049D  E8 00000000 E	    call   EndPaint
				    
 000004A2  C3			    ret

 000004A3			notimpl:
 000004A3  E9 FFFFFB58		    jmp    fail_process
				    
				    
 000004A8 00000000		fname  dd  0
 000004AC  00			       db  0    

				; ( $fn -- a )
 000004AD			fmap:
 000004AD  A3 000004A8 R	    mov    [fname], eax
 000004B2  56			    push   esi
 000004B3  BA 000004A8 R	    mov    edx, offset fname
 000004B8  E8 FFFFFB95		    call   map_file
 000004BD  5E			    pop    esi
 000004BE  C1 E8 02		    shr    eax, 2
 000004C1  C3			    ret
				    
				; ( a -- )
 000004C2			funmap:
 000004C2  56			    push   esi
 000004C3  C1 E0 02		    shl    eax, 2
 000004C6  E8 FFFFFBCF		    call   unmap_file
 000004CB  5E			    pop    esi
				    DROP
 000004CC  AD		     1	    lodsd 
 000004CD  C3			    ret

				; ( block count $fn -- )
 000004CE			bload:
 000004CE  E8 FFFFFFDA		    call   fmap
 000004D3  8B D8		    mov    ebx, eax
				    DROP   
 000004D5  AD		     1	    lodsd 
 000004D6  8B C8		    mov    ecx, eax
				    DROP
 000004D8  AD		     1	    lodsd 
 000004D9  56			    push   esi
 000004DA  57			    push   edi 
 000004DB  8B F8		    mov    edi, eax
 000004DD  0B DB		    or     ebx, ebx
 000004DF  74 1D		    jz     bload_ex
 000004E1  8B F3		    mov    esi, ebx
 000004E3  56			    push   esi
 000004E4  C1 E1 08		    shl    ecx, 8  ; * 256
 000004E7  83 EF 12		    sub    edi, 18
 000004EA  C1 E7 0A		    shl    edi, 10
 000004ED  03 3D 0000002D R	    add    edi, [blocks_adr]
 000004F3  C1 E6 02		    shl    esi, 2
 000004F6  F3/ A5		    rep    movsd
 000004F8  5E			    pop    esi
 000004F9  E8 FFFFFB9C		    call   unmap_file
				    
 000004FE			bload_ex:    
 000004FE  5F			    pop    edi
 000004FF  5E			    pop    esi
				    DROP
 00000500  AD		     1	    lodsd 
 00000501  C3			    ret
				    
 00000502			dlopen:    ; ( DLLName -- hDLL )
 00000502  50			    push   eax
 00000503  E8 00000000 E	    call   LoadLibraryA
 00000508  C3			    ret
				    
 00000509			dlimp:     ; ( hDLL ProcName -- a )
 00000509  50			    push   eax
				    DROP
 0000050A  AD		     1	    lodsd 
 0000050B  50			    push   eax
 0000050C  E8 00000000 E	    call   GetProcAddress
 00000511  C3			    ret

 00000512			outputdebug:
 00000512  50			    push eax
 00000513  A1 00000163 R		mov	 eax, DWORD PTR _IObuff
 00000518  50			  	push	 eax
 00000519  FF 15 00000000 E	  	call	 DWORD PTR OutputDebugStringA
 0000051F  58				pop eax
 00000520  C3			    ret

 00000521 00000000		stack0     dd  0
 00000525 00000000		stack1     dd  0
 00000529 00000000		stack2     dd  0

 0000052D			warm: 
				    DUP_
 0000052D  8D 76 FC	     1	    lea    esi, [esi-4]
 00000530  89 06	     1	    mov    [esi], eax
 00000532			_start:
 00000532			start: 
				; initialize stacks
 00000532  8B C4		    mov    eax, esp
 00000534  A3 00000521 R	    mov    [stack0], eax
 00000539  B9 00004000		    mov    ecx, 64*1024/4 ;4000h
 0000053E  51			@@: push   ecx
 0000053F  49			    dec    ecx
 00000540  75 FC		    jnz    @b
 00000542  8B E0		    mov    esp, eax
 00000544  2D 00006000		    sub    eax, 24*1024 ;6000h
 00000549  A3 00000525 R	    mov    [stack1], eax
 0000054E  2D 00006000		    sub    eax, 24*1024 ;6000h
 00000553  A3 00000529 R	    mov    [stack2], eax

				;       mov    [me], esp
				;    mov    esp, Gods
 00000558  BE 00003A98 R	    mov    esi, Godd
				    
 0000055D  E8 FFFFFB3F		    call   map_work_files
 00000562  E8 FFFFFB81		    call   alloc_buffers
				;    call   alloc_signal_char
 00000567  E8 FFFFFCA0		    call   alloc_window
 0000056C  E8 FFFFFE01		    call   alloc_display
				    
 00000571  E8 00000084		    call   show0
				    
 00000576  C7 05 00000AD4 R	    mov    forths, (forth1-forth0)/4
	   00000043
 00000580  C7 05 00000AD0 R	    mov    macros, (macro1-macro0)/4
	   00000006
				    
				; load block 0
 0000058A  B8 00000012		    mov    eax, 18
 0000058F  E8 000004AC		    call   LOAD
				    
 00000594  E9 0000438F		    jmp    ACCEPT

				ALIGN 4
 0000059C 00000009		nc         dd  9 ; Forth+Icons+blocks 24-161
 000005A0 000005AD R		me         dd  offset God
 000005A4 00000000		screen     dd  0 ; the saving dword address of screen display variable (show screen proc)

 000005A8			ROUND: 
 000005A8  E8 00000021		    call   unPAAUSE_
 000005AD 00000000		God        dd  0 ; Gods-2*4
 000005B1  E8 00000018		    call   unPAAUSE_
 000005B6 00000000		main       dd  0 ; mains-2*4
 000005BA  EB EC		    jmp    ROUND

 000005BC			PAAUSE_: 
				    DUP_
 000005BC  8D 76 FC	     1	    lea    esi, [esi-4]
 000005BF  89 06	     1	    mov    [esi], eax
 000005C1  56			    push   esi         
 000005C2  A1 000005A0 R	    mov    eax, me     
 000005C7  89 20		    mov    [eax], esp  
 000005C9  83 C0 04		    add    eax, 4      
 000005CC  FF E0		    jmp    eax         

 000005CE			unPAAUSE_: 
 000005CE  58			    pop    eax        
 000005CF  8B 20		    mov    esp, [eax] 
 000005D1  A3 000005A0 R	    mov    me, eax    
 000005D6  5E			    pop    esi        
				    DROP
 000005D7  AD		     1	    lodsd 
 000005D8  C3			    ret

 000005D9			ACT: 
 000005D9  8B 15 00000529 R	    mov    edx, [stack2] ; maind-4 
 000005DF  83 EA 04		    sub    edx, 4
 000005E2  89 02		    mov    [edx], eax   
 000005E4  A1 00000525 R	    mov    eax, [stack1] ; mains-4 
 000005E9  83 E8 04		    sub    eax, 4       
 000005EC  8F 00		    pop    [eax]        
 000005EE  83 E8 04		    sub    eax, 4       
 000005F1  89 10		    mov    [eax], edx   
 000005F3  A3 000005B6 R	    mov    main, eax    
				    DROP
 000005F8  AD		     1	    lodsd 
 000005F9  C3			    ret

				COMMENT #
				ACT: 
				    mov    edx, maind-4 
				    mov    [edx], eax   
				    mov    eax, mains-4 
				    pop    [eax]        
				    sub    eax, 4       
				    mov    [eax], edx   
				    mov    main, eax    
				    DROP
				    ret
				#


 000005FA			show0: 
 000005FA  E8 00000001		    call   show
 000005FF  C3			    ret
				    
 00000600			show: 
 00000600  8F 05 000005A4 R	    pop    screen
				    DUP_
 00000606  8D 76 FC	     1	    lea    esi, [esi-4]
 00000609  89 06	     1	    mov    [esi], eax
 0000060B  33 C0		    xor    eax, eax
 0000060D  E8 FFFFFFC7		    call   ACT
 00000612			@@:     
 00000612  E8 00003C4A		    call   graphic
 00000617  FF 15 000005A4 R	    call   [screen]
 0000061D  E8 00003C40		    call   SWITCH
 00000622  40			    inc    eax
 00000623  EB ED		    jmp    @b

 00000625			c_:  
 00000625  BE 00003A9C R	    mov    esi, Godd+4
 0000062A  C3			    ret

 0000062B			mark: 
 0000062B  8B 0D 00000AD0 R	    mov    ecx, macros
 00000631  89 0D 00000AB0 R	    mov    mk, ecx
 00000637  8B 0D 00000AD4 R	    mov    ecx, forths
 0000063D  89 0D 00000AB4 R	    mov    mk+4, ecx
 00000643  8B 0D 00000ABC R	    mov    ecx, H
 00000649  89 0D 00000AB8 R	    mov    mk+2*4, ecx
 0000064F  C3			    ret

 00000650			empty: 
 00000650  8B 0D 00000AB8 R	    mov    ecx, mk+2*4
 00000656  89 0D 00000ABC R	    mov    H, ecx
 0000065C  8B 0D 00000AB4 R	    mov    ecx, mk+4
 00000662  89 0D 00000AD4 R	    mov    forths, ecx
 00000668  8B 0D 00000AB0 R	    mov    ecx, mk
 0000066E  89 0D 00000AD0 R	    mov    macros, ecx
 00000674  C7 05 00000AC4 R	    mov    class, 0
	   00000000
 0000067E  C3			    ret

 0000067F			mFIND: 
 0000067F  8B 0D 00000AD0 R	    mov    ecx, macros
 00000685  57			    push   edi
 00000686  8D 3C 8D		    lea    edi, [macro0-4+ecx*4]
	   00000AD4 R
 0000068D  EB 0E		    jmp    @f

 0000068F			FIND: 
 0000068F  8B 0D 00000AD4 R	    mov    ecx, forths
 00000695  57			    push   edi
 00000696  8D 3C 8D		    lea    edi, [forth0-4+ecx*4]
	   00000CEC R
 0000069D  FD			@@: std
 0000069E  F2/ AF		    repne  scasd
 000006A0  FC			    cld
 000006A1  5F			    pop    edi
 000006A2  C3			    ret

 000006A3			EX1: 
 000006A3  FF 0D 00004920 R	    dec    words ; from keyboard
 000006A9  74 03		    jz     @f
				    DROP
 000006AB  AD		     1	    lodsd 
 000006AC  EB F5		    jmp    EX1

 000006AE  E8 FFFFFFDC		@@: call   FIND
 000006B3  75 4B		    jnz    ABORT1
				    DROP
 000006B5  AD		     1	    lodsd 
 000006B6  FF 24 8D		    jmp    [forth2+ecx*4]
	   00003814 R

 000006BD			execute: 
 000006BD  C7 05 00000AAC R	    mov    lit, offset alit
	   00000887 R
				    DUP_
 000006C7  8D 76 FC	     1	    lea    esi, [esi-4]
 000006CA  89 06	     1	    mov    [esi], eax
 000006CC  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 000006D3			ex2: 
 000006D3  83 E0 F0		    and    eax, -20o
 000006D6  E8 FFFFFFB4		    call   FIND
 000006DB  75 08		    jnz    ABORT
				    DROP
 000006DD  AD		     1	    lodsd 
 000006DE  FF 24 8D		    jmp    [forth2+ecx*4]
	   00003814 R

 000006E5			ABORT: 
 000006E5  89 3D 0000505C R	    mov    curs, edi
 000006EB  C1 E7 02		        shl    edi, 2
 000006EE  2B 3D 0000002D R	        sub    edi, [blocks_adr] 
 000006F4  C1 EF 0A		    shr    edi, 10
 000006F7  83 C7 12		        add    edi, 18
 000006FA  89 3D 00005054 R	    mov    blk, edi
 00000700			ABORT1: 
 00000700  8B 25 00000521 R	    mov    esp, [stack0] ; Gods
 00000706  C7 05 00000A78 R	    mov    spaces+3*4, offset forthd
	   00000764 R
 00000710  C7 05 00000A7C R	    mov    spaces+4*4, offset qcompile
	   000008BC R
 0000071A  C7 05 00000A80 R	    mov    spaces+5*4, offset cnum
	   00000860 R
 00000724  C7 05 00000A84 R	    mov    spaces+6*4, offset cshort
	   00000870 R
 0000072E  B8 0000002F		    mov    eax, 57o ; ?
 00000733  E8 00003D1C		    call   ECHO_
 00000738  E9 000041EB		    jmp    ACCEPT

 0000073D			sDEFINE: 
 0000073D  8F 05 00000A78 R	    pop    aDEFINE
 00000743  C3			    ret
				    
 00000744			MACRO_: 
 00000744  E8 FFFFFFF4		    call   sDEFINE
 00000749			macrod: 
 00000749  50			    push   eax   
 0000074A  8B 0D 00000AD0 R	    mov    ecx, macros
 00000750  FF 05 00000AD0 R	    inc    macros
 00000756  8D 0C 8D		    lea    ecx, [macro0+ecx*4]
	   00000AD8 R
 0000075D  EB 19		    jmp    @f

 0000075F			FORTH: 
 0000075F  E8 FFFFFFD9		    call   sDEFINE
 00000764			forthd: 
 00000764  50			    push   eax
 00000765  8B 0D 00000AD4 R	    mov    ecx, [forths]
 0000076B  FF 05 00000AD4 R	    inc    [forths]
 00000771  8D 0C 8D		    lea    ecx, [forth0+ecx*4]
	   00000CF0 R
 00000778  8B 14 BD		@@: mov    edx, [-4+edi*4]
	   FFFFFFFC
 0000077F  83 E2 F0		    and    edx, -20o
 00000782  89 11		    mov    [ecx], edx
 00000784  8B 15 00000ABC R	    mov    edx, h
 0000078A  89 91 00002B24	    mov    [forth2-forth0+ecx], edx
 00000790  8D 91 00002B24	    lea    edx, [forth2-forth0+ecx]
 00000796  C1 EA 02		    shr    edx, 2
 00000799  89 15 00000AC0 R	    mov    [last], edx
 0000079F  58				pop    eax
 000007A0  89 25 00000AC8 R	    mov    [list], esp
 000007A6  C7 05 00000AAC R	    mov    [lit], offset adup
	   0000080C R
 000007B0  F7 05 00000AC4 R	    test   class, -1
	   FFFFFFFF
 000007BA  74 06		    jz     @f
 000007BC  FF 25 00000AC4 R	    jmp    [class]
 000007C2  C3			@@: ret

 000007C3			cdrop: 
 000007C3  8B 15 00000ABC R	    mov    edx, [h]
 000007C9  89 15 00000AC8 R	    mov    [list], edx
 000007CF  C6 02 AD		    mov    byte ptr [edx], 0adh ; lodsd
 000007D2  FF 05 00000ABC R	    inc    [h]
 000007D8  C3			    ret

 000007D9			qdup: 
 000007D9  8B 15 00000ABC R	    mov    edx, [H]
 000007DF  4A			    dec    edx
 000007E0  39 15 00000AC8 R	    cmp    [list], edx
 000007E6  75 0C		    jnz    cdup
 000007E8  80 3A AD		    cmp    byte ptr [edx], 0adh
 000007EB  75 07		    jnz    cdup
 000007ED  89 15 00000ABC R	    mov    [H], edx
 000007F3  C3			    ret
				    
 000007F4			cdup: 
 000007F4  8B 15 00000ABC R	    mov    edx, [H]
 000007FA  C7 02 89FC768D	    mov    dword ptr [edx], 89fc768dh
 00000800  C6 42 04 06		    mov    byte ptr [4+edx], 06
 00000804  83 05 00000ABC R	    add    [H], 5
	   05
 0000080B  C3			    ret

 0000080C			adup: 
				    DUP_
 0000080C  8D 76 FC	     1	    lea    esi, [esi-4]
 0000080F  89 06	     1	    mov    [esi], eax
 00000811  C3			    ret

 00000812			var1: 
				    DUP_
 00000812  8D 76 FC	     1	    lea    esi, [esi-4]
 00000815  89 06	     1	    mov    [esi], eax
 00000817  8B 04 8D		    mov    eax, [4+forth0+ecx*4]
	   00000CF4 R
 0000081E  C3			    ret
				    
 0000081F			variable: 
 0000081F  E8 FFFFFF40		    call   forthd
 00000824  C7 81 00002B24	    mov    [forth2-forth0+ecx], offset var1
	   00000812 R
 0000082E  FF 05 00000AD4 R	    inc    forths ; dummy entry for source address
 00000834  89 79 04		    mov    [4+ecx], edi
 00000837  E8 FFFFFF0D		    call   macrod
 0000083C  C7 81 00002B24	    mov    [forth2-forth0+ecx], offset @f
	   00000851 R
 00000846  FF 05 00000AD0 R	    inc    macros
 0000084C  89 79 04		    mov    [4+ecx], edi
 0000084F  47			    inc    edi
 00000850  C3			    ret
 00000851  FF 15 00000AAC R	@@: call   [lit]
 00000857  8B 04 8D		    mov    eax, [4+macro0+ecx*4]
	   00000ADC R
 0000085E  EB 20		    jmp    @f

 00000860			cNUM: 
 00000860  FF 15 00000AAC R	    call   [lit]
 00000866  8B 04 BD		    mov    eax, [edi*4]
	   00000000
 0000086D  47			    inc    edi
 0000086E  EB 10		    jmp    @f

 00000870			cSHORT:    
 00000870  FF 15 00000AAC R	    call   [lit]
 00000876  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 0000087D  C1 F8 05		    sar    eax, 5
 00000880  E8 0000000C		@@: call   literal
				    DROP
 00000885  AD		     1	    lodsd 
 00000886  C3			    ret

 00000887			alit: 
 00000887  C7 05 00000AAC R	    mov    [lit], offset adup
	   0000080C R
 00000891			literal: 
 00000891  E8 FFFFFF43		    call   qDUP
 00000896  8B 15 00000AC8 R	    mov    edx, [list]
 0000089C  89 15 00000ACC R	    mov    [list+4], edx
 000008A2  8B 15 00000ABC R	    mov    edx, [h]
 000008A8  89 15 00000AC8 R	    mov    [list], edx
 000008AE  C6 02 B8		    mov    byte ptr [edx], 0b8h
 000008B1  89 42 01		    mov    [1+edx], eax
 000008B4  83 05 00000ABC R	    add    [h], 5
	   05
 000008BB  C3			    ret

 000008BC			qCOMPILE: 
 000008BC  FF 15 00000AAC R	    call   [lit]
 000008C2  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 000008C9  83 E0 F0		    and    eax, -20o
 000008CC  E8 FFFFFDAE		    call   mFIND
 000008D1  75 08		    jnz    @f
				    DROP
 000008D3  AD		     1	    lodsd 
 000008D4  FF 24 8D		    jmp    [macro2+ecx*4]
	   000035FC R
 000008DB  E8 FFFFFDAF		@@: call   FIND
 000008E0  8B 04 8D		    mov    eax, [forth2+ecx*4]
	   00003814 R
 000008E7  0F 85 FFFFFDF8	@@: jnz    ABORT
 000008ED			call_: 
 000008ED  8B 15 00000ABC R	    mov    edx, [h]
 000008F3  89 15 00000AC8 R	    mov    [list], edx
 000008F9  C6 02 E8		    mov    byte ptr [edx], 0e8h
 000008FC  83 C2 05		    add    edx, 5
 000008FF  2B C2		    sub    eax, edx
 00000901  89 42 FC		    mov    [-4+edx], eax
 00000904  89 15 00000ABC R	    mov    [h], edx
				    DROP
 0000090A  AD		     1	    lodsd 
 0000090B  C3			    ret

 0000090C			COMPILE: 
 0000090C  FF 15 00000AAC R	    call   [lit]
 00000912  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00000919  83 E0 F0		    and    eax, -20o
 0000091C  E8 FFFFFD5E		    call   mFIND
 00000921  8B 04 8D		    mov    eax, [macro2+ecx*4]
	   000035FC R
 00000928  EB BD		    jmp    @b

 0000092A			SHORT_: 
 0000092A  C7 05 00000AAC R	    mov    lit, offset alit
	   00000887 R
				    DUP_
 00000934  8D 76 FC	     1	    lea    esi, [esi-4]
 00000937  89 06	     1	    mov    [esi], eax
 00000939  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00000940  C1 F8 05		    sar    eax, 5
 00000943  C3			    ret

 00000944			NUM: 
 00000944  C7 05 00000AAC R	    mov    [lit], offset alit
	   00000887 R
				    DUP_
 0000094E  8D 76 FC	     1	    lea    esi, [esi-4]
 00000951  89 06	     1	    mov    [esi], eax
 00000953  8B 04 BD		    mov    eax, [edi*4]
	   00000000
 0000095A  47			    inc    edi
 0000095B  C3			    ret

 0000095C			comma: 
 0000095C  B9 00000004		    mov    ecx, 4
 00000961  8B 15 00000ABC R	@@: mov    edx, [h]
 00000967  89 02		    mov    [edx], eax
 00000969  8B 06		    mov    eax, [esi] ; drop
 0000096B  8D 14 11		    lea    edx, [edx+ecx]
 0000096E  8D 76 04		    lea    esi, [esi+4]
 00000971  89 15 00000ABC R	    mov    [h], edx
 00000977  C3			    ret

 00000978			comma1: 
 00000978  B9 00000001		    mov    ecx, 1
 0000097D  EB E2		    jmp    @b

 0000097F			comma2: 
 0000097F  B9 00000002		    mov    ecx, 2
 00000984  EB DB		    jmp    @b

 00000986			comma3: 
 00000986  B9 00000003		    mov    ecx, 3
 0000098B  EB D4		    jmp    @b

 0000098D			semi: 
 0000098D  8B 15 00000ABC R	    mov    edx, [H]
 00000993  83 EA 05		    sub    edx, 5
 00000996  39 15 00000AC8 R	    cmp    [list], edx
 0000099C  75 08		    jnz    @f
 0000099E  80 3A E8		    cmp    byte ptr [edx], 0e8h
 000009A1  75 03		    jnz    @f
 000009A3  FE 02		    inc    byte ptr [edx] ; jmp
 000009A5  C3			    ret
 000009A6  C6 42 05 C3		@@: mov    byte ptr [5+edx], 0c3h ; ret
 000009AA  FF 05 00000ABC R	    inc    [H]
 000009B0  C3			    ret

 000009B1			then: 
 000009B1  89 25 00000AC8 R	    mov    [list], esp
 000009B7  8B 15 00000ABC R	    mov    edx, [h]
 000009BD  2B D0		    sub    edx, eax
 000009BF  88 50 FF		    mov    [-1+eax], DL
				    DROP
 000009C2  AD		     1	    lodsd 
 000009C3  C3			    ret

 000009C4			begin: 
 000009C4  89 25 00000AC8 R	    mov    [list], esp
 000009CA			here: 
				    DUP_
 000009CA  8D 76 FC	     1	    lea    esi, [esi-4]
 000009CD  89 06	     1	    mov    [esi], eax
 000009CF  A1 00000ABC R	    mov    eax, [h]
 000009D4  C3			    ret

 000009D5			qlit: 
 000009D5  8B 15 00000ABC R	    mov    edx, [h]
 000009DB  8D 52 FB		    lea    edx, [edx-5]
 000009DE  39 15 00000AC8 R	    cmp    [list], edx
 000009E4  75 33		    jnz    @f
 000009E6  80 3A B8		    cmp    byte ptr [edx], 0b8h
 000009E9  75 2E		    jnz    @f
				    DUP_
 000009EB  8D 76 FC	     1	    lea    esi, [esi-4]
 000009EE  89 06	     1	    mov    [esi], eax
 000009F0  A1 00000ACC R	    mov    eax, [list+4]
 000009F5  A3 00000AC8 R	    mov    [list], eax
 000009FA  8B 42 01		    mov    eax, [1+edx]
 000009FD  81 7A FB		    cmp    dword ptr [edx-5], 89fc768dh ; dup
	   89FC768D
 00000A04  74 0B		    jz     q1
 00000A06  89 15 00000ABC R	    mov    [h], edx
 00000A0C  E9 FFFFFDB2		    jmp    cdrop            
 00000A11			q1: 
 00000A11  83 05 00000ABC R	    add    [h], -10 ; flag nz
	   F6
 00000A18  C3			    ret
 00000A19  33 D2		@@: xor    edx, edx ; flag z
 00000A1B  C3			    ret

 00000A1C			less: 
 00000A1C  39 06		    cmp    [esi], eax
 00000A1E  78 02		    js     @f ; flag nz
 00000A20  33 C9		    xor    ecx, ecx ; flag z
 00000A22  C3			@@: ret

 00000A23			qIGNORE: 
 00000A23  F7 04 BD		    test   dword ptr [-4+edi*4], -20o
	   FFFFFFFC
	   FFFFFFF0
 00000A2E  75 02		    jnz    nul
 00000A30  5F			    pop    edi
 00000A31  5F			    pop    edi
 00000A32			nul: 
 00000A32  C3			    ret

 00000A33			jump: 
 00000A33  5A			    pop    edx
 00000A34  03 D0		    add    edx, eax
 00000A36  8D 54 82 05		    lea    edx, [5+eax*4+edx]
 00000A3A  03 52 FC		    add    edx, [-4+edx]
				    DROP
 00000A3D  AD		     1	    lodsd 
 00000A3E  FF E2		    jmp    edx

 00000A40			LOAD: ;mov    eax, blk !! loading crt blk bug
 00000A40  83 E8 12		     sub    eax, 18
 00000A43  C1 E0 08		    shl    eax, 10-2
 00000A46  8B 1D 0000002D R	    mov    ebx, [blocks_adr]
 00000A4C  C1 EB 02		    shr    ebx, 2
 00000A4F  03 C3		    add    eax, ebx
 00000A51  57			    push   edi
 00000A52  8B F8		    mov    edi, eax
				    DROP
 00000A54  AD		     1	    lodsd 
 00000A55			INTER:  
 00000A55  8B 14 BD		    mov    edx, [edi*4]
	   00000000
 00000A5C  47			    inc    edi
 00000A5D  83 E2 0F		    and    edx, 17o
 00000A60  FF 14 95		    call   spaces[edx*4]
	   00000A6C R
 00000A67  EB EC		    jmp    INTER

				ALIGN 4
 00000A6C 00000A23 R		spaces     dd   offset qIGNORE,  offset execute, offset NUM                                    
	   000006BD R
	   00000944 R
 00000A78 00000749 R		aDEFINE    dd 5+offset MACRO_                                               
 00000A7C  000008BC R		           dd   offset qCOMPILE, offset cNUM,    offset cSHORT, offset COMPILE                 
	   00000860 R
	   00000870 R
	   0000090C R
 00000A8C  0000092A R		           dd   offset SHORT_,   offset nul,     offset nul,    offset nul                     
	   00000A32 R
	   00000A32 R
	   00000A32 R
 00000A9C  0000081F R		           dd   offset variable, offset nul,     offset nul,    offset nul                     
	   00000A32 R
	   00000A32 R
	   00000A32 R
				                                                                                               
 00000AAC 0000080C R		lit        dd offset adup                                                                      
 00000AB0 00000000		mk         dd 0, 0, 0                                                                          
	   00000000
	   00000000
 00000ABC 00100000		H          dd 40000h*4 ; variable H , dictionary pointer HERE, where new definitions go                                                                     
 00000AC0 00000000		last       dd 0                                                                                
 00000AC4 00000000		class      dd 0                                                                                
 00000AC8 00000000		list       dd 0, 0                                                                             
	   00000000
 00000AD0 00000000		macros     dd 0                ; number of macros (?)                                                                
 00000AD4 00000000		forths     dd 0                ; number of forth words (?)


 00000AD8 F0000000		macro0 dd 170o shl 25 ; ;
 00000ADC  C19B1000		       dd ((140o shl 7+146o)shl 7+142o)shl 11 ; dup
 00000AE0  FF833620		       dd (((177o shl 7+140o)shl 7+146o)shl 7+142o)shl 4 ; ?dup
 00000AE4  C0278800		       dd (((140o shl 4+1)shl 4+3)shl 7+142o)shl 10 ; drop
 00000AE8  2C88C000		       dd (((2 shl 7+144o)shl 4+4)shl 4+6)shl 13 ; then
 00000AEC  C6957600		       dd ((((143o shl 4+4)shl 5+25o)shl 4+7)shl 4+6)shl 8 ; begin
 00000AF0  00000080 [		macro1 dd 128 dup (0)
	    00000000
	   ]
 00000CF0 C6664000		forth0 dd (((143o shl 4+3)shl 4+3)shl 4+2)shl 13 ; boot
 00000CF4  C7340000		       dd ((((143o shl 5) + 23o) shl 4) + 4o) shl 16 ; bye
				;       dd (((27o shl 4+5)shl 4+1)shl 5+21o)shl 14 ; warm
 00000CF8  C4B9A080		       dd ((((142o shl 4+5)shl 7+146o)shl 5+20o)shl 4+4)shl 5 ; PAAUSE_
 00000CFC  8AC84C00		       dd ((((21o shl 4+5)shl 5+22o)shl 4+1)shl 4+3)shl 10 ; MACRO
 00000D00  B1896400		       dd ((((26o shl 4+3)shl 4+1)shl 4+2)shl 7+144o)shl 8 ; FORTH
 00000D04  90000000		       dd 22o shl 27 ; c
 00000D08  811E2000		       dd (((20o shl 4+2)shl 4+3)shl 7+142o)shl 12 ; stop
 00000D0C  145C0000		       dd (((1 shl 4+4)shl 4+5)shl 7+140o)shl 13 ; read
 00000D10  B8B92000		       dd ((((27o shl 4+1)shl 4+7)shl 4+2)shl 4+4)shl 11 ; write
 00000D14  69000000		       dd (6 shl 5+22o)shl 23 ; nc
 00000D18  91C62AC0		       dd (((((22o shl 4+3)shl 5+21o)shl 5+21o)shl 4+5)shl 4+6)shl 5; command
 00000D1C  82274000		       dd (((20o shl 4+4)shl 4+4)shl 7+164o)shl 12 ; seek
 00000D20  145C1300		       dd ((((1 shl 4+4)shl 4+5)shl 7+140o)shl 5+23o)shl 8 ; ready
 00000D24  59100000		       dd ((5 shl 5+22o)shl 4+2)shl 19 ; ACT
 00000D28  8643B800		       dd (((20o shl 7+144o)shl 4+3) shl 5+27o)shl 11 ; SHOW
 00000D2C  A1AE0000		       dd (((24o shl 4+3)shl 4+5)shl 7+140o)shl 12 ; LOAD
 00000D30  C8828000		       dd (((144o shl 4+4)shl 4+1)shl 4+4)shl 13 ; here
 00000D34  FF472000		       dd (((177o shl 5+24o)shl 4+7)shl 4+2)shl 12 ; ?lit
 00000D38  D7F80000		       dd (153o shl 7+176o) shl 18 ; 3,
 00000D3C  D5F80000		       dd (152o shl 7+176o) shl 18 ; 2,
 00000D40  D3F80000		       dd (151o shl 7+176o) shl 18 ; 1,
 00000D44  FC000000		       dd 176o shl 25 ; ,
 00000D48  A2420000		       dd (((24o shl 4+4)shl 5+20o)shl 5+20o)shl 13 ; less
 00000D4C  E59A3880		       dd (((162o shl 7+146o)shl 5+21o)shl 7+142o)shl 6 ; jump
 00000D50  59493110		       dd (((((5 shl 5+22o)shl 5+22o)shl 4+4)shl 7+142o)shl 4+2)shl 3 ; accept
 00000D54  C4B80000		       dd ((142o shl 4+5)shl 7+140o)shl 14 ; pad
 00000D58  41582000		       dd ((((4 shl 4+1)shl 4+5)shl 5+20o)shl 4+4)shl 11 ; erase
 00000D5C  91E29800		       dd (((22o shl 4+3)shl 7+142o)shl 5+23o)shl 11 ; copy
 00000D60  8A8F4000		       dd (((21o shl 4+5)shl 4+1)shl 7+164o)shl 12 ; mark
 00000D64  48E22000		       dd (((4 shl 5+21o)shl 7+142o)shl 4+2)shl 12 ; empt
 00000D68  48B90000		       dd (((4 shl 5+21o)shl 4+7)shl 4+2)shl 15 ; emit
 00000D6C  C0F57200		       dd ((((140o shl 4+7)shl 5+25o)shl 4+7)shl 4+2)shl 8 ; digit
 00000D70  D4917200		       dd ((((152o shl 4+4)shl 5+21o)shl 4+7)shl 4+2)shl 8 ; 2emit
 00000D74  EA000000		       dd 165o shl 25 ; .
 00000D78  C9D40000		       dd (144o shl 7+165o)shl 18 ; h.
 00000D7C  C9D58000		       dd ((144o shl 7+165o)shl 4+6)shl 14 ; h.n
 00000D80  90800000		       dd (22o shl 4+1)shl 23 ; CR
 00000D84  86259200		       dd ((((20o shl 7+142o)shl 4+5)shl 5+22o)shl 4+4)shl 7 ; space
 00000D88  C0776000		       dd (((140o shl 4+3)shl 5+27o)shl 4+6)shl 12 ; DOWN
 00000D8C  4C0E4000		       dd (((4 shl 7+140o)shl 4+7)shl 4+2)shl 13 ; edit
 00000D90  40000000		       dd 4 shl 28 ; E
 00000D94  A4400000		       dd (24o shl 5+21o)shl 22 ; lm
 00000D98  18800000		       dd (1 shl 5+21o)shl 23 ; rm
 00000D9C  A8AE2C80		       dd ((((25o shl 4+1)shl 4+5)shl 7+142o)shl 7+144o)shl 5 ; graphic
 00000DA0  24CA4000		       dd (((2 shl 4+4)shl 7+145o)shl 4+2)shl 13 ; text
 00000DA4  E893C660		       dd ((((164o shl 4+4)shl 5+23o)shl 7+143o)shl 4+3)shl 5 ; keyboard
 00000DA8  C098F300		       dd (((140o shl 4+4)shl 7+143o)shl 7+146o)shl 7 ; debug
 00000DAC  52000000		       dd (5 shl 4+2)shl 24 ; at
 00000DB0  F6A40000		       dd ((173o shl 4+5)shl 4+2)shl 17 ; +at
 00000DB4  CB300000		       dd (145o shl 5+23o)shl 20 ; xy
 00000DB8  B1E10000		       dd ((26o shl 4+3)shl 7+141o)shl 16 ; fov
 00000DBC  B3D8C000		       dd (((26o shl 4+7)shl 5+26o)shl 4+3)shl 14 ; fifo
 00000DC0  C6794000		       dd ((143o shl 4+3)shl 7+145o)shl 14 ; box
 00000DC4  A3B20000		       dd (((24o shl 4+7)shl 4+6)shl 4+4)shl 15 ; line
 00000DC8  91D0C400		       dd ((((22o shl 4+3)shl 5+24o)shl 4+3)shl 4+1)shl 10 ; color
 00000DCC  3912B100		       dd (((((3 shl 5+22o)shl 4+2)shl 4+5)shl 4+6)shl 4+2)shl 7 ; octant
 00000DD0  86200000		       dd (20o shl 7+142o)shl 20 ; sp
 00000DD4  A2C08000		       dd (((24o shl 4+5)shl 5+20o)shl 4+2)shl 14 ; last
 00000DD8  CCD89640		       dd (((((146o shl 4+6)shl 7+142o)shl 4+5)shl 5+22o))shl 5 ; unpack
 00000DDC  B4571000		       dd (((26o shl 5 + 21o) shl 4 + 5)shl 7+142o)shl 11 ; fmap
 00000DE0  B6668A80		       dd (((((26o shl 7 + 146o) shl 4 + 6o)shl 5 + 21o)shl 4 + 5o) shl 7) ; funmap
 00000DE4  791B6800		       dd (((((7o shl 5 + 22o) shl 4 + 3o) shl 4 + 6o) shl 7) + 150o) shl 8 ; icons0 791b6800h
 00000DE8  C7435C00		       dd ((((143o shl 5 + 24o) shl 4+3)shl 4+5)shl 7+140o)shl 5 ; bload
 00000DEC  C74E9A00		       dd (((143o shl 5 + 24o) shl 7 + 164o) shl 7 + 150o) shl 6 ; blk0
 00000DF0  CF741200		       dd 0cf741200h ; qwerty
 00000DF4  C143C4C0		       dd 0c143c4c0h ; dlopn
 00000DF8  C1478E20		       dd 0c1478e20h ; dlimp
				       
				       
 00000DFC  00000A00 [		forth1 dd 2560 dup (0)
	    00000000
	   ]
 000035FC 0000098D R		macro2 dd offset semi
 00003600  000007F4 R		       dd offset cdup
 00003604  000007D9 R		       dd offset qdup
 00003608  000007C3 R		       dd offset cdrop
 0000360C  000009B1 R		       dd offset then
 00003610  000009C4 R		       dd offset begin
 00003614  00000080 [		       dd 128 dup (0)
	    00000000
	   ]
 00003814 000004A3 R		forth2 dd offset notimpl ; boot
 00003818  00000007 R		       dd offset bye     ; warm
 0000381C  000005BC R		       dd offset PAAUSE_
 00003820  00000744 R		       dd offset MACRO_
 00003824  0000075F R		       dd offset FORTH
 00003828  00000625 R		       dd offset c_
 0000382C  000004A3 R		       dd offset notimpl ; stop
 00003830  000004A3 R		       dd offset notimpl ; readf
 00003834  000004A3 R		       dd offset notimpl ; writef
 00003838  000041DC R		       dd offset nc_
 0000383C  000004A3 R		       dd offset notimpl ; cmdf
 00003840  000004A3 R		       dd offset notimpl ; seekf
 00003844  000004A3 R		       dd offset notimpl ; readyf
 00003848  000005D9 R		       dd offset ACT
 0000384C  00000600 R		       dd offset SHOW
 00003850  00000A40 R		       dd offset LOAD
 00003854  000009CA R		       dd offset here
 00003858  000009D5 R		       dd offset qlit
 0000385C  00000986 R		       dd offset COMMA3
 00003860  0000097F R		       dd offset COMMA2
 00003864  00000978 R		       dd offset COMMA1
 00003868  0000095C R		       dd offset COMMA
 0000386C  00000A1C R		       dd offset less
 00003870  00000A33 R		       dd offset jump
 00003874  00004928 R		       dd offset ACCEPT
 00003878  00005432 R		       dd offset pad
 0000387C  00004120 R		       dd offset erase
 00003880  0000413C R		       dd offset copy
 00003884  0000062B R		       dd offset mark
 00003888  00000650 R		       dd offset empty
 0000388C  000042E5 R		       dd offset emit
 00003890  00004B9C R		       dd offset eDIG
 00003894  00004327 R		       dd offset emit2
 00003898  00004C0D R		       dd offset dot10
 0000389C  00004BC8 R		       dd offset hdot
 000038A0  00004BB6 R		       dd offset hdotn
 000038A4  000044FD R		       dd offset CR
 000038A8  0000431C R		       dd offset space
 000038AC  00004483 R		       dd offset DOWN
 000038B0  00005212 R		       dd offset edit
 000038B4  00005218 R		       dd offset E
 000038B8  00004517 R		       dd offset LMs
 000038BC  0000451E R		       dd offset RMs
 000038C0  00004261 R		       dd offset graphic
 000038C4  00004364 R		       dd offset text1
 000038C8  000045B0 R		       dd offset keyboard
 000038CC  00004187 R		       dd offset debug
 000038D0  00004525 R		       dd offset at
 000038D4  00004534 R		       dd offset pat
 000038D8  000041EA R		       dd offset xy_
 000038DC  000041F8 R		       dd offset fov_
 000038E0  00004260 R		       dd offset fifof
 000038E4  000043A0 R		       dd offset box
 000038E8  00004382 R		       dd offset line
 000038EC  00004254 R		       dd offset color
 000038F0  00004545 R		       dd offset octant
 000038F4  00004206 R		       dd offset sps
 000038F8  00004214 R		       dd offset last_
 000038FC  00004C5E R		       dd offset unpack
 00003900  000004AD R		       dd offset fmap
 00003904  000004C2 R		       dd offset funmap
 00003908  00000031 R		       dd offset icon0
 0000390C  000004CE R		       dd offset bload 
 00003910  0000003F R		       dd offset blk0
 00003914  00004783 R		       dd offset qwerty
 00003918  00000502 R		       dd offset dlopen
 0000391C  00000509 R		       dd offset dlimp
 00003920  00000200 [		       dd 512 dup (0)
	    00000000
	   ]

				COMMENT #
				boot: mov  AL, 0FEh ; Reset
				    out  64h, AL
				    jmp  $
				#

 00004120			erase: 
 00004120  8B C8		    mov    ecx, eax
 00004122  C1 E1 08		    shl    ecx, 8
				    DROP
 00004125  AD		     1	    lodsd 
 00004126  57			    push   edi
 00004127  8B F8		    mov    edi, eax
 00004129  83 EF 12		    sub    edi, 18
 0000412C  C1 E7 0A		    shl    edi, 2+8
 0000412F  03 3D 0000002D R	    add    edi, [blocks_adr]
 00004135  33 C0		    xor    eax, eax
 00004137  F3/ AB		    rep    stosd
 00004139  5F			    pop    edi
				    DROP
 0000413A  AD		     1	    lodsd 
 0000413B  C3			    ret

 0000413C			copy: 
 0000413C  83 F8 0C		    cmp    eax, 12   
 0000413F  0F 82 FFFFC5BB	    jc     ABORT1    
 00004145  8B F8		    mov    edi, eax  
 00004147  83 EF 12		    sub    edi, 18
 0000414A  C1 E7 0A		    shl    edi, 2+8  
 0000414D  56			    push   esi       
 0000414E  8B 35 00005054 R	    mov    esi, blk  
 00004154  83 EE 12		    sub    esi, 18
 00004157  C1 E6 0A		    shl    esi, 2+8  
 0000415A  B9 00000100		    mov    ecx, 256  
 0000415F  03 35 0000002D R	    add    esi, [blocks_adr]
 00004165  03 3D 0000002D R	    add    edi, [blocks_adr]
 0000416B  F3/ A5		    rep    movsd     
 0000416D  5E			    pop    esi       
 0000416E  A3 00005054 R	    mov    blk, eax  
				    DROP
 00004173  AD		     1	    lodsd 
 00004174  C3			    ret
				    
				; move dwords
				; ( sa da n -- )    
 00004175			move:
 00004175  8B C8		    mov    ecx, eax
				    DROP
 00004177  AD		     1	    lodsd 
 00004178  8B F8		    mov    edi, eax
 0000417A  C1 E7 02		    shl    edi, 2
				    DROP
 0000417D  AD		     1	    lodsd 
 0000417E  8B F0		    mov    esi, eax
 00004180  C1 E6 02		    shl    esi, 2
				    DROP
 00004183  AD		     1	    lodsd 
 00004184  F3/ A5		    rep    movsd
 00004186  C3			    ret

 00004187			debug: 
 00004187  C7 05 000041C8 R	    mov    xy, 3*10000h+(vc-2)*ih+3
	   000302B5
				    DUP_
 00004191  8D 76 FC	     1	    lea    esi, [esi-4]
 00004194  89 06	     1	    mov    [esi], eax
 00004196  A1 000005AD R	    mov    eax, God
 0000419B  FF 30		    push   [eax]
 0000419D  E8 00000A3A		    call   dot
				    DUP_
 000041A2  8D 76 FC	     1	    lea    esi, [esi-4]
 000041A5  89 06	     1	    mov    [esi], eax
 000041A7  58			    pop    eax
 000041A8  E8 00000A2F		    call   dot
				    DUP_
 000041AD  8D 76 FC	     1	    lea    esi, [esi-4]
 000041B0  89 06	     1	    mov    [esi], eax
 000041B2  A1 000005B6 R	    mov    eax, main
 000041B7  E8 00000A20		    call   dot
				    DUP_
 000041BC  8D 76 FC	     1	    lea    esi, [esi-4]
 000041BF  89 06	     1	    mov    [esi], eax
 000041C1  8B C6		    mov    eax, esi
 000041C3  E9 00000A14		    jmp    dot

 = 00000016			iw         equ 16+6
 = 0000001E			ih         equ 24+6
 = 0000002E			hc         equ hp/iw ; 46
 = 00000019			vc         equ vp/ih ; 25
				ALIGN 4
 000041C8 00030003		xy         dd 3*10000h+3 ; current x,y coordinate, x in high 16 bits
 000041CC 00000003		lm         dd 3
 000041D0 000003F4		rm         dd hc*iw ; 1012
 000041D4 00000000		xycr       dd 0
 000041D8 00004B00		fov        dd 10*(2*vp+vp/2)

 000041DC			nc_: 
				    DUP_
 000041DC  8D 76 FC	     1	    lea    esi, [esi-4]
 000041DF  89 06	     1	    mov    [esi], eax
 000041E1  B8 0000059C R	    mov    eax, (offset nc)
 000041E6  C1 E8 02		    shr    eax, 2
 000041E9  C3			    ret

 000041EA			xy_: 
				    DUP_
 000041EA  8D 76 FC	     1	    lea    esi, [esi-4]
 000041ED  89 06	     1	    mov    [esi], eax
 000041EF  B8 000041C8 R	    mov    eax, (offset xy)
 000041F4  C1 E8 02		    shr    eax, 2
 000041F7  C3			    ret

 000041F8			fov_: 
				    DUP_
 000041F8  8D 76 FC	     1	    lea    esi, [esi-4]
 000041FB  89 06	     1	    mov    [esi], eax
 000041FD  B8 000041D8 R	    mov    eax, (offset fov)
 00004202  C1 E8 02		    shr    eax, 2
 00004205  C3			    ret

 00004206			sps: DUP_
 00004206  8D 76 FC	     1	    lea    esi, [esi-4]
 00004209  89 06	     1	    mov    [esi], eax
 0000420B  B8 00000A6C R	    mov    eax, (offset spaces)
 00004210  C1 E8 02		    shr    eax, 2
 00004213  C3			    ret

 00004214			last_: DUP_
 00004214  8D 76 FC	     1	    lea    esi, [esi-4]
 00004217  89 06	     1	    mov    [esi], eax
 00004219  B8 00000AC0 R	    mov    eax, (offset last)
 0000421E  C1 E8 02		    shr    eax, 2
 00004221  C3			    ret

				;; BEGIN gen.asm
				;Generic graphics

				ALIGN 4
 00004224 01E80000		frame      dd 2000000h-hp*vp*2 ; 32 M
				;;!displ      dd 0f0000000h ; fujitsu
 00004228 0000F7DE		fore       dd 0f7deh ; foreground
 0000422C 00000000		xc         dd 0
 00004230 00000000		yc         dd 0

 00004234			rgb: 
 00004234  C1 C8 08		    ror    eax, 8
 00004237  66| C1 E8 02		    shr    AX, 2
 0000423B  C1 C8 06		    ror    eax, 6
 0000423E  C0 E8 03		    shr    AL, 3
 00004241  C1 C0 0B		    rol    eax, 6+5
 00004244  25 0000F7DE		    and    eax, 0f7deh
 00004249  C3			    ret

 0000424A			white: 
				    DUP_
 0000424A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000424D  89 06	     1	    mov    [esi], eax
 0000424F  B8 00FFFFFF		    mov    eax, 0ffffffh
 00004254			color: 
 00004254  E8 FFFFFFDB		    call   rgb
 00004259  A3 00004228 R	    mov    fore, eax
				    DROP
 0000425E  AD		     1	    lodsd 
 0000425F  C3			    ret

				COMMENT #
				north: 
				    mov  edx, 0cf8h
				    out  DX, eax
				    add  edx, 4
				    in   eax, DX
				    ret
				dev: mov  eax, 80001008h ; Find display, start at device 2
				    mov  ecx, 31-1 ; end with AGP: 10008, bus 1, dev 0
				@@:     DUP_
				        call north
				        and  eax, 0ff000000h
				        cmp  eax, 3000000h
				        DROP
				        jz   @f
				        add  eax, 800h
				        next @b
				@@: ret

				ati0: call dev
				    or   dword ptr [eax-4], 2 ; Enable memory
				    add  AL, 24h-8 ; look for prefetch
				    mov  CL, 5
				@@:     DUP_
				        call north
				        xor  AL, 8
				        jz   @f
				        DROP
				        sub  eax, 4
				        next @b
				    DUP_
				    call north
				    and  eax, 0fffffff0h
				@@: mov  displ, eax
				    DROP
				    ret

				#    

 00004260			fifof: 
				    DROP
 00004260  AD		     1	    lodsd 
 00004261			graphic: 
 00004261  C3			    ret

 00004262			switch:
 00004262  E8 FFFFC1D6		    call   draw_display
 00004267  E9 FFFFC350		    jmp    PAAUSE_

 0000426C			clip: 
 0000426C  8B 3D 000041C8 R	    mov    edi, xy
 00004272  8B CF		    mov    ecx, edi
 00004274  66| 85 C9		    test   CX, CX
 00004277  79 02		    jns    @f
 00004279  33 C9		    xor    ecx, ecx
 0000427B  81 E1 0000FFFF	@@: and    ecx, 0ffffh
 00004281  89 0D 00004230 R	    mov    yc, ecx
 00004287  69 C9 00000800	    imul   ecx, hp*2
 0000428D  C1 FF 10		    sar    edi, 16
 00004290  79 02		    jns    @f
 00004292  33 FF		    xor    edi, edi
 00004294  89 3D 0000422C R	@@: mov    xc, edi
 0000429A  8D 3C 79		    lea    edi, [edi*2+ecx]
 0000429D  03 3D 00004224 R	    add    edi, frame
 000042A3  C3			    ret

 000042A4			bit16: 
 000042A4  66| AD		    lodsw
 000042A6  86 C4		    xchg   AL, AH
 000042A8  B9 00000010		    mov    ecx, 16
 000042AD			b16: 
 000042AD  66| D1 E0		    shl    AX, 1
 000042B0  73 03		    jnc    @f
 000042B2  66| 89 17		    mov    [edi], DX
 000042B5  83 C7 02		@@: add    edi, 2
				    next   b16
 000042B8  49		     1	    dec    ecx
 000042B9  75 F2	     1	    jnz    b16
 000042BB  C3			    ret

 000042BC			bit32: 
 000042BC  66| AD		    lodsw
 000042BE  86 C4		    xchg   AL, AH
 000042C0  B9 00000010		    mov    ecx, 16
 000042C5			b32: 
 000042C5  D1 E0		    shl    eax, 1
 000042C7  73 15		    jnc    @f
 000042C9  66| 89 17		    mov    [edi], DX
 000042CC  66| 89 57 02		    mov    [edi+2], DX
 000042D0  66| 89 97		    mov    [edi+hp*2], DX
	   00000800
 000042D7  66| 89 97		    mov    [edi+hp*2+2], DX
	   00000802
 000042DE  83 C7 04		@@: add    edi, 4
				    next   b32
 000042E1  49		     1	    dec    ecx
 000042E2  75 E1	     1	    jnz    b32
 000042E4  C3			    ret

 000042E5			emit: 
 000042E5  E8 00000203		    call   qcr
 000042EA  56			    push   esi
 000042EB  57			    push   edi
 000042EC  52			    push   edx
 000042ED  6B C0 30		    imul   eax, 16*24/8
 000042F0  8B 35 00000029 R	    mov    esi, [icons_adr]
 000042F6  03 F0		    add    esi, eax
				;;!    lea    esi, icons[eax]
 000042F8  E8 FFFFFF6F		    call   clip
 000042FD  8B 15 00004228 R	    mov    edx, fore
 00004303  B9 00000018		    mov    ecx, 24
 00004308			@@:     
 00004308  51			    push   ecx
 00004309  E8 FFFFFF96		    call   bit16
 0000430E  81 C7 000007E0	    add    edi, (hp-16)*2
 00004314  59			    pop    ecx
				    next   @b
 00004315  49		     1	    dec    ecx
 00004316  75 F0	     1	    jnz    @b
 00004318  5A			    pop    edx
 00004319  5F			    pop    edi
 0000431A  5E			    pop    esi
 0000431B			BL_: 
				    DROP
 0000431B  AD		     1	    lodsd 
 0000431C			SPACE: 
 0000431C  81 05 000041C8 R	    add    xy, iw*10000h
	   00160000
 00004326  C3			    ret

 00004327			emit2: 
 00004327  56			    push   esi
 00004328  57			    push   edi
 00004329  52			    push   edx
 0000432A  6B C0 30		    imul   eax, 16*24/8
 0000432D  8B 35 00000029 R	    mov    esi, [icons_adr]
 00004333  03 F0		    add    esi, eax
				;;!    lea    esi, 4icons[eax]
 00004335  E8 FFFFFF32		    call   clip
 0000433A  8B 15 00004228 R	    mov    edx, fore
 00004340  B9 00000018		    mov    ecx, 24
 00004345  51			@@: push   ecx
 00004346  E8 FFFFFF71		    call   bit32
 0000434B  81 C7 00000FC0	    add    edi, (2*hp-16*2)*2
 00004351  59			    pop    ecx
				    next   @b
 00004352  49		     1	    dec    ecx
 00004353  75 F0	     1	    jnz    @b
 00004355  5A			    pop    edx
 00004356  5F			    pop    edi
 00004357  5E			    pop    esi
 00004358  81 05 000041C8 R	    add    xy, iw*10000h*2
	   002C0000
				    DROP
 00004362  AD		     1	    lodsd 
 00004363  C3			    ret

 00004364			text1: 
 00004364  E8 FFFFFEE1		    call   WHITE
 00004369  C7 05 000041CC R	    mov    lm, 3
	   00000003
 00004373  C7 05 000041D0 R	    mov    rm, hc*iw
	   000003F4
 0000437D  E9 00000152		    jmp    TOP

 00004382			line: 
 00004382  E8 FFFFFEE5		    call   clip
 00004387  8B 0E		    mov    ecx, [esi]
 00004389  D1 E1		    shl    ecx, 1
 0000438B  2B F9		    sub    edi, ecx
 0000438D  8B C8		    mov    ecx, eax
 0000438F  A1 00004228 R	    mov    eax, fore
 00004394  F3/ 66| AB		    rep    stosw
 00004397  FF 05 000041C8 R	    inc    xy
				    DROP
 0000439D  AD		     1	    lodsd 
				    DROP
 0000439E  AD		     1	    lodsd 
 0000439F  C3			    ret

 000043A0			box: 
 000043A0  E8 FFFFFEC7		    call   clip
 000043A5  3D 00000301		    cmp    eax, vp+1
 000043AA  78 05		    js     @f
 000043AC  B8 00000300		    mov    eax, vp
 000043B1  8B C8		@@: mov    ecx, eax
 000043B3  2B 0D 00004230 R	    sub    ecx, yc
 000043B9  7E 31		    jng    no
 000043BB  81 3E 00000401	    cmp    dword ptr [esi], hp+1
 000043C1  78 06		    js     @f
 000043C3  C7 06 00000400	    mov    dword ptr [esi], hp
 000043C9  A1 0000422C R	@@: mov    eax, xc
 000043CE  29 06		    sub    [esi], eax
 000043D0  7E 1A		    jng    no
 000043D2  BA 00000400		    mov    edx, hp
 000043D7  2B 16		    sub    edx, [esi]
 000043D9  D1 E2		    shl    edx, 1
 000043DB  A1 00004228 R	    mov    eax, fore
 000043E0  51			@@: push   ecx
 000043E1  8B 0E		    mov    ecx, [esi]
 000043E3  F3/ 66| AB		    rep    stosw
 000043E6  03 FA		    add    edi, edx
 000043E8  59			    pop    ecx
				    next   @b
 000043E9  49		     1	    dec    ecx
 000043EA  75 F4	     1	    jnz    @b
 000043EC			no: DROP
 000043EC  AD		     1	    lodsd 
				    DROP
 000043ED  AD		     1	    lodsd 
 000043EE  C3			    ret

				;; END gen.asm

 = 00FFFF00			yellow     equ 0ffff00h
 000043EF			CYAN: 
				    DUP_
 000043EF  8D 76 FC	     1	    lea    esi, [esi-4]
 000043F2  89 06	     1	    mov    [esi], eax
 000043F4  B8 0000FFFF		    mov    eax, 0ffffh
 000043F9  E9 FFFFFE56		    jmp    color
 000043FE			MAGENTA: 
				    DUP_
 000043FE  8D 76 FC	     1	    lea    esi, [esi-4]
 00004401  89 06	     1	    mov    [esi], eax
 00004403  B8 00FF00FF		    mov    eax, 0ff00ffh
 00004408  E9 FFFFFE47		    jmp    color
 0000440D			SILVER:    
				    DUP_
 0000440D  8D 76 FC	     1	    lea    esi, [esi-4]
 00004410  89 06	     1	    mov    [esi], eax
 00004412  B8 00C0C0C0		    mov    eax, 0c0c0c0h
 00004417  E9 FFFFFE38		    jmp    color
 0000441C			BLUE: 
				    DUP_
 0000441C  8D 76 FC	     1	    lea    esi, [esi-4]
 0000441F  89 06	     1	    mov    [esi], eax
 00004421  B8 004040FF		    mov    eax, 4040ffh
 00004426  E9 FFFFFE29		    jmp    color
 0000442B			RED: 
				    DUP_
 0000442B  8D 76 FC	     1	    lea    esi, [esi-4]
 0000442E  89 06	     1	    mov    [esi], eax
 00004430  B8 00FF0000		    mov    eax, 0ff0000h
 00004435  E9 FFFFFE1A		    jmp    color
 0000443A			GREEN: 
				    DUP_
 0000443A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000443D  89 06	     1	    mov    [esi], eax
 0000443F  B8 8000FF00		    mov    eax, 8000ff00h
 00004444  E9 FFFFFE0B		    jmp    color

 00004449  0000000B [		history    db 11 dup (0)
	    00
	   ]

 00004454			ECHO_: 
 00004454  56			    push   esi
 00004455  B9 0000000A		    mov    ecx, 11-1
 0000445A  8D 3D 00004449 R	    lea    edi, history
 00004460  8D 77 01		    lea    esi, [1+edi]
 00004463  F3/ A4		    rep    movsb
 00004465  5E			    pop    esi
 00004466  A2 00004453 R	    mov    history+11-1, AL
				    DROP
 0000446B  AD		     1	    lodsd 
 0000446C  C3			    ret

 0000446D			RIGHT: 
				    DUP_
 0000446D  8D 76 FC	     1	    lea    esi, [esi-4]
 00004470  89 06	     1	    mov    [esi], eax
 00004472  B9 0000000B		    mov    ecx, 11
 00004477  8D 3D 00004449 R	    lea    edi, history
 0000447D  33 C0		    xor    eax, eax
 0000447F  F3/ AA		    rep    stosb
				    DROP
 00004481  AD		     1	    lodsd 
 00004482  C3			    ret

 00004483			DOWN: 
				    DUP_
 00004483  8D 76 FC	     1	    lea    esi, [esi-4]
 00004486  89 06	     1	    mov    [esi], eax
 00004488  33 D2		    xor    edx, edx
 0000448A  B9 0000001E		    mov    ecx, ih
 0000448F  F7 F1		    div    ecx
 00004491  8B C2		    mov    eax, edx
 00004493  81 C2 00037FE5	    add    edx, 3*10000h+8000h-ih+3
 00004499  89 15 000041C8 R	    mov    xy, edx
 0000449F			ZERO:
 0000449F  85 C0		    test   eax, eax
 000044A1  B8 00000000		    mov    eax, 0
 000044A6  75 01		    jnz    @f
 000044A8  40			    inc    eax
 000044A9  C3			@@: ret

 000044AA			blank: 
				    DUP_
 000044AA  8D 76 FC	     1	    lea    esi, [esi-4]
 000044AD  89 06	     1	    mov    [esi], eax
 000044AF  33 C0		    xor    eax, eax
 000044B1  A3 000041C8 R	    mov    xy, eax
 000044B6  E8 FFFFFD99		    call   color
				    DUP_
 000044BB  8D 76 FC	     1	    lea    esi, [esi-4]
 000044BE  89 06	     1	    mov    [esi], eax
 000044C0  B8 00000400		    mov    eax, hp
				    DUP_
 000044C5  8D 76 FC	     1	    lea    esi, [esi-4]
 000044C8  89 06	     1	    mov    [esi], eax
 000044CA  B8 00000300		    mov    eax, vp
 000044CF  E9 FFFFFECC		    jmp    box

 000044D4			TOP: 
 000044D4  8B 0D 000041CC R	    mov    ecx, lm
 000044DA  C1 E1 10		    shl    ecx, 16
 000044DD  83 C1 03		    add    ecx, 3
 000044E0  89 0D 000041C8 R	    mov    xy, ecx
 000044E6  89 0D 000041D4 R	    mov    xycr, ecx
 000044EC  C3			    ret

 000044ED			qcr: 
 000044ED  66| 8B 0D		    mov    CX, word ptr xy+2 ; cy 
	   000041CA R
 000044F4  66| 3B 0D		    cmp    CX, word ptr rm ; is at the end of line(rm)
	   000041D0 R
 000044FB  78 19		    js     @f
 000044FD			cr: 
 000044FD  8B 0D 000041CC R	    mov    ecx, lm
 00004503  C1 E1 10		    shl    ecx, 16
 00004506  66| 8B 0D		    mov    CX, word ptr xy
	   000041C8 R
 0000450D  83 C1 1E		    add    ecx, ih
 00004510  89 0D 000041C8 R	    mov    xy, ecx
 00004516  C3			@@: ret

 00004517			LMs: 
 00004517  A3 000041CC R	    mov    lm, eax
				    DROP
 0000451C  AD		     1	    lodsd 
 0000451D  C3			    ret

 0000451E			RMs: 
 0000451E  A3 000041D0 R	    mov    rm, eax
				    DROP
 00004523  AD		     1	    lodsd 
 00004524  C3			    ret

 00004525			at: 
 00004525  66| A3		    mov    word ptr xy, AX  ; cy coordonate
	   000041C8 R
				    DROP
 0000452B  AD		     1	    lodsd 
 0000452C  66| A3		    mov    word ptr xy+2, AX ; cx
	   000041CA R
				    DROP
 00004532  AD		     1	    lodsd 
 00004533  C3			    ret

 00004534			pAT: 
 00004534  66| 01 05		    add    word ptr xy, AX  ; add ax to cy
	   000041C8 R
				    DROP
 0000453B  AD		     1	    lodsd 
 0000453C  66| 01 05		    add    word ptr xy+2, AX ; add ax  to cx
	   000041CA R
				    DROP
 00004543  AD		     1	    lodsd 
 00004544  C3			    ret

 00004545			octant: 
				    DUP_
 00004545  8D 76 FC	     1	    lea    esi, [esi-4]
 00004548  89 06	     1	    mov    [esi], eax
 0000454A  B8 00000043		    mov    eax, 43h ; poly -last y+ x+ ;23h ; last y+ x+
 0000454F  8B 56 04		    mov    edx, [4+esi]
 00004552  85 D2		    test   edx, edx
 00004554  79 07		    jns    @f
 00004556  F7 DA		    neg    edx
 00004558  89 56 04		    mov    [4+esi], edx
 0000455B  34 01		    xor    AL, 1
 0000455D  3B 16		@@: cmp    edx, [esi]
 0000455F  79 02		    jns    @f
 00004561  34 04		    xor    AL, 4
 00004563  C3			@@: ret

				; Keyboard

 00004564			EIGHT: 
 00004564  83 C7 0C		    add    edi, 12
 00004567  E8 00000008		    call   FOUR
 0000456C  E8 FFFFFDAB		    call   SPACE
 00004571  83 EF 10		    sub    edi, 16
 00004574			FOUR: 
 00004574  B9 00000004		    mov    ecx, 4
 00004579			FOUR1:  
 00004579  51			    push   ecx
				    DUP_
 0000457A  8D 76 FC	     1	    lea    esi, [esi-4]
 0000457D  89 06	     1	    mov    [esi], eax
 0000457F  33 C0		    xor    eax, eax
 00004581  8A 47 04		    mov    AL, [4+edi]
 00004584  47			    inc    edi
 00004585  E8 FFFFFD5B		    call   EMIT
 0000458A  59			    pop    ecx
				    next   FOUR1
 0000458B  49		     1	    dec    ecx
 0000458C  75 EB	     1	    jnz    FOUR1
 0000458E  C3			    ret

 0000458F			stack: 
 0000458F  BF 00003A94 R	    mov    edi, Godd-4
 00004594  8B 15 000005AD R	@@: mov    edx, God
 0000459A  39 3A		    cmp    [edx], edi
 0000459C  73 11		    jnc    @f
				    DUP_
 0000459E  8D 76 FC	     1	    lea    esi, [esi-4]
 000045A1  89 06	     1	    mov    [esi], eax
 000045A3  8B 07		    mov    eax, [edi]
 000045A5  83 EF 04		    sub    edi, 4
 000045A8  E8 00000657		    call   qDOT
 000045AD  EB E5		    jmp    @b
 000045AF  C3			@@: ret

 000045B0			KEYBOARD: 
 000045B0  E8 FFFFFDAF		    call   text1
 000045B5  8B 3D 00004900 R	    mov    edi, [board]
				    DUP_
 000045BB  8D 76 FC	     1	    lea    esi, [esi-4]
 000045BE  89 06	     1	    mov    [esi], eax
 000045C0  A1 00004910 R	    mov    eax, [keyc]
 000045C5  E8 FFFFFC8A		    call   color
 000045CA  C7 05 000041D0 R	    mov    [rm], hc*iw
	   000003F4
 000045D4  C7 05 000041CC R	    mov    [lm], hp-9*iw+3
	   0000033D
 000045DE  C7 05 000041C8 R	    mov    [xy], (hp-9*iw+3)*10000h+vp-4*ih+3
	   033D028B
 000045E8  E8 FFFFFF77		    call   EIGHT
 000045ED  E8 FFFFFF72		    call   EIGHT
 000045F2  E8 FFFFFF6D		    call   EIGHT
 000045F7  E8 FFFFFF01		    call   CR
 000045FC  81 05 000041C8 R	    add    [xy], 4*iw*10000h
	   00580000
 00004606  8B 3D 00004904 R	    mov    edi, [shift]
 0000460C  83 C7 0C		    add    edi, 4*4-4
 0000460F  B9 00000003		    mov    ecx, 3
 00004614  E8 FFFFFF60		    call   FOUR1
 00004619  C7 05 000041CC R	    mov    [lm], 3
	   00000003
 00004623  66| C7 05		    mov    word ptr [xy+2], 3
	   000041CA R
	   0003
 0000462C  E8 FFFFFF5E		    call   stack
 00004631  66| C7 05		    mov    word ptr [xy+2], hp-(11+9)*iw+3
	   000041CA R
	   024B
 0000463A  8D 3D 00004445 R	    lea    edi, [history-4]
 00004640  B9 0000000B		    mov    ecx, 11
 00004645  E9 FFFFFF2F		    jmp    FOUR1

 0000464A 0D 0A 01 0C		alpha      db 15o, 12o,  1 , 14o
 0000464E  14 02 06 08		           db 24o,  2 ,  6 , 10o
 00004652  13 09 0F 11		           db 23o, 11o, 17o, 21o
 00004656  12 0B 0E 07		           db 22o, 13o, 16o,  7
 0000465A  05 03 04 16		           db  5 ,  3 ,  4 , 26o
 0000465E  17 24 15 10		           db 27o, 44o, 25o, 20o
				           
 00004662 19 1A 1B 00		graphics   db 31o, 32o, 33o,  0 
 00004666  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 0000466A  1F 20 21 2F		           db 37o, 40o, 41o, 57o
 0000466E  29 28 2A 2C		           db 51o, 50o, 52o, 54o ; : ; ! @
 00004672  26 22 25 2E		           db 46o, 42o, 45o, 56o ; Z J . ,
 00004676  2D 27 2B 23		           db 55o, 47o, 53o, 43o ; * / + -
				           
 0000467A 19 1A 1B 00		numbers    db 31o, 32o, 33o,  0
 0000467E  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 00004682  1F 20 21 00		           db 37o, 40o, 41o,  0
 00004686  00 00 00 00		           db  0,   0 ,  0 ,  0
 0000468A  00 00 00 00		           db  0,   0 ,  0 ,  0
 0000468E  00 00 00 00		           db  0,   0 ,  0 ,  0
				           
 00004692 19 1A 1B 00		octals     db 31o, 32o, 33o,  0
 00004696  1C 1D 1E 18		           db 34o, 35o, 36o, 30o
 0000469A  1F 20 21 00		           db 37o, 40o, 41o,  0
 0000469E  00 05 13 0A		           db  0 ,  5 , 23o, 12o
 000046A2  00 10 04 0E		           db  0 , 20o,  4 , 16o
 000046A6  00 00 00 00		           db  0 ,  0 ,  0 ,  0

 000046AA			LETTER: 
 000046AA  8B 15 00004900 R	    mov    edx, [board]
 000046B0  F6 05 00004743 R	    test   byte ptr [isqwerty], 0ffh
	   FF
 000046B7  75 09		    jnz    QWLETTER
 000046B9			CMLETTER:    
 000046B9  3C 04		    cmp    AL, 4
 000046BB  79 01		    jns     @f
 000046BD  C3			    ret
 000046BE			@@: 
 000046BE  8A 04 10		    mov    AL, [edx][eax]
 000046C1  C3			    ret

 000046C2			QWLETTER:
 000046C2  81 FA 00004646 R	    cmp    edx, offset alpha - 4
 000046C8  74 1F		    je     @f
 000046CA  81 FA 0000465E R	    cmp    edx, offset graphics - 4
 000046D0  74 17		    je     @f
 000046D2  81 FA 00004676 R	    cmp    edx, offset numbers - 4
 000046D8  74 0F		    je     @f
 000046DA  81 FA 0000468E R	    cmp    edx, offset octals - 4
 000046E0  74 07		    je     @f
 000046E2  E8 00000040		    call   QWADJUST
 000046E7  EB D0		    jmp    CMLETTER

 000046E9			@@: 
 000046E9  3C 3A		    cmp    al, 72o
 000046EB  78 04		    js     @f
 000046ED  2C 3A		    sub    al, 72o
 000046EF  EB 20		    jmp    QWDECODE
 000046F1			@@: 
 000046F1  3C 04		    cmp    al, 4
 000046F3  8A C8		    mov        cl, al
 000046F5  78 25		    js     @f
 000046F7  B1 01		    mov    cl, 1
 000046F9  3C 01		    cmp    al, 1  ; esc
 000046FB  74 1F		    je     @f
 000046FD  3C 0E		    cmp    al, 14 ; bksp
 000046FF  74 1B		    je     @f
 00004701  FE C1		    inc    cl
 00004703  3C 39		    cmp    al, 57 ; space
 00004705  74 15		    je     @f
 00004707  FE C1		    inc    cl
 00004709  3C 1C		    cmp    al, 28 ; enter
 0000470B  74 0F		    je     @f
 0000470D  3C 38		    cmp    al, 56 ; alt
 0000470F  74 0B		    je     @f

 00004711			QWDECODE:
 00004711  BA 00004744 R	    mov    edx, offset qwkeys
 00004716  8A 04 10		    mov    AL, [edx][eax]
 00004719  84 C0		    test   AL, AL
 0000471B  C3			    ret

 0000471C  8A C1		@@: mov    al, cl
 0000471E  3C 04		    cmp    al, 4
 00004720  C3			    ret 

				    
 00004721  B8 00000000		@@: mov    eax, 0
 00004726  C3			    ret
 00004727			QWADJUST:
 00004727  F6 05 00004743 R	    test   byte ptr [isqwerty], 0ffh
	   FF
 0000472E  74 12		    jz     @f
 00004730  3C 04		    cmp    AL, 4
 00004732  78 0E		    js     @f
 00004734  3C 10		    cmp    AL, 20o
 00004736  78 E9		    js     @b
 00004738  3C 3A		    cmp    AL, 72o
 0000473A  79 E5		    jns    @b
 0000473C  8A 80 0000477A R	    mov    AL, [keys-20o+eax]    
 00004742  C3			@@: ret

 00004743 00			isqwerty   db   0

 00004744 00 01			qwkeys     db   0,   1
 00004746  19 1A 1B 1C 1D	           db 31o, 32o, 33o, 34o, 35o, 36o, 37o, 40o, 41o, 30o, 43o, 53o,   1 ; 14
	   1E 1F 20 21 18
	   23 2B 01
 00004753  00 17 0F 04 01	           db   0, 27o, 17o,  4o,  1o,  2o, 13o, 26o,  7o,  3o, 22o, 52o, 54o,   3      ; 28
	   02 0B 16 07 03
	   12 2A 2C 03
 00004761  00 05 08 10 0E	           db   0,  5o, 10o, 20o, 16o, 15o, 24o, 42o, 44o, 14o, 51o, 50o, 57o,   0      ; 42
	   0D 14 22 24 0C
	   29 28 2F 00
 0000476F  2D 26 15 0A 11	           db 55o, 46o, 25o, 12o, 21o, 23o,  6o, 11o, 56o, 45o, 47o,   0,   0,   0,   3 ; 56
	   13 06 09 2E 25
	   27 00 00 00 03
 0000477E  02 00 01 02 03	           db   2,   0,   1,   2,   3

 00004783			qwerty: ; ( isqwerty -- )
 00004783  A2 00004743 R	    mov    byte ptr [isqwerty], al
				    DROP
 00004788  AD		     1	    lodsd 
 00004789  C3			    ret   

 0000478A 10 11 12 13 00	keys       db 16, 17, 18, 19,  0,  0,  4,  5 ; 20
	   00 04 05
 00004792  06 07 00 00 03	           db  6,  7,  0,  0,  3,  3, 20, 21
	   03 14 15
 0000479A  16 17 00 00 08	           db 22, 23,  0,  0,  8,  9, 10, 11 ; 40
	   09 0A 0B
 000047A2  00 00 00 00 18	           db  0,  0,  0,  0, 24, 25, 26, 27
	   19 1A 1B
 000047AA  00 01 0C 0D 0E	           db  0,  1, 12, 13, 14, 15,  0,  0 ; 60 N
	   0F 00 00
 000047B2  03 02		           db  3,  2 ; alt space
				    
 000047B4			wkey:
				    DUP_
 000047B4  8D 76 FC	     1	    lea    esi, [esi-4]
 000047B7  89 06	     1	    mov    [esi], eax
 000047B9  33 C0		    xor    eax, eax
 000047BB  E8 FFFFBDFC		    call   PAAUSE_
 000047C0  56			    push   esi
 000047C1  57			    push   edi
				    
 000047C2  6A 00		    push   0
 000047C4  6A 00		    push   0
 000047C6  FF 35 00000134 R	    push   [hwndmain]
 000047CC  E8 00000000 E	    call   InvalidateRect
 000047D1  FF 35 00000134 R	    push   [hwndmain]
 000047D7  E8 00000000 E	    call   UpdateWindow
				    
 000047DC			wkey1:
 000047DC  E8 FFFFBB2F		    call   process_messages
				    
 000047E1  68 00000091		    push   145      ; VK_SCROLL
 000047E6  E8 00000000 E	    call   GetKeyState
 000047EB  A9 00000001		    test   eax, 1
 000047F0  C6 05 00004743 R	    mov    byte ptr [isqwerty], 1
	   01
 000047F7  74 07		    jz     @f
 000047F9  C6 05 00004743 R	    mov    byte ptr [isqwerty], 0
	   00
				    
 00004800  B9 000000FF		@@: mov    ecx, 255
 00004805  51			@@: push   ecx
 00004806  51			    push   ecx
 00004807  E8 00000000 E	    call   GetAsyncKeyState
 0000480C  59			    pop    ecx
 0000480D  A9 00000001		    test   eax, 1
 00004812  75 05		    jnz    @f
 00004814  49			    dec    ecx
 00004815  75 EE		    jnz    @b
 00004817  EB C3		    jmp    wkey1
 00004819			@@: 
				;    cmp    ecx, 164 ; alt
				;    test   eax, 00008000h
				;    jz     wkey1
				    
				    
 00004819  6A 00		@@: push   0
 0000481B  51			    push   ecx
 0000481C  E8 00000000 E	    call   MapVirtualKeyA
 00004821  0B C0		    or     eax, eax
 00004823  74 B7		    jz     wkey1
				    
				    
 00004825  3C 3A		@@: cmp    al, 72o
 00004827  73 B3		    jnc    wkey1
				;
 00004829  F6 05 00004743 R	    test   byte ptr [isqwerty], 0ffh
	   FF
 00004830  8A C8		    mov    cl, al
 00004832  75 0F		    jnz    @f
 00004834  3C 10		    cmp    al, 20o                                                   
 00004836  7C A4		    jl     wkey1
 00004838  8A 88 0000477A R	    mov    cl, [keys-20o+eax]
 0000483E			wkeyex:    
 0000483E  8A C1		    mov    al, cl
 00004840  5F			    pop    edi
 00004841  5E			    pop    esi
 00004842  C3			    ret
				    
 00004843  B1 01		@@: mov    cl, 1
 00004845  3C 01		    cmp    al, 1  ; esc
 00004847  74 F5		    je     wkeyex
 00004849  3C 0E		    cmp    al, 14 ; bksp
 0000484B  74 F1		    je     wkeyex
 0000484D  FE C1		    inc    cl
 0000484F  3C 39		    cmp    al, 57 ; space
 00004851  74 EB		    je     wkeyex

 00004853  8A C8		@@: mov    cl, al
 00004855  3C 04		    cmp    al, 4
 00004857  7D E5		    jnl    wkeyex
 00004859  80 C1 3A		    add    cl, 72o
 0000485C  EB E0		    jmp    wkeyex
				    
 0000485E			KEY: 
 0000485E  E9 FFFFFF51		    jmp    wkey

				    DUP_
 00004863  8D 76 FC	     1	    lea    esi, [esi-4]
 00004866  89 06	     1	    mov    [esi], eax
 00004868  33 C0		    xor    eax, eax
 0000486A  E8 FFFFBD4D		@@: call   PAAUSE_
 0000486F  E4 64		    in     AL, 144o
 00004871  A8 01		    test   AL, 1
 00004873  74 F5		    jz     @b                                    
 00004875  E4 60		    in     AL, 140o
 00004877  A8 F0		    test   AL, 360o
 00004879  74 EF		    jz     @b
 0000487B  3C 3A		    cmp    AL, 72o
 0000487D  73 EB		    jnc    @b
 0000487F  8A 80 0000477A R	    mov    AL, [keys-20o+eax]
 00004885  C3			    ret

				ALIGN 4
 00004888 00004925 R		graph0     dd offset nul0, offset nul0, offset nul0, offset ALPH0
	   00004925 R
	   00004925 R
	   00004B1B R
 00004898  00 00 05 00		           db  0 ,  0 ,  5 , 0 ;     a
 0000489C 00004A22 R		graph1     dd offset WORD0, offset X, offset LJ, offset ALPH
	   000049BB R
	   00004994 R
	   00004B43 R
 000048AC  15 25 05 00		           db 25o, 45o,  5 , 0 ; x . a
 000048B0 00004925 R		alpha0     dd offset nul0, offset nul0, offset NUMBER, offset STAR0
	   00004925 R
	   00004ABB R
	   00004B2D R
 000048C0  00 21 2D 00		           db  0 , 41o, 55o, 0 ;   9 *
 000048C4 00004A22 R		alpha1     dd offset WORD0, offset X, offset LJ, offset GRAPH
	   000049BB R
	   00004994 R
	   00004B55 R
 000048D4  15 25 2D 00		           db 25o, 45o, 55o, 0 ; x . *
 000048D8 00004925 R		numb0      dd offset nul0, offset MINUS, offset ALPHn, offset OCTAL
	   00004AB1 R
	   00004B1A R
	   00004A68 R
 000048E8  23 05 0E 00		           db 43o,  5 , 16o, 0 ; - a f
 000048EC 00004AB8 R		numb1      dd offset NUMBER0, offset Xn, offset ENDN, offset NUMBER0
	   00004A8B R
	   00004B0E R
	   00004AB8 R
 000048FC  15 25 00 00		           db 25o, 45o,  0 , 0 ; x .

 00004900 00004646 R		board      dd offset alpha-4
 00004904 000048B0 R		shift      dd offset alpha0
 00004908 0000000A		base       dd 10
 0000490C 00004A2A R		current    dd offset decimal
 00004910 00FFFF00		keyc       dd yellow
 00004914 00000001		chars      dd 1
 00004918 000006A3 R		aword      dd offset EX1
 0000491C 00000A32 R		anumber    dd offset nul
 00004920 00000001		words      dd 1
 00004924 00			rw_no_cr   db 0

 00004925			nul0: 
				    DROP
 00004925  AD		     1	    lodsd 
 00004926  EB 16		    jmp    @f
				    
 00004928			ACCEPT:
 00004928			acceptn: 
 00004928  C7 05 00004904 R	    mov    [shift], offset alpha0
	   000048B0 R
 00004932  8D 3D 00004646 R	    lea    edi, alpha-4
 00004938			ACCEPT1: 
 00004938  89 3D 00004900 R	    mov    [board], edi
 0000493E  E8 FFFFFF1B		@@: call   KEY
 00004943  3C 04		    cmp    AL, 4
 00004945  0F 89 00000225	    jns    first
 0000494B  8B 15 00004904 R	    mov    edx, [shift]
 00004951  FF 24 82		    jmp    dword ptr [edx+eax*4]

 00004954 1C			bits       db 28

 00004955  83 C0 50		@@: add    eax, 120o
 00004958  B1 07		    mov    CL, 7
 0000495A  EB 0D		    jmp    @f
				    
 0000495C			PACK: 
 0000495C  3C 10		    cmp    AL, 20o
 0000495E  73 F5		    jnc    @b
 00004960  B1 04		    mov    CL, 4
 00004962  A8 08		    test   AL, 10o
 00004964  74 03		    jz     @f
 00004966  41			    inc    ecx
 00004967  34 18		    xor    AL, 30o
 00004969  8B D0		@@: mov    edx, eax
 0000496B  8A E9		    mov    CH, CL
 0000496D  38 0D 00004954 R	@@: cmp    [bits], CL
 00004973  73 08		    jnc    @f
 00004975  D0 E8		    shr    AL, 1
 00004977  72 22		    jc     FULL
 00004979  FE C9		    dec    CL
 0000497B  EB F0		    jmp    @b
 0000497D  D3 26		@@: shl    dword ptr [esi], CL
 0000497F  31 06		    xor    [esi], eax
 00004981  28 0D 00004954 R	    sub    [bits], CL
 00004987  C3			    ret

 00004988			LJ0: 
 00004988  8A 0D 00004954 R	    mov    CL, [bits]
 0000498E  80 C1 04		    add    CL, 4
 00004991  D3 26		    shl    dword ptr [esi], CL
 00004993  C3			    ret

 00004994			LJ: 
 00004994  E8 FFFFFFEF		    call   LJ0
				    DROP
 00004999  AD		     1	    lodsd 
 0000499A  C3			    ret

 0000499B			FULL: 
 0000499B  E8 FFFFFFE8		    call   LJ0
 000049A0  FF 05 00004920 R	    inc    words
 000049A6  C6 05 00004954 R	    mov    bits, 28
	   1C
 000049AD  28 2D 00004954 R	    sub    bits, CH
 000049B3  8B C2		    mov    eax, edx
				    DUP_
 000049B5  8D 76 FC	     1	    lea    esi, [esi-4]
 000049B8  89 06	     1	    mov    [esi], eax
 000049BA  C3			    ret

 000049BB			X:  
 000049BB  E8 FFFFFAAD		    call   RIGHT
 000049C0  A1 00004920 R	    mov    eax, words
 000049C5  8D 34 86		    lea    esi, [eax*4+esi]
				    DROP
 000049C8  AD		     1	    lodsd 
 000049C9  E9 FFFFFF5A		    jmp    ACCEPT

 000049CE			WORD_: 
 000049CE  E8 FFFFFA9A		    call   RIGHT
 000049D3  C7 05 00004920 R	    mov    words, 1
	   00000001
 000049DD  C7 05 00004914 R	    mov    chars, 1
	   00000001
				    DUP_
 000049E7  8D 76 FC	     1	    lea    esi, [esi-4]
 000049EA  89 06	     1	    mov    [esi], eax
 000049EC  C7 06 00000000	    mov    dword ptr [esi], 0
 000049F2  C6 05 00004954 R	    mov    bits, 28
	   1C
 000049F9			WORD1:  
 000049F9  E8 FFFFFCAC		    call   LETTER
 000049FE  79 09		    jns    @f
 00004A00  8B 15 00004904 R	    mov    edx, [shift]
 00004A06  FF 24 82		    jmp    dword ptr [edx+eax*4]
 00004A09  84 C0		@@: test   AL, AL
 00004A0B  74 15		    jz     WORD0
				    DUP_
 00004A0D  8D 76 FC	     1	    lea    esi, [esi-4]
 00004A10  89 06	     1	    mov    [esi], eax
 00004A12  E8 FFFFFA3D		    call   ECHO_
 00004A17  E8 FFFFFF40		    call   PACK
 00004A1C  FF 05 00004914 R	    inc    chars

 00004A22			WORD0:   
				    DROP
 00004A22  AD		     1	    lodsd 
 00004A23  E8 FFFFFE36		    call   KEY
 00004A28  EB CF		    jmp    WORD1

 00004A2A			decimal: 
 00004A2A  C7 05 00004908 R	    mov    [base], 10
	   0000000A
 00004A34  C7 05 00004904 R	    mov    [shift], offset numb0
	   000048D8 R
 00004A3E  C7 05 00004900 R	    mov    [board], offset numbers-4
	   00004676 R
 00004A48  C3			    ret

 00004A49			hex: 
 00004A49  C7 05 00004908 R	    mov    [base], 16
	   00000010
 00004A53  C7 05 00004904 R	    mov    [shift], offset numb0 ; oct0
	   000048D8 R
 00004A5D  C7 05 00004900 R	    mov    [board], offset octals-4
	   0000468E R
 00004A67  C3			    ret

 00004A68			octal: 
 00004A68  81 35 0000490C R	    xor    [current], (offset decimal) 
	   00004A2A R
 00004A72  81 35 0000490C R	    xor    [current], (offset hex)
	   00004A49 R
 00004A7C  80 35 000048EA R	    xor    byte ptr numb0+18, 41o xor 16o ; f vs 9
	   2F
 00004A83  FF 15 0000490C R	    call   [current]
 00004A89  EB 2D		    jmp    NUMBER0

 00004A8B			Xn: DROP
 00004A8B  AD		     1	    lodsd 
				    DROP
 00004A8C  AD		     1	    lodsd 
 00004A8D  E9 FFFFFE96		    jmp    ACCEPTn

 00004A92 0E 0A 00 00		digit      db 14, 10,  0,  0
 00004A96  00 00 0C 00 00	           db  0,  0, 12,  0,  0,  0, 15,  0
	   00 0F 00
 00004A9E  0D 00 00 0B 00	           db 13,  0,  0, 11,  0,  0,  0,  0
	   00 00 00
 00004AA6  00 01 02 03 04	           db  0,  1,  2,  3,  4,  5,  6,  7
	   05 06 07
 00004AAE  08 09		           db  8,  9
 00004AB0 00			sign       db 0

 00004AB1			MINUS: 
 00004AB1  A2 00004AB0 R	    mov    [sign], AL
 00004AB6  EB 49		    jmp    NUMBER2

 00004AB8			NUMBER0: 
				    DROP
 00004AB8  AD		     1	    lodsd 
 00004AB9  EB 0F		    jmp    NUMBER3

 00004ABB			NUMBER: 
 00004ABB  FF 15 0000490C R	    call   [current]
 00004AC1  C6 05 00004AB0 R	    mov    [sign], 0
	   00
 00004AC8  33 C0		    xor    eax, eax
 00004ACA			NUMBER3: 
 00004ACA  E8 FFFFFD8F		    call   KEY
 00004ACF  E8 FFFFFBD6		    call   LETTER
 00004AD4  79 09		    jns    @f
 00004AD6  8B 15 00004904 R	    mov    edx, [shift]
 00004ADC  FF 24 82		    jmp    dword ptr [edx+eax*4]
 00004ADF  84 C0		@@: test   AL, AL
 00004AE1  74 D5		    jz     NUMBER0
 00004AE3  8A 80 00004A8E R	    mov    AL, [digit-4+eax]
 00004AE9  F6 05 00004AB0 R	    test   [sign], 37o
	   1F
 00004AF0  74 02		    jz     @f
 00004AF2  F7 D8		    neg    eax
 00004AF4  8B 16		@@: mov    edx, [esi]
 00004AF6  0F AF 15		    imul   edx, [base]
	   00004908 R
 00004AFD  03 D0		    add    edx, eax
 00004AFF  89 16		@@: mov    [esi], edx

 00004B01			NUMBER2:   
				    DROP
 00004B01  AD		     1	    lodsd 
 00004B02  C7 05 00004904 R	    mov    [shift], offset numb1
	   000048EC R
 00004B0C  EB BC		    jmp    NUMBER3

 00004B0E			ENDN: 
				    DROP
 00004B0E  AD		     1	    lodsd 
 00004B0F  FF 15 0000491C R	    call   [anumber]
 00004B15  E9 FFFFFE0E		    jmp    ACCEPTn

 00004B1A			ALPHn: 
				    DROP
 00004B1A  AD		     1	    lodsd 
 00004B1B			ALPH0: 
 00004B1B  C7 05 00004904 R	    mov    [shift], offset alpha0
	   000048B0 R
 00004B25  8D 3D 00004646 R	    lea    edi, [alpha-4]
 00004B2B  EB 10		    jmp    @f
 00004B2D			STAR0: 
 00004B2D  C7 05 00004904 R	    mov    [shift], offset graph0
	   00004888 R
 00004B37  8D 3D 0000465E R	    lea    edi, [graphics-4]
 00004B3D			@@: DROP
 00004B3D  AD		     1	    lodsd 
 00004B3E  E9 FFFFFDF5		    jmp    ACCEPT1

 00004B43			ALPH: 
 00004B43  C7 05 00004904 R	    mov    [shift], offset alpha1
	   000048C4 R
 00004B4D  8D 3D 00004646 R	    lea    edi, [alpha-4]
 00004B53  EB 10		    jmp    @f
 00004B55			GRAPH: 
 00004B55  C7 05 00004904 R	    mov    [shift], offset graph1
	   0000489C R
 00004B5F  8D 3D 0000465E R	    lea    edi, [graphics-4]
 00004B65  89 3D 00004900 R	@@: mov    [board], edi
 00004B6B  E9 FFFFFEB2		    jmp    WORD0

 00004B70			first: 
 00004B70  83 05 00004904 R	    add    [shift], 4*4+4
	   14
 00004B77  E8 FFFFFE52		    call   WORD_
 00004B7C  FF 15 00004918 R	    call   [aword]
 00004B82  E9 FFFFFDA1		    jmp    ACCEPT

 00004B87 18 19 1A 1B 1C	hicon      db 30o, 31o, 32o, 33o, 34o, 35o, 36o, 37o ; 01234567
	   1D 1E 1F
 00004B8F  20 21 05 13 0A	           db 40o, 41o,  5 , 23o, 12o, 20o,  4 , 16o ; 89abcdef
	   10 04 0E
				; eDIG11 ( n -- n ) and eDIG ( n -- ) emit a hexadecimal digit
 00004B97			eDIG1: 
				    DUP_
 00004B97  8D 76 FC	     1	    lea    esi, [esi-4]
 00004B9A  89 06	     1	    mov    [esi], eax
 00004B9C			eDIG: 
 00004B9C  51			    push   ecx
 00004B9D  8A 80 00004B87 R	    mov    AL, hicon[eax]
 00004BA3  E8 FFFFF73D		    call   EMIT
 00004BA8  59			    pop    ecx
 00004BA9  C3			    ret
				; oDIG ( x -- y n ) converts the next four bits in a 32-bit number 
				; into a value between 0 and 15 (0..0x0F)
 00004BAA			oDIG: 
 00004BAA  C1 C0 04		    rol    eax, 4
				    DUP_
 00004BAD  8D 76 FC	     1	    lea    esi, [esi-4]
 00004BB0  89 06	     1	    mov    [esi], eax
 00004BB2  83 E0 0F		    and    eax, 0Fh
 00004BB5  C3			    ret

 00004BB6			hdotn: 
 00004BB6  8B D0		    mov    edx, eax
 00004BB8  F7 D8		    neg    eax
 00004BBA  8D 0C 85		    lea    ecx, [32+eax*4]
	   00000020
				    DROP
 00004BC1  AD		     1	    lodsd 
 00004BC2  D3 C0		    rol    eax, CL
 00004BC4  8B CA		    mov    ecx, edx
 00004BC6  EB 05		    jmp    @f
				; Print 32-bit number onto screen as eight-digit hexadecimal number 
 00004BC8			hdot: 
 00004BC8  B9 00000008		    mov    ecx, 8
 00004BCD  E8 FFFFFFD8		@@: call   oDIG
 00004BD2  E8 FFFFFFC5		    call   eDIG
				    next   @b
 00004BD7  49		     1	    dec    ecx
 00004BD8  75 F3	     1	    jnz    @b
				    DROP
 00004BDA  AD		     1	    lodsd 
 00004BDB  C3			    ret
				; Print 32-bit number onto screen as hexadecimal 
				; number without leading zeroes
 00004BDC			dot: 
 00004BDC  B9 00000007		    mov    ecx, 7
 00004BE1  E8 FFFFFFC4		@@: call   oDIG
 00004BE6  75 19		    jnz    @h
				    DROP
 00004BE8  AD		     1	    lodsd 
				    next   @b
 00004BE9  49		     1	    dec    ecx
 00004BEA  75 F5	     1	    jnz    @b
 00004BEC  41			    inc    ecx
 00004BED  E8 FFFFFFB8		@@: call   oDIG
 00004BF2  E8 FFFFFFA5		@h1:call   eDIG
				    next   @b
 00004BF7  49		     1	    dec    ecx
 00004BF8  75 F3	     1	    jnz    @b
 00004BFA  E8 FFFFF71D		    call   space
				    DROP
 00004BFF  AD		     1	    lodsd 
 00004C00  C3			    ret
 00004C01  41			@h: inc    ecx
 00004C02  EB EE		    jmp    @h1
				; Print 32-bit number onto screen without leading zeroes — as a decimal or a hexadecimal number, 
				; depending on the current base.
 00004C04			qdot: 
 00004C04  83 3D 00004908 R	    cmp    base, 10
	   0A
 00004C0B  75 CF		    jnz    dot
 00004C0D			dot10: 
 00004C0D  8B D0		    mov    edx, eax
 00004C0F  85 D2		    test   edx, edx
 00004C11  79 11		    jns    @f
 00004C13  F7 DA		    neg    edx
				    DUP_
 00004C15  8D 76 FC	     1	    lea    esi, [esi-4]
 00004C18  89 06	     1	    mov    [esi], eax
 00004C1A  B8 00000023		    mov    eax, 43o
 00004C1F  E8 FFFFF6C1		    call   EMIT
 00004C24  B9 00000008		@@: mov    ecx, 8
 00004C29  8B C2		@@: mov    eax, edx
 00004C2B  33 D2		    xor    edx, edx
 00004C2D  F7 34 8D		    div    tens[ecx*4]
	   0000502C R
 00004C34  85 C0		    test   eax, eax
 00004C36  75 10		    jnz    D_1
 00004C38  49			    dec    ecx
 00004C39  79 EE		    jns    @b
 00004C3B  EB 13		    jmp    D_2
 00004C3D  8B C2		@@: mov    eax, edx
 00004C3F  33 D2		    xor    edx, edx
 00004C41  F7 34 8D		    div    tens[ecx*4]
	   0000502C R
 00004C48			D_1: 
 00004C48  E8 FFFFFF4A		    call   eDIG1
 00004C4D  49			    dec    ecx
 00004C4E  79 ED		    jns    @b
 00004C50			D_2: 
 00004C50  8B C2		    mov    eax, edx
 00004C52  E8 FFFFFF40		    call   eDIG1
 00004C57  E8 FFFFF6C0		    call   space ; spcr
				    DROP
 00004C5C  AD		     1	    lodsd 
 00004C5D  C3			    ret
				; unpack the Huffman-coded characters in a 32-bit word 
 00004C5E			unPACK: 
				    DUP_
 00004C5E  8D 76 FC	     1	    lea    esi, [esi-4]
 00004C61  89 06	     1	    mov    [esi], eax
 00004C63  85 C0		    test   eax, eax
 00004C65  78 0A		    js     @f
 00004C67  C1 26 04		    shl    dword ptr [esi], 4
 00004C6A  C1 C0 04		    rol    eax, 4
 00004C6D  83 E0 07		    and    eax, 7
 00004C70  C3			    ret
 00004C71  D1 E0		@@: shl    eax, 1
 00004C73  78 0C		    js     @f
 00004C75  C1 26 05		    shl    dword ptr [esi], 5
 00004C78  C1 C0 04		    rol    eax, 4
 00004C7B  83 E0 07		    and    eax, 7
 00004C7E  34 08		    xor    AL, 10o
 00004C80  C3			    ret
 00004C81  C1 26 07		@@: shl    dword ptr [esi], 7
 00004C84  C1 C0 06		    rol    eax, 6
 00004C87  83 E0 3F		    and    eax, 77o
 00004C8A  2C 10		    sub    AL, 20o
 00004C8C  C3			    ret

 00004C8D			qRING: 
				    DUP_
 00004C8D  8D 76 FC	     1	    lea    esi, [esi-4]
 00004C90  89 06	     1	    mov    [esi], eax
 00004C92  FF 06		    inc    dword ptr [esi]
 00004C94  39 3D 0000505C R	    cmp    curs, edi ; from abort, insert
 00004C9A  75 05		    jnz    @f
 00004C9C  A3 0000505C R	    mov    curs, eax        
 00004CA1  3B 05 0000505C R	@@: cmp    eax, curs
 00004CA7  74 0A		    jz     RING
 00004CA9  79 06		    jns    @f
 00004CAB  89 3D 00005064 R	    mov    pcad, edi
 00004CB1			@@: DROP
 00004CB1  AD		     1	    lodsd 
 00004CB2  C3			    ret

 00004CB3			RING: 
 00004CB3  89 3D 00005060 R	    mov    cad, edi
 00004CB9  81 2D 000041C8 R	    sub    xy, iw*10000h ; bksp
	   00160000
				    DUP_
 00004CC3  8D 76 FC	     1	    lea    esi, [esi-4]
 00004CC6  89 06	     1	    mov    [esi], eax
 00004CC8  B8 00E04000		    mov    eax, 0e04000h
 00004CCD  E8 FFFFF582		    call   color
 00004CD2  B8 00000030		    mov    eax, 60o
 00004CD7  66| 8B 0D		    mov    CX, word ptr xy+2
	   000041CA R
 00004CDE  66| 3B 0D		    cmp    CX, word ptr rm
	   000041D0 R
 00004CE5  78 10		    js     @f
 00004CE7  E8 FFFFF5F9		    call   EMIT
 00004CEC  81 2D 000041C8 R	    sub    xy, iw*10000h ; bksp
	   00160000
 00004CF6  C3			    ret
 00004CF7  E9 FFFFF5E9		@@: jmp    EMIT

 00004CFC  66| 8B 0D		rW: mov    CX, word ptr xy+2
	   000041CA R
 00004D03  66| 3B 0D		    cmp    CX, word ptr lm
	   000041CC R
 00004D0A  74 16		    jz     @f
 00004D0C  8A 0D 00004924 R		mov cl, byte ptr rw_no_cr
 00004D12  0A C9			or cl,cl
 00004D14  75 05			jnz rw_cr   ; do not do a  cr  if it has been disabled by a blue  -cr  token
 00004D16  E8 FFFFF7E2		    call   cr
 00004D1B			rw_cr:
 00004D1B  C6 05 00004924 R		mov   byte ptr rw_no_cr,0 
	   00
 00004D22  E8 FFFFF704		@@: call   RED
 00004D27  E9 0000009F		    jmp    TYPE_

 00004D2C  E8 FFFFF709		gW: call   GREEN
 00004D31  E9 00000095		    jmp    TYPE_
 00004D36  E8 FFFFF6B4		mW: call   CYAN
 00004D3B  E9 0000008B		    jmp    TYPE_
 00004D40			wW: DUP_
 00004D40  8D 76 FC	     1	    lea    esi, [esi-4]
 00004D43  89 06	     1	    mov    [esi], eax
 00004D45  B8 00FFFF00		    mov    eax, yellow
 00004D4A  E8 FFFFF505		    call   color
 00004D4F  EB 7A		    jmp    TYPE_

 00004D51			type0: 
 00004D51  81 2D 000041C8 R	    sub    xy, iw*10000h ; call bspcr
	   00160000
 00004D5B  F7 04 BD		    test   dword ptr [-4+edi*4], -20o
	   FFFFFFFC
	   FFFFFFF0
 00004D66  75 63		    jnz    type1
 00004D68  4F			    dec    edi
 00004D69  89 3D 00005068 R	    mov    lcad, edi
 00004D6F  E8 FFFFF5A8		    call   space
 00004D74  E8 FFFFFF14		    call   qRING
 00004D79  5A			    pop    edx ; End of block
				    DROP
 00004D7A  AD		     1	    lodsd 
 00004D7B  E9 FFFFF830		    jmp    KEYBOARD

 00004D80			Cap: 
 00004D80  E8 FFFFF4C5		    call   white
				    DUP_
 00004D85  8D 76 FC	     1	    lea    esi, [esi-4]
 00004D88  89 06	     1	    mov    [esi], eax
 00004D8A  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004D91  83 E0 F0		    and    eax, -20o
 00004D94  E8 FFFFFEC5		    call   unPACK
 00004D99  04 30		    add    AL, 48
 00004D9B  E8 FFFFF545		    call   EMIT
 00004DA0  EB 38		    jmp    type2

 00004DA2			CAPS: 
 00004DA2  E8 FFFFF4A3		    call   white
				    DUP_
 00004DA7  8D 76 FC	     1	    lea    esi, [esi-4]
 00004DAA  89 06	     1	    mov    [esi], eax
 00004DAC  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004DB3  83 E0 F0		    and    eax, -20o
 00004DB6  E8 FFFFFEA3		@@: call   unPACK
 00004DBB  74 2B		    jz     @f
 00004DBD  04 30		    add    AL, 48
 00004DBF  E8 FFFFF521		    call   EMIT
 00004DC4  EB F0		    jmp    @b

 00004DC6			text: 
 00004DC6  E8 FFFFF47F		    call   WHITE
 00004DCB			TYPE_:
 00004DCB			type1: 
				    DUP_
 00004DCB  8D 76 FC	     1	    lea    esi, [esi-4]
 00004DCE  89 06	     1	    mov    [esi], eax
 00004DD0  8B 04 BD		    mov    eax, [-4+edi*4]
	   FFFFFFFC
 00004DD7  83 E0 F0		    and    eax, -20o
 00004DDA			type2:     
 00004DDA  E8 FFFFFE7F		    call   unPACK
 00004DDF  74 07		    jz     @f
 00004DE1  E8 FFFFF4FF		    call   EMIT
 00004DE6  EB F2		    jmp    type2
 00004DE8  E8 FFFFF52F		@@: call   space
				    DROP
 00004DED  AD		     1	    lodsd 
				    DROP
 00004DEE  AD		     1	    lodsd 
 00004DEF  C3			    ret

 00004DF0			gsW: 
 00004DF0  8B 14 BD		    mov    edx, [-4+edi*4]
	   FFFFFFFC
 00004DF7  C1 FA 05		    sar    edx, 5
 00004DFA  EB 12		    jmp    gnW1

 00004DFC			var: 
 00004DFC  E8 FFFFF5FD		    call   MAGENTA
 00004E01  E8 FFFFFFC5		    call   TYPE_
 00004E06			gnW: 
 00004E06  8B 14 BD		    mov    edx, [edi*4]
	   00000000
 00004E0D  47			    inc    edi
 00004E0E			gnW1: 
				    DUP_
 00004E0E  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E11  89 06	     1	    mov    [esi], eax
 00004E13  B8 0000F800		    mov    eax, 0f800h ; Green
 00004E18  81 3D 00005050 R	    cmp    bas, offset dot10
	   00004C0D R
 00004E22  74 36		    jz     @f        
 00004E24  B8 0000C000		    mov    eax, 0c000h ; dark green
 00004E29  EB 2F		    jmp    @f

 00004E2B  8B 14 BD		sW: mov    edx, [-4+edi*4]
	   FFFFFFFC
 00004E32  C1 FA 05		    sar    edx, 5
 00004E35  EB 08		    jmp    nW1

 00004E37  8B 14 BD		nW: mov    edx, [edi*4]
	   00000000
 00004E3E  47			    inc    edi
 00004E3F			nW1: 
				    DUP_
 00004E3F  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E42  89 06	     1	    mov    [esi], eax
 00004E44  B8 00FFFF00		    mov    eax, yellow
 00004E49  81 3D 00005050 R	    cmp    bas, offset dot10
	   00004C0D R
 00004E53  74 05		    jz     @f        
 00004E55  B8 00C0C000		    mov    eax, 0c0c000h ; dark yellow
 00004E5A  E8 FFFFF3F5		@@: call   color
				    DUP_
 00004E5F  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E62  89 06	     1	    mov    [esi], eax
 00004E64  8B C2		    mov    eax, edx
 00004E66  FF 25 00005050 R	    jmp    [bas]

 00004E6C			siW: ;silver
 00004E6C  8B 14 BD			mov edx, [edi*4-4]
	   FFFFFFFC
 00004E73  C1 FA 05			sar edx,5
					DUP_
 00004E76  8D 76 FC	     1	    lea    esi, [esi-4]
 00004E79  89 06	     1	    mov    [esi], eax
 00004E7B  B8 00FFFFFF			mov eax, 0FFFFFFh  ; white
 00004E80  81 3D 00005050 R		cmp    bas, offset dot10
	   00004C0D R
 00004E8A  74 2F			je @f
 00004E8C  B8 00C0C0C0			mov eax, 0c0c0c0h; silver
 00004E91  FF 25 00005050 R		jmp [bas]

				; *****************************************************************************
				; Blue words - formatting the editor display
				; *****************************************************************************                               
 00004E97			not_cr:
 00004E97  F6 15 00004924 R	         not byte ptr rw_no_cr 
 00004E9D  C3			         ret

 00004E9E			bW:   ; ( -- )    \ format the editor display screen using certain blue tokens
 00004E9E  E8 FFFFF579		    call Blue
 00004EA3  E8 FFFFFF23		    call TYPE_
 00004EA8  8B 04 BD		    mov eax, [edi*4-4]
	   FFFFFFFC
 00004EAF  3D 9080000E		    cmp eax, 9080000Eh  ; cr
 00004EB4  75 05		    jnz @f
 00004EB6  E8 FFFFF642		    call cr
 00004EBB			@@:
 00004EBB  3D E64B8C0E		    cmp eax, 0E64B8C0Eh  ; -tab
 00004EC0  75 0A		    jnz @f
 00004EC2  E8 FFFFFFD0		    call not_cr
 00004EC7  E8 FFFFF450		    call space
 00004ECC			@@:
 00004ECC  3D 25C6000E		    cmp eax, 25C6000Eh  ; tab
 00004ED1  75 05			jnz @f
 00004ED3  E8 FFFFF444		    call space
 00004ED8			@@:
 00004ED8  3D C620000E		    cmp eax, 0C620000Eh  ; br
 00004EDD  75 0A		    jnz @f
 00004EDF  E8 FFFFF619		    call cr
 00004EE4  E8 FFFFF614		    call cr
 00004EE9			@@:
 00004EE9  3D E721000E		    cmp eax, 0E721000Eh  ; -cr
 00004EEE  75 05		    jnz @f
 00004EF0  E8 FFFFFFA2		    call not_cr
 00004EF5			@@:
 00004EF5  3D 90FB000E		    cmp eax, 90FB000Eh  ; cr+   cr and 3 spaces
 00004EFA  75 14		    jnz @f
 00004EFC  E8 FFFFF5FC		    call cr
 00004F01  E8 FFFFF416		    call SPACE
 00004F06  E8 FFFFF411		    call SPACE
 00004F0B  E8 FFFFF40C		    call SPACE
 00004F10			@@:
 00004F10  3D 25C7AC0E		    cmp eax, 25C7AC0Eh  ; tab3   align to next 3 space column
 00004F15  75 05		    jnz @f
 00004F17  E8 FFFFF400		    call SPACE
 00004F1C			@@:
 00004F1C  3D EA00000E		    cmp eax, 0EA00000Eh  ; .
 00004F21  75 05		    jnz @f
 00004F23  E8 FFFFF3F4		    call SPACE
 00004F28			@@:
 00004F28  3D EBD4000E		    cmp eax, 0EBD4000Eh  ; ..
 00004F2D  75 0A		    jnz @f
 00004F2F  E8 FFFFF3E8		    call SPACE
 00004F34  E8 FFFFF3E3		    call SPACE
 00004F39			@@:
 00004F39  3D EBD7A80E		    cmp eax, 0EBD7A80Eh  ; ...
 00004F3E  75 0F		    jnz @f
 00004F40  E8 FFFFF3D7		    call SPACE
 00004F45  E8 FFFFF3D2		    call SPACE
 00004F4A  E8 FFFFF3CD		    call SPACE
 00004F4F			@@:
 00004F4F  3D EBD7AF5E		    cmp eax, 0EBD7AF5Eh  ; ....
 00004F54  75 14		    jnz @f
 00004F56  E8 FFFFF3C1		    call SPACE
 00004F5B  E8 FFFFF3BC		    call SPACE
 00004F60  E8 FFFFF3B7		    call SPACE
 00004F65  E8 FFFFF3B2		    call SPACE
 00004F6A			@@:
				    DROP
 00004F6A  AD		     1	    lodsd 
 00004F6B  C3			    ret

				   

 00004F6C			REFRESH: 
 00004F6C  E8 FFFFB68F		    call   SHOW
 00004F71  E8 FFFFF534		    call   blank
 00004F76  E8 FFFFF3E9		    call   text1
				    DUP_            ; Counter
 00004F7B  8D 76 FC	     1	    lea    esi, [esi-4]
 00004F7E  89 06	     1	    mov    [esi], eax
 00004F80  A1 00005068 R	    mov    eax, lcad
 00004F85  A3 00005060 R	    mov    cad, eax ; for curs beyond end

 00004F8A  A1 00005054 R	    mov    eax, blk
 00004F8F  83 E8 12		    sub    eax, 18
 00004F92  C1 E0 08		    shl    eax, 10-2
 00004F95  8B 1D 0000002D R	    mov    ebx, [blocks_adr]
 00004F9B  C1 EB 02		    shr    ebx, 2
 00004F9E  03 C3		    add    eax, ebx
 00004FA0  8B F8		    mov    edi, eax 

 00004FA2  33 C0		    xor    eax, eax
 00004FA4  89 3D 00005064 R	    mov    pcad, edi ; for curs=0
 00004FAA			ref1:   
 00004FAA  F7 04 BD		    test   dword ptr [edi*4], 0fh
	   00000000
	   0000000F
 00004FB5  74 05		    jz     @f
 00004FB7  E8 FFFFFCD1		    call   qRING
 00004FBC  8B 14 BD		@@: mov    edx, [edi*4]
	   00000000
 00004FC3  47			    inc    edi
 00004FC4  C7 05 00005050 R	    mov    bas, offset dot10
	   00004C0D R
 00004FCE  F6 C2 10		    test   DL, 20o
 00004FD1  74 0A		    jz     @f
 00004FD3  C7 05 00005050 R	    mov    bas, offset dot
	   00004BDC R
 00004FDD  83 E2 0F		@@: and    edx, 17o
 00004FE0  FF 14 95		    call   display[edx*4]
	   00004FEC R
 00004FE7  EB C1		    jmp    ref1

				ALIGN 4
 00004FEC 00004D51 R		display    dd offset TYPE0, offset wW,   offset nW,  offset rW
	   00004D40 R
	   00004E37 R
	   00004CFC R
 00004FFC  00004D2C R		           dd offset gW,    offset gnW,  offset gsW, offset mW
	   00004E06 R
	   00004DF0 R
	   00004D36 R
 0000500C  00004E2B R		           dd offset sW,    offset text, offset Cap, offset CAPS
	   00004DC6 R
	   00004D80 R
	   00004DA2 R
 0000501C  00004DFC R		           dd offset var,   offset nul,  offset bW, offset siW
	   00000A32 R
	   00004E9E R
	   00004E6C R
 0000502C 0000000A		tens       dd 10, 100, 1000, 10000, 100000, 1000000
	   00000064
	   000003E8
	   00002710
	   000186A0
	   000F4240
 00005044  00989680		           dd 10000000, 100000000, 1000000000
	   05F5E100
	   3B9ACA00
 00005050 00004C0D R		bas        dd offset dot10
 00005054 00000012		blk        dd 18
 00005058 00000012		v_otherBlk dd 18
 0000505C 00000000		curs       dd 0
 00005060 00000000		cad        dd 0
 00005064 00000000		pcad       dd 0
 00005068 00000000		lcad       dd 0
 0000506C 00004650 R		trash      dd offset trash_adr ;;! buffer*4
 00005070 00000A32 R		ekeys      dd offset nul, offset DEL, offset Eout, offset destack
	   000053CF R
	   00005274 R
	   000052AB R
 00005080  00005139 R		           dd offset act1, offset act3, offset act4, offset shadow   ; y r g *
	   0000513D R
	   00005141 R
	   000051F1 R
 00005090  000051A7 R		           dd offset mcur, offset mmcur, offset ppcur, offset pcur   ; l u d r
	   000051B6 R
	   000051CA R
	   000051AF R
 000050A0  000051DD R		           dd offset mblk, offset actv, offset act7, offset pblk     ; - m c +
	   0000517D R
	   00005159 R
	   000051D2 R
 000050B0  00000A32 R		           dd offset nul, offset act11, offset act10, offset act9    ; _ S C t
	   0000514D R
	   00005149 R
	   00005145 R
 000050C0  00000A32 R		           dd offset nul, offset nul, offset nul, offset otherBlk    ; _ _ _ j
	   00000A32 R
	   00000A32 R
	   000051FC R
 000050D0 00005151 R		ekbd0      dd offset actA, offset actB, offset nul, offset nul ; a b _ _
	   00005155 R
	   00000A32 R
	   00000A32 R
 000050E0  15 25 07 00		           db 25o, 45o,  7 ,  0  ; x  .  i  ; chars to display on the bottom line kboard
 000050E4 0B 01 0D 2D		ekbd       db 13o,  1 , 15o, 55o ; y  r  g  *
 000050E8  0C 16 10 01		           db 14o, 26o, 20o,  1  ; l  u  d  r
 000050EC  23 09 0A 2B		           db 43o, 11o, 12o, 53o ; -  m  c  +
 000050F0  00 38 3A 02		           db  0 , 70o, 72o,  2  ;    S  C  t
 000050F4  00 00 00 22		           db  0 ,  0 ,  0,  42o ; _  _  _  j
 000050F8  05 13 00 00		           db  5 ,  23o ,0 ,  0  ; a  b  _  _
 000050FC 00FFFF00		actc       dd yellow, 0, 0ff0000h, 0c000h, 0, 0, 0ffffh
	   00000000
	   00FF0000
	   0000C000
	   00000000
	   00000000
	   0000FFFF
								; 1=yellow (0xFFFF00), --, 3=red (0xFF0000),
								; 4=green (0x00C000), --, --, 7=cyan (0x00FFFF)
 00005118  00000000		           dd 0, 0ffffffh, 0ffffffh, 0ffffffh, 8080ffh, 0c0c0c0h, 4040ffh
	   00FFFFFF
	   00FFFFFF
	   00FFFFFF
	   008080FF
	   00C0C0C0
	   004040FF
								; --, 9..11=white (0xFFFFFF), 12=light blue??? (0x8080FF) 
				                ; 13=silver. 14 blue				
						   
 00005134 00000000		vector     dd 0
 00005138 01			action     db 1

 00005139			act1: 
 00005139  B0 01		    mov    AL, 1 ; 1 = execute (yellow word)
 0000513B  EB 1E		    jmp    @f
 0000513D			act3: 
 0000513D  B0 03		    mov    AL, 3 ; 3 = define (red word)
 0000513F  EB 1A		    jmp    @f
 00005141			act4: 
 00005141  B0 04		    mov    AL, 4 ; 4 = compile (green word)
 00005143  EB 16		    jmp    @f
 00005145			act9: 
 00005145  B0 09		    mov    AL, 9 ; 9 = comment (white word)
 00005147  EB 12		    jmp    @f
 00005149			act10: 
 00005149  B0 0A		    mov    AL, 10 ; 10 = Capitalized Comment
 0000514B  EB 0E		    jmp    @f
 0000514D			act11: 
 0000514D  B0 0B		    mov    AL, 11 ; 11 = COMMENT IN ALL CAPS
 0000514F  EB 0A		    jmp    @f
 00005151			actA:
 00005151  B0 0D			mov al, 13 ; gray
 00005153  EB 06			jmp    @f
 00005155			actB:
 00005155  B0 0E		    mov al, 14  ; blue
 00005157  EB 02		    jmp    @f
 00005159			act7: 
 00005159  B0 07		    mov    AL, 7 ; 7 = compile macro (cyan word)
 0000515B  A2 00005138 R	@@: mov    action, AL
 00005160  8B 04 85		    mov    eax, [actc-4+eax*4]
	   000050F8 R
 00005167  C7 05 00004918 R	    mov    aword, offset insert
	   00005343 R
 00005171			actn: 
 00005171  A3 00004910 R	    mov    keyc, eax
 00005176  58			    pop    eax
				    DROP
 00005177  AD		     1	    lodsd 
 00005178  E9 FFFFF7AB		    jmp    ACCEPT

 0000517D			actv: 
 0000517D  C6 05 00005138 R	    mov    action, 12 ; 12 = variable (magenta word)
	   0C
 00005184  B8 00FF00FF		    mov    eax, 0ff00ffh ; Magenta
 00005189  C7 05 00004918 R	    mov    aword, offset @f
	   00005195 R
 00005193  EB DC		    jmp    actn

 00005195			@@: DUP_
 00005195  8D 76 FC	     1	    lea    esi, [esi-4]
 00005198  89 06	     1	    mov    [esi], eax
 0000519A  33 C0		    xor    eax, eax
 0000519C  FF 05 00004920 R	    inc    words
 000051A2  E9 0000019C		    jmp    insert    

 000051A7			mcur: 
 000051A7  FF 0D 0000505C R	    dec    curs
 000051AD  79 06		    jns    @f
 000051AF			pcur: 
 000051AF  FF 05 0000505C R	    inc    curs
 000051B5  C3			@@: ret

 000051B6			mmcur: 
 000051B6  83 2D 0000505C R	    sub    curs, 8
	   08
 000051BD  79 0A		    jns    @f
 000051BF  C7 05 0000505C R	    mov    curs, 0
	   00000000
 000051C9  C3			@@: ret
 000051CA			ppcur: 
 000051CA  83 05 0000505C R	    add    curs, 8
	   08
 000051D1  C3			    ret

 000051D2			pblk: 
 000051D2  83 05 00005054 R	    add    blk, 2
	   02
 000051D9  83 06 02		    add    dword ptr [esi], 2
 000051DC  C3			    ret
 000051DD			mblk: 
 000051DD  83 3D 00005054 R	    cmp    blk, 20
	   14
 000051E4  78 0A		    js     @f
 000051E6  83 2D 00005054 R	    sub    blk, 2 
	   02
 000051ED  83 2E 02		    sub    dword ptr [esi], 2
 000051F0  C3			@@: ret

 000051F1			shadow: 
 000051F1  83 35 00005054 R	    xor    blk, 1
	   01
 000051F8  83 36 01		    xor    dword ptr [esi], 1
 000051FB  C3			    ret

 000051FC			otherBlk:
 000051FC  8B 0D 00005054 R	    mov ecx, blk 
 00005202  87 0D 00005058 R		xchg ecx, v_otherBlk
 00005208  89 0D 00005054 R	    mov  blk, ecx
 0000520E  C3			    ret
								
 0000520F			E0: DROP
 0000520F  AD		     1	    lodsd 
 00005210  EB 30		    jmp    @f

 00005212			edit: 
 00005212  A3 00005054 R	    mov    blk, eax
					;mov    v_otherBlk
				    DROP
 00005217  AD		     1	    lodsd 
 00005218			E:  DUP_
 00005218  8D 76 FC	     1	    lea    esi, [esi-4]
 0000521B  89 06	     1	    mov    [esi], eax
 0000521D  A1 00005054 R	    mov    eax, blk
 00005222  C7 05 0000491C R	    mov    anumber, offset FORMAT
	   0000535A R
 0000522C  C6 05 000048C0 R	    mov    byte ptr alpha0+4*4, 45o ; .
	   25
 00005233  C7 05 000048B4 R	    mov    alpha0+4, offset E0
	   0000520F R
 0000523D  E8 FFFFFD2A		    call   REFRESH
 00005242  C7 05 00004904 R	@@: mov    [shift], offset ekbd0
	   000050D0 R
 0000524C  C7 05 00004900 R	    mov    [board], offset ekbd-4
	   000050E0 R
 00005256  C7 05 00004910 R	    mov    [keyc], yellow
	   00FFFF00
 00005260  E8 FFFFF5F9		@@: call   KEY
 00005265  E8 FFFFF4BD		    call   QWADJUST
 0000526A  FF 14 85		    call   ekeys[eax*4]
	   00005070 R
				    DROP
 00005271  AD		     1	    lodsd 
 00005272  EB EC		    jmp    @b

 00005274			eout: 
 00005274  58			    pop    eax
				    DROP
 00005275  AD		     1	    lodsd 
				    DROP
 00005276  AD		     1	    lodsd 
 00005277  C7 05 00004918 R	    mov    aword, offset EX1
	   000006A3 R
 00005281  C7 05 0000491C R	    mov    anumber, offset nul
	   00000A32 R
 0000528B  C6 05 000048C0 R	    mov    byte ptr alpha0+4*4, 0
	   00
 00005292  C7 05 000048B4 R	    mov    alpha0+4, offset nul0
	   00004925 R
 0000529C  C7 05 00004910 R	    mov    keyc, yellow
	   00FFFF00
 000052A6  E9 FFFFF67D		    jmp    ACCEPT

 000052AB			destack: 
 000052AB  8B 15 0000506C R	    mov    edx, trash
 000052B1  81 FA 00004650 R	    cmp    edx, offset trash_adr ;;! buffer*4
 000052B7  75 01		    jnz    @f
 000052B9  C3			    ret
 000052BA  83 EA 08		@@: sub    edx, 2*4
 000052BD  8B 4A 04		    mov    ecx, [edx+1*4]
 000052C0  89 0D 00004920 R	    mov    words, ecx
 000052C6			@@: DUP_
 000052C6  8D 76 FC	     1	    lea    esi, [esi-4]
 000052C9  89 06	     1	    mov    [esi], eax
 000052CB  8B 02		    mov    eax, [edx]
 000052CD  83 EA 04		    sub    edx, 1*4
				    next   @b
 000052D0  49		     1	    dec    ecx
 000052D1  75 F3	     1	    jnz    @b
 000052D3  83 C2 04		    add    edx, 1*4
 000052D6  89 15 0000506C R	    mov    trash, edx

 000052DC			insert0: 
 000052DC  8B 0D 00005068 R	    mov    ecx, lcad  ; room available?
 000052E2  03 0D 00004920 R	    add    ecx, words
 000052E8  33 0D 00005068 R	    xor    ecx, lcad
 000052EE  81 E1 FFFFFF00	    and    ecx, -100h
 000052F4  74 0B		    jz     insert1
 000052F6  8B 0D 00004920 R	    mov    ecx, words ; no
 000052FC			@@:          
				    DROP
 000052FC  AD		     1	    lodsd 
				    next @b
 000052FD  49		     1	    dec    ecx
 000052FE  75 FC	     1	    jnz    @b
 00005300  C3			    ret

 00005301			insert1: 
 00005301  56			    push   esi
 00005302  8B 35 00005068 R	    mov    esi, lcad
 00005308  8B CE		    mov    ecx, esi
 0000530A  4E			    dec    esi
 0000530B  8B FE		    mov    edi, esi
 0000530D  03 3D 00004920 R	    add    edi, words
 00005313  C1 E7 02		    shl    edi, 2
 00005316  2B 0D 00005060 R	    sub    ecx, cad
 0000531C  78 07		    js     @f
 0000531E  C1 E6 02		    shl    esi, 2
 00005321  FD			    std
 00005322  F3/ A5		    rep movsd
 00005324  FC			    cld
 00005325  5E			@@: pop    esi
 00005326  C1 EF 02		    shr    edi, 2
 00005329  47			    inc    edi
 0000532A  89 3D 0000505C R	    mov    curs, edi ; like abort
 00005330  8B 0D 00004920 R	    mov    ecx, words
 00005336  4F			@@: dec    edi
 00005337  89 04 BD		    mov    [edi*4], eax
	   00000000
				    DROP   ; requires cld
 0000533E  AD		     1	    lodsd 
				    next   @b
 0000533F  49		     1	    dec    ecx
 00005340  75 F4	     1	    jnz    @b
 00005342  C3			    ret

 00005343			insert: 
 00005343  E8 FFFFFF94		    call   insert0
 00005348  8A 0D 00005138 R	    mov    CL, action
 0000534E  30 0C BD		    xor    [edi*4], CL
	   00000000
 00005355  E9 FFFFF5CE		    jmp    ACCEPT

 0000535A			FORMAT: 
 0000535A  F6 05 00005138 R	    test   action, 12o ; ignore 3 and 9
	   0A
 00005361  74 02		    jz     @f
				    DROP
 00005363  AD		     1	    lodsd 
 00005364  C3			    ret
 00005365  8B D0		@@: mov    edx, eax
 00005367  81 E2 FC000000	    and    edx, 0FC000000h
 0000536D  74 08		    jz     @f
 0000536F  81 FA FC000000	    cmp    edx, 0FC000000h
 00005375  75 27		    jnz    FORMAT2
 00005377  C1 E0 05		@@: shl    eax, 5
 0000537A  34 02		    xor    AL, 2 ; 6
 0000537C  80 3D 00005138 R	    cmp    action, 4
	   04
 00005383  74 02		    jz     @f
 00005385  34 0B		    xor    AL, 13o ; 8
 00005387  83 3D 00004908 R	@@: cmp    base, 10
	   0A
 0000538E  74 02		    jz     @f
 00005390  34 10		    xor    AL, 20o
 00005392  C7 05 00004920 R	@@: mov    words, 1
	   00000001
 0000539C  EB A5		    jmp    insert

 0000539E			FORMAT2: 
				    DUP_
 0000539E  8D 76 FC	     1	    lea    esi, [esi-4]
 000053A1  89 06	     1	    mov    [esi], eax
 000053A3  B8 00000001		    mov    eax, 1 ; 5
 000053A8  80 3D 00005138 R	    cmp    [action], 4
	   04
 000053AF  74 02		    jz     @f
 000053B1  B0 03		    mov    AL, 3 ; 2
 000053B3  83 3D 00004908 R	@@: cmp    [base], 10
	   0A
 000053BA  74 02		    jz     @f
 000053BC  34 10		    xor    AL, 20o
 000053BE  87 06		@@: xchg   eax, [esi]
 000053C0  C7 05 00004920 R	    mov    [words], 2
	   00000002
 000053CA  E9 FFFFFF74		    jmp    insert

 000053CF			DEL: 
 000053CF  E8 00000023		    call   enstack
 000053D4  8B 3D 00005064 R	    mov    edi, [pcad]
 000053DA  8B 0D 00005068 R	    mov    ecx, [lcad]
 000053E0  2B CF		    sub    ecx, edi
 000053E2  C1 E7 02		    shl    edi, 2
 000053E5  56			    push   esi
 000053E6  8B 35 00005060 R	    mov    esi, [cad]
 000053EC  C1 E6 02		    shl    esi, 2
 000053EF  F3/ A5		    rep    movsd
 000053F1  5E			    pop    esi
 000053F2  E9 FFFFFDB0		    jmp    mcur

 000053F7			enstack: 
				    DUP_
 000053F7  8D 76 FC	     1	    lea    esi, [esi-4]
 000053FA  89 06	     1	    mov    [esi], eax
 000053FC  A1 00005060 R	    mov    eax, [cad]
 00005401  2B 05 00005064 R	    sub    eax, [pcad]
 00005407  74 27		    jz     ens
 00005409  8B C8		    mov    ecx, eax
 0000540B  92			    xchg   eax, edx
 0000540C  56			    push   esi
 0000540D  8B 35 00005060 R	    mov    esi, [cad]
 00005413  8D 34 B5		    lea    esi, [esi*4-4]
	   FFFFFFFC
 0000541A  8B 3D 0000506C R	    mov    edi, [trash]
 00005420  FD			@@: std
 00005421  AD			    lodsd
 00005422  FC			    cld
 00005423  AB			    stosd
				    next   @b
 00005424  49		     1	    dec    ecx
 00005425  75 F9	     1	    jnz    @b
 00005427  92			    xchg   eax, edx
 00005428  AB			    stosd
 00005429  89 3D 0000506C R	    mov    [trash], edi
 0000542F  5E			    pop    esi
 00005430			ens: 
				    DROP
 00005430  AD		     1	    lodsd 
 00005431  C3			    ret

 00005432			pad: 
 00005432  5A			    pop    edx
 00005433  89 15 00005134 R	    mov    [vector], edx
 00005439  81 C2 0000008C	    add    edx, 28*5
 0000543F  89 15 00004900 R	    mov    [board], edx
 00005445  83 EA 10		    sub    edx, 4*4
 00005448  89 15 00004904 R	    mov    [shift], edx
 0000544E			@@:     
 0000544E  E8 FFFFF40B		    call   KEY
 00005453  E8 FFFFF2CF		    call   QWADJUST
 00005458  8B 15 00005134 R	    mov    edx, [vector]
 0000545E  03 D0		    add    edx, eax
 00005460  8D 54 82 05		    lea    edx, [5+eax*4+edx]
 00005464  03 52 FC		    add    edx, [-4+edx]
				    DROP
 00005467  AD		     1	    lodsd 
 00005468  FF D2		    call   edx
 0000546A  EB E2		    jmp    @b

				;org (1200h-1)*4
				;    dd 0

 0000546C			code_end:
 0000546C
				end _start

Microsoft (R) Macro Assembler Version 6.15.8803		    02/22/22 22:22:22
color.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

DROP . . . . . . . . . . . . . .	Proc
DUP_ . . . . . . . . . . . . . .	Proc
next . . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

BITMAPINFOHEADER . . . . . . . .	 00000028
  biSize . . . . . . . . . . . .	 00000000	 DWord
  biWidth  . . . . . . . . . . .	 00000004	 DWord
  biHeight . . . . . . . . . . .	 00000008	 DWord
  biPlanes . . . . . . . . . . .	 0000000C	 Word
  biBitCount . . . . . . . . . .	 0000000E	 Word
  biCompression  . . . . . . . .	 00000010	 DWord
  biSizeImage  . . . . . . . . .	 00000014	 DWord
  biXPelsPerMeter  . . . . . . .	 00000018	 DWord
  biYPelsPerMeter  . . . . . . .	 0000001C	 DWord
  biClrUsed  . . . . . . . . . .	 00000020	 DWord
  biClrImportant . . . . . . . .	 00000024	 DWord
MSG  . . . . . . . . . . . . . .	 0000001C
  hwnd . . . . . . . . . . . . .	 00000000	 DWord
  message  . . . . . . . . . . .	 00000004	 DWord
  wParam . . . . . . . . . . . .	 00000008	 DWord
  lParam . . . . . . . . . . . .	 0000000C	 DWord
  time . . . . . . . . . . . . .	 00000010	 DWord
  pt . . . . . . . . . . . . . .	 00000014	 QWord
PAINTSTRUCT  . . . . . . . . . .	 00000040
  hdc  . . . . . . . . . . . . .	 00000000	 DWord
  fErase . . . . . . . . . . . .	 00000004	 DWord
  rcPaint  . . . . . . . . . . .	 00000008	  00000010
  fRestore . . . . . . . . . . .	 00000018	 DWord
  fIncUpdate . . . . . . . . . .	 0000001C	 DWord
  rgbReserved  . . . . . . . . .	 00000020	 Byte
POINT  . . . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
RECT . . . . . . . . . . . . . .	 00000010
  left . . . . . . . . . . . . .	 00000000	 DWord
  top  . . . . . . . . . . . . .	 00000004	 DWord
  right  . . . . . . . . . . . .	 00000008	 DWord
  bottom . . . . . . . . . . . .	 0000000C	 DWord
WNDCLASSEX . . . . . . . . . . .	 00000030
  cbSize . . . . . . . . . . . .	 00000000	 DWord
  style  . . . . . . . . . . . .	 00000004	 DWord
  lpfnWndProc  . . . . . . . . .	 00000008	 DWord
  cbClsExtra . . . . . . . . . .	 0000000C	 DWord
  cbWndExtra . . . . . . . . . .	 00000010	 DWord
  hInstance  . . . . . . . . . .	 00000014	 DWord
  hIcon  . . . . . . . . . . . .	 00000018	 DWord
  hCursor  . . . . . . . . . . .	 0000001C	 DWord
  hbrBackground  . . . . . . . .	 00000020	 DWord
  lpszMenuName . . . . . . . . .	 00000024	 DWord
  lpszClassName  . . . . . . . .	 00000028	 DWord
  hIconSm  . . . . . . . . . . .	 0000002C	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_STACK . . . . . . . . . . . . .	32 Bit	 00004694 Para	  Private 'STACK'	 
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000546C Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001A4 Private STDCALL
  bye  . . . . . . . . . . . . .	L Near	 00000007 _TEXT	
  exit_process . . . . . . . . .	L Near	 00000007 _TEXT	
  last_error . . . . . . . . . .	L Near	 0000000E _TEXT	
  icon0  . . . . . . . . . . . .	L Near	 00000031 _TEXT	
  blk0 . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
  map_file . . . . . . . . . . .	L Near	 00000052 _TEXT	
  map_file_ex1 . . . . . . . . .	L Near	 00000093 _TEXT	
  map_file_ex  . . . . . . . . .	L Near	 00000099 _TEXT	
  unmap_file . . . . . . . . . .	L Near	 0000009A _TEXT	
  map_work_files . . . . . . . .	L Near	 000000A1 _TEXT	
  alloc_mem  . . . . . . . . . .	L Near	 000000D0 _TEXT	
  alloc_buffers  . . . . . . . .	L Near	 000000E8 _TEXT	
$$$00003 . . . . . . . . . . . .	P Near	 0000020C _TEXT	Length= 00005260 Private STDCALL
  process_messages . . . . . . .	L Near	 00000310 _TEXT	
  process_messages_disp  . . . .	L Near	 00000329 _TEXT	
  process_messages_ex  . . . . .	L Near	 0000033D _TEXT	
  alloc_display  . . . . . . . .	L Near	 00000372 _TEXT	
  draw_display . . . . . . . . .	L Near	 0000043D _TEXT	
  notimpl  . . . . . . . . . . .	L Near	 000004A3 _TEXT	
  fmap . . . . . . . . . . . . .	L Near	 000004AD _TEXT	
  funmap . . . . . . . . . . . .	L Near	 000004C2 _TEXT	
  bload  . . . . . . . . . . . .	L Near	 000004CE _TEXT	
  bload_ex . . . . . . . . . . .	L Near	 000004FE _TEXT	
  dlopen . . . . . . . . . . . .	L Near	 00000502 _TEXT	
  dlimp  . . . . . . . . . . . .	L Near	 00000509 _TEXT	
  outputdebug  . . . . . . . . .	L Near	 00000512 _TEXT	
  warm . . . . . . . . . . . . .	L Near	 0000052D _TEXT	
  _start . . . . . . . . . . . .	L Near	 00000532 _TEXT	
  start  . . . . . . . . . . . .	L Near	 00000532 _TEXT	
  ROUND  . . . . . . . . . . . .	L Near	 000005A8 _TEXT	
  PAAUSE_  . . . . . . . . . . .	L Near	 000005BC _TEXT	
  unPAAUSE_  . . . . . . . . . .	L Near	 000005CE _TEXT	
  ACT  . . . . . . . . . . . . .	L Near	 000005D9 _TEXT	
  show0  . . . . . . . . . . . .	L Near	 000005FA _TEXT	
  show . . . . . . . . . . . . .	L Near	 00000600 _TEXT	
  c_ . . . . . . . . . . . . . .	L Near	 00000625 _TEXT	
  mark . . . . . . . . . . . . .	L Near	 0000062B _TEXT	
  empty  . . . . . . . . . . . .	L Near	 00000650 _TEXT	
  mFIND  . . . . . . . . . . . .	L Near	 0000067F _TEXT	
  FIND . . . . . . . . . . . . .	L Near	 0000068F _TEXT	
  EX1  . . . . . . . . . . . . .	L Near	 000006A3 _TEXT	
  execute  . . . . . . . . . . .	L Near	 000006BD _TEXT	
  ex2  . . . . . . . . . . . . .	L Near	 000006D3 _TEXT	
  ABORT  . . . . . . . . . . . .	L Near	 000006E5 _TEXT	
  ABORT1 . . . . . . . . . . . .	L Near	 00000700 _TEXT	
  sDEFINE  . . . . . . . . . . .	L Near	 0000073D _TEXT	
  MACRO_ . . . . . . . . . . . .	L Near	 00000744 _TEXT	
  macrod . . . . . . . . . . . .	L Near	 00000749 _TEXT	
  FORTH  . . . . . . . . . . . .	L Near	 0000075F _TEXT	
  forthd . . . . . . . . . . . .	L Near	 00000764 _TEXT	
  cdrop  . . . . . . . . . . . .	L Near	 000007C3 _TEXT	
  qdup . . . . . . . . . . . . .	L Near	 000007D9 _TEXT	
  cdup . . . . . . . . . . . . .	L Near	 000007F4 _TEXT	
  adup . . . . . . . . . . . . .	L Near	 0000080C _TEXT	
  var1 . . . . . . . . . . . . .	L Near	 00000812 _TEXT	
  variable . . . . . . . . . . .	L Near	 0000081F _TEXT	
  cNUM . . . . . . . . . . . . .	L Near	 00000860 _TEXT	
  cSHORT . . . . . . . . . . . .	L Near	 00000870 _TEXT	
  alit . . . . . . . . . . . . .	L Near	 00000887 _TEXT	
  literal  . . . . . . . . . . .	L Near	 00000891 _TEXT	
  qCOMPILE . . . . . . . . . . .	L Near	 000008BC _TEXT	
  call_  . . . . . . . . . . . .	L Near	 000008ED _TEXT	
  COMPILE  . . . . . . . . . . .	L Near	 0000090C _TEXT	
  SHORT_ . . . . . . . . . . . .	L Near	 0000092A _TEXT	
  NUM  . . . . . . . . . . . . .	L Near	 00000944 _TEXT	
  comma  . . . . . . . . . . . .	L Near	 0000095C _TEXT	
  comma1 . . . . . . . . . . . .	L Near	 00000978 _TEXT	
  comma2 . . . . . . . . . . . .	L Near	 0000097F _TEXT	
  comma3 . . . . . . . . . . . .	L Near	 00000986 _TEXT	
  semi . . . . . . . . . . . . .	L Near	 0000098D _TEXT	
  then . . . . . . . . . . . . .	L Near	 000009B1 _TEXT	
  begin  . . . . . . . . . . . .	L Near	 000009C4 _TEXT	
  here . . . . . . . . . . . . .	L Near	 000009CA _TEXT	
  qlit . . . . . . . . . . . . .	L Near	 000009D5 _TEXT	
  q1 . . . . . . . . . . . . . .	L Near	 00000A11 _TEXT	
  less . . . . . . . . . . . . .	L Near	 00000A1C _TEXT	
  qIGNORE  . . . . . . . . . . .	L Near	 00000A23 _TEXT	
  nul  . . . . . . . . . . . . .	L Near	 00000A32 _TEXT	
  jump . . . . . . . . . . . . .	L Near	 00000A33 _TEXT	
  LOAD . . . . . . . . . . . . .	L Near	 00000A40 _TEXT	
  INTER  . . . . . . . . . . . .	L Near	 00000A55 _TEXT	
  erase  . . . . . . . . . . . .	L Near	 00004120 _TEXT	
  copy . . . . . . . . . . . . .	L Near	 0000413C _TEXT	
  move . . . . . . . . . . . . .	L Near	 00004175 _TEXT	
  debug  . . . . . . . . . . . .	L Near	 00004187 _TEXT	
  nc_  . . . . . . . . . . . . .	L Near	 000041DC _TEXT	
  xy_  . . . . . . . . . . . . .	L Near	 000041EA _TEXT	
  fov_ . . . . . . . . . . . . .	L Near	 000041F8 _TEXT	
  sps  . . . . . . . . . . . . .	L Near	 00004206 _TEXT	
  last_  . . . . . . . . . . . .	L Near	 00004214 _TEXT	
  rgb  . . . . . . . . . . . . .	L Near	 00004234 _TEXT	
  white  . . . . . . . . . . . .	L Near	 0000424A _TEXT	
  color  . . . . . . . . . . . .	L Near	 00004254 _TEXT	
  fifof  . . . . . . . . . . . .	L Near	 00004260 _TEXT	
  graphic  . . . . . . . . . . .	L Near	 00004261 _TEXT	
  switch . . . . . . . . . . . .	L Near	 00004262 _TEXT	
  clip . . . . . . . . . . . . .	L Near	 0000426C _TEXT	
  bit16  . . . . . . . . . . . .	L Near	 000042A4 _TEXT	
  b16  . . . . . . . . . . . . .	L Near	 000042AD _TEXT	
  bit32  . . . . . . . . . . . .	L Near	 000042BC _TEXT	
  b32  . . . . . . . . . . . . .	L Near	 000042C5 _TEXT	
  emit . . . . . . . . . . . . .	L Near	 000042E5 _TEXT	
  BL_  . . . . . . . . . . . . .	L Near	 0000431B _TEXT	
  SPACE  . . . . . . . . . . . .	L Near	 0000431C _TEXT	
  emit2  . . . . . . . . . . . .	L Near	 00004327 _TEXT	
  text1  . . . . . . . . . . . .	L Near	 00004364 _TEXT	
  line . . . . . . . . . . . . .	L Near	 00004382 _TEXT	
  box  . . . . . . . . . . . . .	L Near	 000043A0 _TEXT	
  no . . . . . . . . . . . . . .	L Near	 000043EC _TEXT	
  CYAN . . . . . . . . . . . . .	L Near	 000043EF _TEXT	
  MAGENTA  . . . . . . . . . . .	L Near	 000043FE _TEXT	
  SILVER . . . . . . . . . . . .	L Near	 0000440D _TEXT	
  BLUE . . . . . . . . . . . . .	L Near	 0000441C _TEXT	
  RED  . . . . . . . . . . . . .	L Near	 0000442B _TEXT	
  GREEN  . . . . . . . . . . . .	L Near	 0000443A _TEXT	
  ECHO_  . . . . . . . . . . . .	L Near	 00004454 _TEXT	
  RIGHT  . . . . . . . . . . . .	L Near	 0000446D _TEXT	
  DOWN . . . . . . . . . . . . .	L Near	 00004483 _TEXT	
  ZERO . . . . . . . . . . . . .	L Near	 0000449F _TEXT	
  blank  . . . . . . . . . . . .	L Near	 000044AA _TEXT	
  TOP  . . . . . . . . . . . . .	L Near	 000044D4 _TEXT	
  qcr  . . . . . . . . . . . . .	L Near	 000044ED _TEXT	
  cr . . . . . . . . . . . . . .	L Near	 000044FD _TEXT	
  LMs  . . . . . . . . . . . . .	L Near	 00004517 _TEXT	
  RMs  . . . . . . . . . . . . .	L Near	 0000451E _TEXT	
  at . . . . . . . . . . . . . .	L Near	 00004525 _TEXT	
  pAT  . . . . . . . . . . . . .	L Near	 00004534 _TEXT	
  octant . . . . . . . . . . . .	L Near	 00004545 _TEXT	
  EIGHT  . . . . . . . . . . . .	L Near	 00004564 _TEXT	
  FOUR . . . . . . . . . . . . .	L Near	 00004574 _TEXT	
  FOUR1  . . . . . . . . . . . .	L Near	 00004579 _TEXT	
  stack  . . . . . . . . . . . .	L Near	 0000458F _TEXT	
  KEYBOARD . . . . . . . . . . .	L Near	 000045B0 _TEXT	
  LETTER . . . . . . . . . . . .	L Near	 000046AA _TEXT	
  CMLETTER . . . . . . . . . . .	L Near	 000046B9 _TEXT	
  QWLETTER . . . . . . . . . . .	L Near	 000046C2 _TEXT	
  QWDECODE . . . . . . . . . . .	L Near	 00004711 _TEXT	
  QWADJUST . . . . . . . . . . .	L Near	 00004727 _TEXT	
  qwerty . . . . . . . . . . . .	L Near	 00004783 _TEXT	
  wkey . . . . . . . . . . . . .	L Near	 000047B4 _TEXT	
  wkey1  . . . . . . . . . . . .	L Near	 000047DC _TEXT	
  wkeyex . . . . . . . . . . . .	L Near	 0000483E _TEXT	
  KEY  . . . . . . . . . . . . .	L Near	 0000485E _TEXT	
  nul0 . . . . . . . . . . . . .	L Near	 00004925 _TEXT	
  ACCEPT . . . . . . . . . . . .	L Near	 00004928 _TEXT	
  acceptn  . . . . . . . . . . .	L Near	 00004928 _TEXT	
  ACCEPT1  . . . . . . . . . . .	L Near	 00004938 _TEXT	
  PACK . . . . . . . . . . . . .	L Near	 0000495C _TEXT	
  LJ0  . . . . . . . . . . . . .	L Near	 00004988 _TEXT	
  LJ . . . . . . . . . . . . . .	L Near	 00004994 _TEXT	
  FULL . . . . . . . . . . . . .	L Near	 0000499B _TEXT	
  X  . . . . . . . . . . . . . .	L Near	 000049BB _TEXT	
  WORD_  . . . . . . . . . . . .	L Near	 000049CE _TEXT	
  WORD1  . . . . . . . . . . . .	L Near	 000049F9 _TEXT	
  WORD0  . . . . . . . . . . . .	L Near	 00004A22 _TEXT	
  decimal  . . . . . . . . . . .	L Near	 00004A2A _TEXT	
  hex  . . . . . . . . . . . . .	L Near	 00004A49 _TEXT	
  octal  . . . . . . . . . . . .	L Near	 00004A68 _TEXT	
  Xn . . . . . . . . . . . . . .	L Near	 00004A8B _TEXT	
  MINUS  . . . . . . . . . . . .	L Near	 00004AB1 _TEXT	
  NUMBER0  . . . . . . . . . . .	L Near	 00004AB8 _TEXT	
  NUMBER . . . . . . . . . . . .	L Near	 00004ABB _TEXT	
  NUMBER3  . . . . . . . . . . .	L Near	 00004ACA _TEXT	
  NUMBER2  . . . . . . . . . . .	L Near	 00004B01 _TEXT	
  ENDN . . . . . . . . . . . . .	L Near	 00004B0E _TEXT	
  ALPHn  . . . . . . . . . . . .	L Near	 00004B1A _TEXT	
  ALPH0  . . . . . . . . . . . .	L Near	 00004B1B _TEXT	
  STAR0  . . . . . . . . . . . .	L Near	 00004B2D _TEXT	
  ALPH . . . . . . . . . . . . .	L Near	 00004B43 _TEXT	
  GRAPH  . . . . . . . . . . . .	L Near	 00004B55 _TEXT	
  first  . . . . . . . . . . . .	L Near	 00004B70 _TEXT	
  eDIG1  . . . . . . . . . . . .	L Near	 00004B97 _TEXT	
  eDIG . . . . . . . . . . . . .	L Near	 00004B9C _TEXT	
  oDIG . . . . . . . . . . . . .	L Near	 00004BAA _TEXT	
  hdotn  . . . . . . . . . . . .	L Near	 00004BB6 _TEXT	
  hdot . . . . . . . . . . . . .	L Near	 00004BC8 _TEXT	
  dot  . . . . . . . . . . . . .	L Near	 00004BDC _TEXT	
  @h1  . . . . . . . . . . . . .	L Near	 00004BF2 _TEXT	
  @h . . . . . . . . . . . . . .	L Near	 00004C01 _TEXT	
  qdot . . . . . . . . . . . . .	L Near	 00004C04 _TEXT	
  dot10  . . . . . . . . . . . .	L Near	 00004C0D _TEXT	
  D_1  . . . . . . . . . . . . .	L Near	 00004C48 _TEXT	
  D_2  . . . . . . . . . . . . .	L Near	 00004C50 _TEXT	
  unPACK . . . . . . . . . . . .	L Near	 00004C5E _TEXT	
  qRING  . . . . . . . . . . . .	L Near	 00004C8D _TEXT	
  RING . . . . . . . . . . . . .	L Near	 00004CB3 _TEXT	
  rW . . . . . . . . . . . . . .	L Near	 00004CFC _TEXT	
  rw_cr  . . . . . . . . . . . .	L Near	 00004D1B _TEXT	
  gW . . . . . . . . . . . . . .	L Near	 00004D2C _TEXT	
  mW . . . . . . . . . . . . . .	L Near	 00004D36 _TEXT	
  wW . . . . . . . . . . . . . .	L Near	 00004D40 _TEXT	
  type0  . . . . . . . . . . . .	L Near	 00004D51 _TEXT	
  Cap  . . . . . . . . . . . . .	L Near	 00004D80 _TEXT	
  CAPS . . . . . . . . . . . . .	L Near	 00004DA2 _TEXT	
  text . . . . . . . . . . . . .	L Near	 00004DC6 _TEXT	
  TYPE_  . . . . . . . . . . . .	L Near	 00004DCB _TEXT	
  type1  . . . . . . . . . . . .	L Near	 00004DCB _TEXT	
  type2  . . . . . . . . . . . .	L Near	 00004DDA _TEXT	
  gsW  . . . . . . . . . . . . .	L Near	 00004DF0 _TEXT	
  var  . . . . . . . . . . . . .	L Near	 00004DFC _TEXT	
  gnW  . . . . . . . . . . . . .	L Near	 00004E06 _TEXT	
  gnW1 . . . . . . . . . . . . .	L Near	 00004E0E _TEXT	
  sW . . . . . . . . . . . . . .	L Near	 00004E2B _TEXT	
  nW . . . . . . . . . . . . . .	L Near	 00004E37 _TEXT	
  nW1  . . . . . . . . . . . . .	L Near	 00004E3F _TEXT	
  siW  . . . . . . . . . . . . .	L Near	 00004E6C _TEXT	
  not_cr . . . . . . . . . . . .	L Near	 00004E97 _TEXT	
  bW . . . . . . . . . . . . . .	L Near	 00004E9E _TEXT	
  REFRESH  . . . . . . . . . . .	L Near	 00004F6C _TEXT	
  ref1 . . . . . . . . . . . . .	L Near	 00004FAA _TEXT	
  act1 . . . . . . . . . . . . .	L Near	 00005139 _TEXT	
  act3 . . . . . . . . . . . . .	L Near	 0000513D _TEXT	
  act4 . . . . . . . . . . . . .	L Near	 00005141 _TEXT	
  act9 . . . . . . . . . . . . .	L Near	 00005145 _TEXT	
  act10  . . . . . . . . . . . .	L Near	 00005149 _TEXT	
  act11  . . . . . . . . . . . .	L Near	 0000514D _TEXT	
  actA . . . . . . . . . . . . .	L Near	 00005151 _TEXT	
  actB . . . . . . . . . . . . .	L Near	 00005155 _TEXT	
  act7 . . . . . . . . . . . . .	L Near	 00005159 _TEXT	
  actn . . . . . . . . . . . . .	L Near	 00005171 _TEXT	
  actv . . . . . . . . . . . . .	L Near	 0000517D _TEXT	
  mcur . . . . . . . . . . . . .	L Near	 000051A7 _TEXT	
  pcur . . . . . . . . . . . . .	L Near	 000051AF _TEXT	
  mmcur  . . . . . . . . . . . .	L Near	 000051B6 _TEXT	
  ppcur  . . . . . . . . . . . .	L Near	 000051CA _TEXT	
  pblk . . . . . . . . . . . . .	L Near	 000051D2 _TEXT	
  mblk . . . . . . . . . . . . .	L Near	 000051DD _TEXT	
  shadow . . . . . . . . . . . .	L Near	 000051F1 _TEXT	
  otherBlk . . . . . . . . . . .	L Near	 000051FC _TEXT	
  E0 . . . . . . . . . . . . . .	L Near	 0000520F _TEXT	
  edit . . . . . . . . . . . . .	L Near	 00005212 _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 00005218 _TEXT	
  eout . . . . . . . . . . . . .	L Near	 00005274 _TEXT	
  destack  . . . . . . . . . . .	L Near	 000052AB _TEXT	
  insert0  . . . . . . . . . . .	L Near	 000052DC _TEXT	
  insert1  . . . . . . . . . . .	L Near	 00005301 _TEXT	
  insert . . . . . . . . . . . .	L Near	 00005343 _TEXT	
  FORMAT . . . . . . . . . . . .	L Near	 0000535A _TEXT	
  FORMAT2  . . . . . . . . . . .	L Near	 0000539E _TEXT	
  DEL  . . . . . . . . . . . . .	L Near	 000053CF _TEXT	
  enstack  . . . . . . . . . . .	L Near	 000053F7 _TEXT	
  ens  . . . . . . . . . . . . .	L Near	 00005430 _TEXT	
  pad  . . . . . . . . . . . . .	L Near	 00005432 _TEXT	
  code_end . . . . . . . . . . .	L Near	 0000546C _TEXT	
BeginPaint . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateCompatibleDC . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateDIBSection . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileMappingA . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateWindowExA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DefWindowProcA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DispatchMessageA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EndPaint . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDC  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMessageA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetModuleHandleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcAddress . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InvalidateRect . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadCursorA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadIconA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadLibraryA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MapViewOfFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MapVirtualKeyA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputDebugStringA . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekMessageA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RegisterClassExA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowWindow . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StretchDIBits  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TranslateMessage . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnmapViewOfFile  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateWindow . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
VirtualAlloc . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wnd_proc . . . . . . . . . . . .	P Near	 000001A4 _TEXT	Length= 00000068 Public STDCALL
  hWnd . . . . . . . . . . . . .	DWord	 bp + 00000008
  uMsg . . . . . . . . . . . . .	DWord	 bp + 0000000C
  wParam . . . . . . . . . . . .	DWord	 bp + 00000010
  lParam . . . . . . . . . . . .	DWord	 bp + 00000014
  wnd_proc_ex  . . . . . . . . .	L Near	 00000203 _TEXT	
  wnd_proc_exx . . . . . . . . .	L Near	 00000208 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@h1  . . . . . . . . . . . . . .	L Near	 00004BF2 _TEXT	
@h . . . . . . . . . . . . . . .	L Near	 00004C01 _TEXT	
@stack . . . . . . . . . . . . .	Text   	 FLAT
ABORT1 . . . . . . . . . . . . .	L Near	 00000700 _TEXT	
ABORT  . . . . . . . . . . . . .	L Near	 000006E5 _TEXT	
ACCEPT1  . . . . . . . . . . . .	L Near	 00004938 _TEXT	
ACCEPT . . . . . . . . . . . . .	L Near	 00004928 _TEXT	
ACT  . . . . . . . . . . . . . .	L Near	 000005D9 _TEXT	
ALPH0  . . . . . . . . . . . . .	L Near	 00004B1B _TEXT	
ALPHn  . . . . . . . . . . . . .	L Near	 00004B1A _TEXT	
ALPH . . . . . . . . . . . . . .	L Near	 00004B43 _TEXT	
BLUE . . . . . . . . . . . . . .	L Near	 0000441C _TEXT	
BL_  . . . . . . . . . . . . . .	L Near	 0000431B _TEXT	
CAPS . . . . . . . . . . . . . .	L Near	 00004DA2 _TEXT	
CMLETTER . . . . . . . . . . . .	L Near	 000046B9 _TEXT	
COMPILE  . . . . . . . . . . . .	L Near	 0000090C _TEXT	
CYAN . . . . . . . . . . . . . .	L Near	 000043EF _TEXT	
Cap  . . . . . . . . . . . . . .	L Near	 00004D80 _TEXT	
DEL  . . . . . . . . . . . . . .	L Near	 000053CF _TEXT	
DOWN . . . . . . . . . . . . . .	L Near	 00004483 _TEXT	
D_1  . . . . . . . . . . . . . .	L Near	 00004C48 _TEXT	
D_2  . . . . . . . . . . . . . .	L Near	 00004C50 _TEXT	
E0 . . . . . . . . . . . . . . .	L Near	 0000520F _TEXT	
ECHO_  . . . . . . . . . . . . .	L Near	 00004454 _TEXT	
EIGHT  . . . . . . . . . . . . .	L Near	 00004564 _TEXT	
ENDN . . . . . . . . . . . . . .	L Near	 00004B0E _TEXT	
EX1  . . . . . . . . . . . . . .	L Near	 000006A3 _TEXT	
E  . . . . . . . . . . . . . . .	L Near	 00005218 _TEXT	
FIND . . . . . . . . . . . . . .	L Near	 0000068F _TEXT	
FORMAT2  . . . . . . . . . . . .	L Near	 0000539E _TEXT	
FORMAT . . . . . . . . . . . . .	L Near	 0000535A _TEXT	
FORTH  . . . . . . . . . . . . .	L Near	 0000075F _TEXT	
FOUR1  . . . . . . . . . . . . .	L Near	 00004579 _TEXT	
FOUR . . . . . . . . . . . . . .	L Near	 00004574 _TEXT	
FULL . . . . . . . . . . . . . .	L Near	 0000499B _TEXT	
GRAPH  . . . . . . . . . . . . .	L Near	 00004B55 _TEXT	
GREEN  . . . . . . . . . . . . .	L Near	 0000443A _TEXT	
Godd_size  . . . . . . . . . . .	Number	 00000BB8h   
Godd . . . . . . . . . . . . . .	Number	 00003A98h   
Gods . . . . . . . . . . . . . .	Number	 00004650h   
God  . . . . . . . . . . . . . .	DWord	 000005AD _TEXT	
H  . . . . . . . . . . . . . . .	DWord	 00000ABC _TEXT	
INTER  . . . . . . . . . . . . .	L Near	 00000A55 _TEXT	
KEYBOARD . . . . . . . . . . . .	L Near	 000045B0 _TEXT	
KEY  . . . . . . . . . . . . . .	L Near	 0000485E _TEXT	
LETTER . . . . . . . . . . . . .	L Near	 000046AA _TEXT	
LJ0  . . . . . . . . . . . . . .	L Near	 00004988 _TEXT	
LJ . . . . . . . . . . . . . . .	L Near	 00004994 _TEXT	
LMs  . . . . . . . . . . . . . .	L Near	 00004517 _TEXT	
LOAD . . . . . . . . . . . . . .	L Near	 00000A40 _TEXT	
MACRO_ . . . . . . . . . . . . .	L Near	 00000744 _TEXT	
MAGENTA  . . . . . . . . . . . .	L Near	 000043FE _TEXT	
MINUS  . . . . . . . . . . . . .	L Near	 00004AB1 _TEXT	
NUMBER0  . . . . . . . . . . . .	L Near	 00004AB8 _TEXT	
NUMBER2  . . . . . . . . . . . .	L Near	 00004B01 _TEXT	
NUMBER3  . . . . . . . . . . . .	L Near	 00004ACA _TEXT	
NUMBER . . . . . . . . . . . . .	L Near	 00004ABB _TEXT	
NUM  . . . . . . . . . . . . . .	L Near	 00000944 _TEXT	
PAAUSE_  . . . . . . . . . . . .	L Near	 000005BC _TEXT	
PACK . . . . . . . . . . . . . .	L Near	 0000495C _TEXT	
QWADJUST . . . . . . . . . . . .	L Near	 00004727 _TEXT	
QWDECODE . . . . . . . . . . . .	L Near	 00004711 _TEXT	
QWLETTER . . . . . . . . . . . .	L Near	 000046C2 _TEXT	
RED  . . . . . . . . . . . . . .	L Near	 0000442B _TEXT	
REFRESH  . . . . . . . . . . . .	L Near	 00004F6C _TEXT	
RIGHT  . . . . . . . . . . . . .	L Near	 0000446D _TEXT	
RING . . . . . . . . . . . . . .	L Near	 00004CB3 _TEXT	
RMs  . . . . . . . . . . . . . .	L Near	 0000451E _TEXT	
ROUND  . . . . . . . . . . . . .	L Near	 000005A8 _TEXT	
SHORT_ . . . . . . . . . . . . .	L Near	 0000092A _TEXT	
SILVER . . . . . . . . . . . . .	L Near	 0000440D _TEXT	
SPACE  . . . . . . . . . . . . .	L Near	 0000431C _TEXT	
STAR0  . . . . . . . . . . . . .	L Near	 00004B2D _TEXT	
TOP  . . . . . . . . . . . . . .	L Near	 000044D4 _TEXT	
TYPE_  . . . . . . . . . . . . .	L Near	 00004DCB _TEXT	
WORD0  . . . . . . . . . . . . .	L Near	 00004A22 _TEXT	
WORD1  . . . . . . . . . . . . .	L Near	 000049F9 _TEXT	
WORD_  . . . . . . . . . . . . .	L Near	 000049CE _TEXT	
Xn . . . . . . . . . . . . . . .	L Near	 00004A8B _TEXT	
X  . . . . . . . . . . . . . . .	L Near	 000049BB _TEXT	
ZERO . . . . . . . . . . . . . .	L Near	 0000449F _TEXT	
_IObuff  . . . . . . . . . . . .	Byte	 00000163 _TEXT	
_start . . . . . . . . . . . . .	L Near	 00000532 _TEXT	Public STDCALL
aDEFINE  . . . . . . . . . . . .	DWord	 00000A78 _TEXT	
acceptn  . . . . . . . . . . . .	L Near	 00004928 _TEXT	
act10  . . . . . . . . . . . . .	L Near	 00005149 _TEXT	
act11  . . . . . . . . . . . . .	L Near	 0000514D _TEXT	
act1 . . . . . . . . . . . . . .	L Near	 00005139 _TEXT	
act3 . . . . . . . . . . . . . .	L Near	 0000513D _TEXT	
act4 . . . . . . . . . . . . . .	L Near	 00005141 _TEXT	
act7 . . . . . . . . . . . . . .	L Near	 00005159 _TEXT	
act9 . . . . . . . . . . . . . .	L Near	 00005145 _TEXT	
actA . . . . . . . . . . . . . .	L Near	 00005151 _TEXT	
actB . . . . . . . . . . . . . .	L Near	 00005155 _TEXT	
actc . . . . . . . . . . . . . .	DWord	 000050FC _TEXT	
action . . . . . . . . . . . . .	Byte	 00005138 _TEXT	
actn . . . . . . . . . . . . . .	L Near	 00005171 _TEXT	
actv . . . . . . . . . . . . . .	L Near	 0000517D _TEXT	
adup . . . . . . . . . . . . . .	L Near	 0000080C _TEXT	
alit . . . . . . . . . . . . . .	L Near	 00000887 _TEXT	
alloc_buffers  . . . . . . . . .	L Near	 000000E8 _TEXT	
alloc_display  . . . . . . . . .	L Near	 00000372 _TEXT	
alloc_mem  . . . . . . . . . . .	L Near	 000000D0 _TEXT	
alloc_window . . . . . . . . . .	L Near	 0000020C _TEXT	
alpha0 . . . . . . . . . . . . .	DWord	 000048B0 _TEXT	
alpha1 . . . . . . . . . . . . .	DWord	 000048C4 _TEXT	
alpha  . . . . . . . . . . . . .	Byte	 0000464A _TEXT	
anumber  . . . . . . . . . . . .	DWord	 0000491C _TEXT	
area_size  . . . . . . . . . . .	Number	 00004650h   
at . . . . . . . . . . . . . . .	L Near	 00004525 _TEXT	
aword  . . . . . . . . . . . . .	DWord	 00004918 _TEXT	
b16  . . . . . . . . . . . . . .	L Near	 000042AD _TEXT	
b32  . . . . . . . . . . . . . .	L Near	 000042C5 _TEXT	
bW . . . . . . . . . . . . . . .	L Near	 00004E9E _TEXT	
base . . . . . . . . . . . . . .	DWord	 00004908 _TEXT	
bas  . . . . . . . . . . . . . .	DWord	 00005050 _TEXT	
begin  . . . . . . . . . . . . .	L Near	 000009C4 _TEXT	
bit16  . . . . . . . . . . . . .	L Near	 000042A4 _TEXT	
bit32  . . . . . . . . . . . . .	L Near	 000042BC _TEXT	
bits . . . . . . . . . . . . . .	Byte	 00004954 _TEXT	
blank  . . . . . . . . . . . . .	L Near	 000044AA _TEXT	
blk0 . . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
blk  . . . . . . . . . . . . . .	DWord	 00005054 _TEXT	
bload_ex . . . . . . . . . . . .	L Near	 000004FE _TEXT	
bload  . . . . . . . . . . . . .	L Near	 000004CE _TEXT	
blocks_adr . . . . . . . . . . .	DWord	 0000002D _TEXT	
blocks_file  . . . . . . . . . .	Byte	 0000001E _TEXT	
bmih . . . . . . . . . . . . . .	BITMAPINFOHEADER  0000033E _TEXT	
board  . . . . . . . . . . . . .	DWord	 00004900 _TEXT	
box  . . . . . . . . . . . . . .	L Near	 000043A0 _TEXT	
bpc  . . . . . . . . . . . . . .	Number	 00000002h   
bye  . . . . . . . . . . . . . .	L Near	 00000007 _TEXT	
cNUM . . . . . . . . . . . . . .	L Near	 00000860 _TEXT	
cSHORT . . . . . . . . . . . . .	L Near	 00000870 _TEXT	
c_ . . . . . . . . . . . . . . .	L Near	 00000625 _TEXT	
cad  . . . . . . . . . . . . . .	DWord	 00005060 _TEXT	
call_  . . . . . . . . . . . . .	L Near	 000008ED _TEXT	
cdrop  . . . . . . . . . . . . .	L Near	 000007C3 _TEXT	
cdup . . . . . . . . . . . . . .	L Near	 000007F4 _TEXT	
chars  . . . . . . . . . . . . .	DWord	 00004914 _TEXT	
class  . . . . . . . . . . . . .	DWord	 00000AC4 _TEXT	
clip . . . . . . . . . . . . . .	L Near	 0000426C _TEXT	
code_begin . . . . . . . . . . .	L Near	 00000000 _TEXT	
code_end . . . . . . . . . . . .	L Near	 0000546C _TEXT	
color  . . . . . . . . . . . . .	L Near	 00004254 _TEXT	
comma1 . . . . . . . . . . . . .	L Near	 00000978 _TEXT	
comma2 . . . . . . . . . . . . .	L Near	 0000097F _TEXT	
comma3 . . . . . . . . . . . . .	L Near	 00000986 _TEXT	
comma  . . . . . . . . . . . . .	L Near	 0000095C _TEXT	
copy . . . . . . . . . . . . . .	L Near	 0000413C _TEXT	
cr . . . . . . . . . . . . . . .	L Near	 000044FD _TEXT	
current  . . . . . . . . . . . .	DWord	 0000490C _TEXT	
curs . . . . . . . . . . . . . .	DWord	 0000505C _TEXT	
debug  . . . . . . . . . . . . .	L Near	 00004187 _TEXT	
decimal  . . . . . . . . . . . .	L Near	 00004A2A _TEXT	
destack  . . . . . . . . . . . .	L Near	 000052AB _TEXT	
digit  . . . . . . . . . . . . .	Byte	 00004A92 _TEXT	
display  . . . . . . . . . . . .	DWord	 00004FEC _TEXT	
dlimp  . . . . . . . . . . . . .	L Near	 00000509 _TEXT	
dlopen . . . . . . . . . . . . .	L Near	 00000502 _TEXT	
dot10  . . . . . . . . . . . . .	L Near	 00004C0D _TEXT	
dot  . . . . . . . . . . . . . .	L Near	 00004BDC _TEXT	
draw_display . . . . . . . . . .	L Near	 0000043D _TEXT	
dummyio  . . . . . . . . . . . .	Byte	 000001A3 _TEXT	
dummy  . . . . . . . . . . . . .	DWord	 00004690 _STACK	
eDIG1  . . . . . . . . . . . . .	L Near	 00004B97 _TEXT	
eDIG . . . . . . . . . . . . . .	L Near	 00004B9C _TEXT	
edit . . . . . . . . . . . . . .	L Near	 00005212 _TEXT	
ekbd0  . . . . . . . . . . . . .	DWord	 000050D0 _TEXT	
ekbd . . . . . . . . . . . . . .	Byte	 000050E4 _TEXT	
ekeys  . . . . . . . . . . . . .	DWord	 00005070 _TEXT	
emit2  . . . . . . . . . . . . .	L Near	 00004327 _TEXT	
emit . . . . . . . . . . . . . .	L Near	 000042E5 _TEXT	
empty  . . . . . . . . . . . . .	L Near	 00000650 _TEXT	
enstack  . . . . . . . . . . . .	L Near	 000053F7 _TEXT	
ens  . . . . . . . . . . . . . .	L Near	 00005430 _TEXT	
eout . . . . . . . . . . . . . .	L Near	 00005274 _TEXT	
erase  . . . . . . . . . . . . .	L Near	 00004120 _TEXT	
ex2  . . . . . . . . . . . . . .	L Near	 000006D3 _TEXT	
execute  . . . . . . . . . . . .	L Near	 000006BD _TEXT	
exit_process . . . . . . . . . .	L Near	 00000007 _TEXT	
fail_process . . . . . . . . . .	L Near	 00000000 _TEXT	
fifof  . . . . . . . . . . . . .	L Near	 00004260 _TEXT	
first  . . . . . . . . . . . . .	L Near	 00004B70 _TEXT	
fmap . . . . . . . . . . . . . .	L Near	 000004AD _TEXT	
fname  . . . . . . . . . . . . .	DWord	 000004A8 _TEXT	
fore . . . . . . . . . . . . . .	DWord	 00004228 _TEXT	
forth0 . . . . . . . . . . . . .	DWord	 00000CF0 _TEXT	
forth1 . . . . . . . . . . . . .	DWord	 00000DFC _TEXT	
forth2 . . . . . . . . . . . . .	DWord	 00003814 _TEXT	
forthd . . . . . . . . . . . . .	L Near	 00000764 _TEXT	
forths . . . . . . . . . . . . .	DWord	 00000AD4 _TEXT	
fov_ . . . . . . . . . . . . . .	L Near	 000041F8 _TEXT	
fov  . . . . . . . . . . . . . .	DWord	 000041D8 _TEXT	
frame  . . . . . . . . . . . . .	DWord	 00004224 _TEXT	
funmap . . . . . . . . . . . . .	L Near	 000004C2 _TEXT	
gW . . . . . . . . . . . . . . .	L Near	 00004D2C _TEXT	
gap_size . . . . . . . . . . . .	Number	 00000BB8h   
gnW1 . . . . . . . . . . . . . .	L Near	 00004E0E _TEXT	
gnW  . . . . . . . . . . . . . .	L Near	 00004E06 _TEXT	
graph0 . . . . . . . . . . . . .	DWord	 00004888 _TEXT	
graph1 . . . . . . . . . . . . .	DWord	 0000489C _TEXT	
graphics . . . . . . . . . . . .	Byte	 00004662 _TEXT	
graphic  . . . . . . . . . . . .	L Near	 00004261 _TEXT	
gsW  . . . . . . . . . . . . . .	L Near	 00004DF0 _TEXT	
hbmpframe  . . . . . . . . . . .	DWord	 0000036A _TEXT	
hcurmain . . . . . . . . . . . .	DWord	 00000130 _TEXT	
hc . . . . . . . . . . . . . . .	Number	 0000002Eh   
hdcdesktop . . . . . . . . . . .	DWord	 00000366 _TEXT	
hdcframe . . . . . . . . . . . .	DWord	 0000036E _TEXT	
hdcpaint . . . . . . . . . . . .	DWord	 00000439 _TEXT	
hdotn  . . . . . . . . . . . . .	L Near	 00004BB6 _TEXT	
hdot . . . . . . . . . . . . . .	L Near	 00004BC8 _TEXT	
here . . . . . . . . . . . . . .	L Near	 000009CA _TEXT	
hex  . . . . . . . . . . . . . .	L Near	 00004A49 _TEXT	
hiconmain  . . . . . . . . . . .	DWord	 0000012C _TEXT	
hicon  . . . . . . . . . . . . .	Byte	 00004B87 _TEXT	
history  . . . . . . . . . . . .	Byte	 00004449 _TEXT	
hmodule  . . . . . . . . . . . .	DWord	 00000128 _TEXT	
hp . . . . . . . . . . . . . . .	Number	 00000400h   
hwndmain . . . . . . . . . . . .	DWord	 00000134 _TEXT	
icon0  . . . . . . . . . . . . .	L Near	 00000031 _TEXT	
icons_adr  . . . . . . . . . . .	DWord	 00000029 _TEXT	
icons_file . . . . . . . . . . .	Byte	 00000014 _TEXT	
ih . . . . . . . . . . . . . . .	Number	 0000001Eh   
insert0  . . . . . . . . . . . .	L Near	 000052DC _TEXT	
insert1  . . . . . . . . . . . .	L Near	 00005301 _TEXT	
insert . . . . . . . . . . . . .	L Near	 00005343 _TEXT	
isqwerty . . . . . . . . . . . .	Byte	 00004743 _TEXT	
iw . . . . . . . . . . . . . . .	Number	 00000016h   
jump . . . . . . . . . . . . . .	L Near	 00000A33 _TEXT	
keyc . . . . . . . . . . . . . .	DWord	 00004910 _TEXT	
keys . . . . . . . . . . . . . .	Byte	 0000478A _TEXT	
last_error . . . . . . . . . . .	L Near	 0000000E _TEXT	
last_  . . . . . . . . . . . . .	L Near	 00004214 _TEXT	
last . . . . . . . . . . . . . .	DWord	 00000AC0 _TEXT	
lcad . . . . . . . . . . . . . .	DWord	 00005068 _TEXT	
less . . . . . . . . . . . . . .	L Near	 00000A1C _TEXT	
line . . . . . . . . . . . . . .	L Near	 00004382 _TEXT	
list . . . . . . . . . . . . . .	DWord	 00000AC8 _TEXT	
literal  . . . . . . . . . . . .	L Near	 00000891 _TEXT	
lit  . . . . . . . . . . . . . .	DWord	 00000AAC _TEXT	
lm . . . . . . . . . . . . . . .	DWord	 000041CC _TEXT	
mFIND  . . . . . . . . . . . . .	L Near	 0000067F _TEXT	
mW . . . . . . . . . . . . . . .	L Near	 00004D36 _TEXT	
macro0 . . . . . . . . . . . . .	DWord	 00000AD8 _TEXT	
macro1 . . . . . . . . . . . . .	DWord	 00000AF0 _TEXT	
macro2 . . . . . . . . . . . . .	DWord	 000035FC _TEXT	
macrod . . . . . . . . . . . . .	L Near	 00000749 _TEXT	
macros . . . . . . . . . . . . .	DWord	 00000AD0 _TEXT	
maind_size . . . . . . . . . . .	Number	 00000BB8h   
maind  . . . . . . . . . . . . .	Number	 00001770h   
mains_size . . . . . . . . . . .	Number	 00001770h   
mains  . . . . . . . . . . . . .	Number	 00002328h   
main . . . . . . . . . . . . . .	DWord	 000005B6 _TEXT	
map_file_ex1 . . . . . . . . . .	L Near	 00000093 _TEXT	
map_file_ex  . . . . . . . . . .	L Near	 00000099 _TEXT	
map_file . . . . . . . . . . . .	L Near	 00000052 _TEXT	
map_work_files . . . . . . . . .	L Near	 000000A1 _TEXT	
mark . . . . . . . . . . . . . .	L Near	 0000062B _TEXT	
mblk . . . . . . . . . . . . . .	L Near	 000051DD _TEXT	
mcur . . . . . . . . . . . . . .	L Near	 000051A7 _TEXT	
me . . . . . . . . . . . . . . .	DWord	 000005A0 _TEXT	
mk . . . . . . . . . . . . . . .	DWord	 00000AB0 _TEXT	
mmcur  . . . . . . . . . . . . .	L Near	 000051B6 _TEXT	
move . . . . . . . . . . . . . .	L Near	 00004175 _TEXT	
nW1  . . . . . . . . . . . . . .	L Near	 00004E3F _TEXT	
nW . . . . . . . . . . . . . . .	L Near	 00004E37 _TEXT	
nc_  . . . . . . . . . . . . . .	L Near	 000041DC _TEXT	
nc . . . . . . . . . . . . . . .	DWord	 0000059C _TEXT	
not_cr . . . . . . . . . . . . .	L Near	 00004E97 _TEXT	
notimpl  . . . . . . . . . . . .	L Near	 000004A3 _TEXT	
no . . . . . . . . . . . . . . .	L Near	 000043EC _TEXT	
nul0 . . . . . . . . . . . . . .	L Near	 00004925 _TEXT	
nul  . . . . . . . . . . . . . .	L Near	 00000A32 _TEXT	
numb0  . . . . . . . . . . . . .	DWord	 000048D8 _TEXT	
numb1  . . . . . . . . . . . . .	DWord	 000048EC _TEXT	
numbers  . . . . . . . . . . . .	Byte	 0000467A _TEXT	
oDIG . . . . . . . . . . . . . .	L Near	 00004BAA _TEXT	
octals . . . . . . . . . . . . .	Byte	 00004692 _TEXT	
octal  . . . . . . . . . . . . .	L Near	 00004A68 _TEXT	
octant . . . . . . . . . . . . .	L Near	 00004545 _TEXT	
otherBlk . . . . . . . . . . . .	L Near	 000051FC _TEXT	
outputdebug  . . . . . . . . . .	L Near	 00000512 _TEXT	
pAT  . . . . . . . . . . . . . .	L Near	 00004534 _TEXT	
pad  . . . . . . . . . . . . . .	L Near	 00005432 _TEXT	
paintstruc . . . . . . . . . . .	PAINTSTRUCT  000003F9 _TEXT	
pblk . . . . . . . . . . . . . .	L Near	 000051D2 _TEXT	
pcad . . . . . . . . . . . . . .	DWord	 00005064 _TEXT	
pcur . . . . . . . . . . . . . .	L Near	 000051AF _TEXT	
ppcur  . . . . . . . . . . . . .	L Near	 000051CA _TEXT	
process_messages_disp  . . . . .	L Near	 00000329 _TEXT	
process_messages_ex  . . . . . .	L Near	 0000033D _TEXT	
process_messages . . . . . . . .	L Near	 00000310 _TEXT	
q1 . . . . . . . . . . . . . . .	L Near	 00000A11 _TEXT	
qCOMPILE . . . . . . . . . . . .	L Near	 000008BC _TEXT	
qIGNORE  . . . . . . . . . . . .	L Near	 00000A23 _TEXT	
qRING  . . . . . . . . . . . . .	L Near	 00004C8D _TEXT	
qcr  . . . . . . . . . . . . . .	L Near	 000044ED _TEXT	
qdot . . . . . . . . . . . . . .	L Near	 00004C04 _TEXT	
qdup . . . . . . . . . . . . . .	L Near	 000007D9 _TEXT	
qlit . . . . . . . . . . . . . .	L Near	 000009D5 _TEXT	
qwerty . . . . . . . . . . . . .	L Near	 00004783 _TEXT	
qwkeys . . . . . . . . . . . . .	Byte	 00004744 _TEXT	
rW . . . . . . . . . . . . . . .	L Near	 00004CFC _TEXT	
ref1 . . . . . . . . . . . . . .	L Near	 00004FAA _TEXT	
rgb  . . . . . . . . . . . . . .	L Near	 00004234 _TEXT	
rm . . . . . . . . . . . . . . .	DWord	 000041D0 _TEXT	
rw_cr  . . . . . . . . . . . . .	L Near	 00004D1B _TEXT	
rw_no_cr . . . . . . . . . . . .	Byte	 00004924 _TEXT	
sDEFINE  . . . . . . . . . . . .	L Near	 0000073D _TEXT	
sW . . . . . . . . . . . . . . .	L Near	 00004E2B _TEXT	
screen . . . . . . . . . . . . .	DWord	 000005A4 _TEXT	
semi . . . . . . . . . . . . . .	L Near	 0000098D _TEXT	
shadow . . . . . . . . . . . . .	L Near	 000051F1 _TEXT	
shift  . . . . . . . . . . . . .	DWord	 00004904 _TEXT	
show0  . . . . . . . . . . . . .	L Near	 000005FA _TEXT	
show . . . . . . . . . . . . . .	L Near	 00000600 _TEXT	
siW  . . . . . . . . . . . . . .	L Near	 00004E6C _TEXT	
sign . . . . . . . . . . . . . .	Byte	 00004AB0 _TEXT	
spaces . . . . . . . . . . . . .	DWord	 00000A6C _TEXT	
sps  . . . . . . . . . . . . . .	L Near	 00004206 _TEXT	
stack0 . . . . . . . . . . . . .	DWord	 00000521 _TEXT	
stack1 . . . . . . . . . . . . .	DWord	 00000525 _TEXT	
stack2 . . . . . . . . . . . . .	DWord	 00000529 _TEXT	
stack  . . . . . . . . . . . . .	L Near	 0000458F _TEXT	
start  . . . . . . . . . . . . .	L Near	 00000532 _TEXT	
switch . . . . . . . . . . . . .	L Near	 00004262 _TEXT	
szwndclass . . . . . . . . . . .	Byte	 00000140 _TEXT	
szwndname  . . . . . . . . . . .	Byte	 0000014B _TEXT	
tens . . . . . . . . . . . . . .	DWord	 0000502C _TEXT	
text1  . . . . . . . . . . . . .	L Near	 00004364 _TEXT	
text . . . . . . . . . . . . . .	L Near	 00004DC6 _TEXT	
then . . . . . . . . . . . . . .	L Near	 000009B1 _TEXT	
trash_adr  . . . . . . . . . . .	Byte	 00004650 _STACK	
trash  . . . . . . . . . . . . .	DWord	 0000506C _TEXT	
type0  . . . . . . . . . . . . .	L Near	 00004D51 _TEXT	
type1  . . . . . . . . . . . . .	L Near	 00004DCB _TEXT	
type2  . . . . . . . . . . . . .	L Near	 00004DDA _TEXT	
unPAAUSE_  . . . . . . . . . . .	L Near	 000005CE _TEXT	
unPACK . . . . . . . . . . . . .	L Near	 00004C5E _TEXT	
unmap_file . . . . . . . . . . .	L Near	 0000009A _TEXT	
v_otherBlk . . . . . . . . . . .	DWord	 00005058 _TEXT	
var1 . . . . . . . . . . . . . .	L Near	 00000812 _TEXT	
variable . . . . . . . . . . . .	L Near	 0000081F _TEXT	
var  . . . . . . . . . . . . . .	L Near	 00004DFC _TEXT	
vc . . . . . . . . . . . . . . .	Number	 00000019h   
vector . . . . . . . . . . . . .	DWord	 00005134 _TEXT	
vp . . . . . . . . . . . . . . .	Number	 00000300h   
wW . . . . . . . . . . . . . . .	L Near	 00004D40 _TEXT	
warm . . . . . . . . . . . . . .	L Near	 0000052D _TEXT	
wcmain . . . . . . . . . . . . .	WNDCLASSEX  000000F8 _TEXT	
white  . . . . . . . . . . . . .	L Near	 0000424A _TEXT	
wkey1  . . . . . . . . . . . . .	L Near	 000047DC _TEXT	
wkeyex . . . . . . . . . . . . .	L Near	 0000483E _TEXT	
wkey . . . . . . . . . . . . . .	L Near	 000047B4 _TEXT	
wm . . . . . . . . . . . . . . .	MSG	 000002F4 _TEXT	
wndheight  . . . . . . . . . . .	DWord	 0000013C _TEXT	
wndwidth . . . . . . . . . . . .	DWord	 00000138 _TEXT	
words  . . . . . . . . . . . . .	DWord	 00004920 _TEXT	
xc . . . . . . . . . . . . . . .	DWord	 0000422C _TEXT	
xy_  . . . . . . . . . . . . . .	L Near	 000041EA _TEXT	
xycr . . . . . . . . . . . . . .	DWord	 000041D4 _TEXT	
xy . . . . . . . . . . . . . . .	DWord	 000041C8 _TEXT	
yc . . . . . . . . . . . . . . .	DWord	 00004230 _TEXT	
yellow . . . . . . . . . . . . .	Number	 00FFFF00h   

	   0 Warnings
	   0 Errors
